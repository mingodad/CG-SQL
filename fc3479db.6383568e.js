(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(138)),l=["components"],s={slug:"like-forms-tutorial",title:"A quick tutorial on LIKE forms",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql","errors"]},i={permalink:"/blog/like-forms-tutorial",editUrl:"https://github.com/facebookincubator/CG-SQL/edit/master/website/blog/blog/2020-11-20-like-forms-tutorial.md",source:"@site/blog/2020-11-20-like-forms-tutorial.md",description:"Everyone knows the usual expression syntax x LIKE y to do a string match.  But the CQL compiler also uses",date:"2020-11-20T00:00:00.000Z",tags:[{label:"facebook",permalink:"/blog/tags/facebook"},{label:"cg-sql",permalink:"/blog/tags/cg-sql"},{label:"errors",permalink:"/blog/tags/errors"}],title:"A quick tutorial on LIKE forms",readingTime:7.61,truncated:!1,prevItem:{title:"Introducing Declare Enum",permalink:"/blog/declare-enum-intro"},nextItem:{title:"Error Tracing Helper Macro",permalink:"/blog/error-tracing-macro"}},c=[],u={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,l);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Everyone knows the usual expression syntax ",Object(o.b)("inlineCode",{parentName:"p"},"x LIKE y")," to do a string match.  But the CQL compiler also uses\n",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," in a different way that's powerful and important.  CQL has the notion of data shapes and you use\n",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," to refer to them.  The simplest source of a data shape, and maybe the most common, is a table.\nMaybe something like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create table T(\n id integer not null,\n name text not null,\n age integer not null\n);\n")),Object(o.b)("p",null,"Now suppose you want to write a procedure that can insert a row into that table, You could write"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc insert_into_T(\n  id_ integer not null, \n  name_ text not null, \n  age_ integer not null\n)\nbegin\n  insert into T(id, name, age)  values(id_, name_, age_);\nend;\n")),Object(o.b)("p",null,"This is all fine and well but what if T had 50 columns?  That gets old fast.  And how can you\nbe sure that you inserted the columns into T in the right order?  This second example also compiles\neven though it's clearly wrong:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"  insert into T(id, name, age) values(age_, name_, id_);\n")),Object(o.b)("p",null,"And of course you can imagine things get only more complicated with more columns in T."),Object(o.b)("p",null,"We started adding the ",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," form to ease these issues and to ensure some consistency in the APIs while preventing\nsimple transpostion errors.  So you can instead write:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"create proc insert_into_T(like T)\nbegin\n  insert into T from arguments;\nend;\n")),Object(o.b)("p",null,"so here the ",Object(o.b)("inlineCode",{parentName:"p"},"like T"),' in the argument list simply means "make arguments that are the same as the columns of table T" -- well,\nalmost. It also adds an ',Object(o.b)("inlineCode",{parentName:"p"},"_")," to the end of each name so you end up exactly the same declaration as the long form above.\nBut you won't miss any arguments, and they'll be in the right order."),Object(o.b)("p",null,"And notice that we used ",Object(o.b)("inlineCode",{parentName:"p"},"from arguments")," to indicate that we wanted the values to come from the arguments in order. Again\nthis saves you from a lot of typing and a lot of error checking.  You can't get the arguments in the wrong order."),Object(o.b)("p",null,"These are the most basic patterns. But there are quite a few more."),Object(o.b)("p",null,"Let's suppose you want to write a procedure that returns in row with the highest age in the above.  Maybe you write\nsomething like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc highest_age()\nbegin\n  declare C cursor for select * from T;\n  declare M cursor like C;\n  loop fetch C\n  begin\n     if (not M or M.age < C.age) then\n       fetch M from C;\n     end if;\n  end;\n  out M;\nend;\n")),Object(o.b)("p",null,"Here we made a cursor ",Object(o.b)("inlineCode",{parentName:"p"},"M")," that is the same as the cursor ",Object(o.b)("inlineCode",{parentName:"p"},"C")," and then we are going to generate a single row result\nfrom the cursor.  Note that if you use a cursor name like ",Object(o.b)("inlineCode",{parentName:"p"},"M")," in an expression it refers to the hidden boolean\nthat says if the cursor has a row in it or not.  So ",Object(o.b)("inlineCode",{parentName:"p"},"M")," begins empty and we will load it if it's empty or if the age\nis higher than what we've already got."),Object(o.b)("p",null,"Let's show a few more of the forms.  Suppose we don't want to return ",Object(o.b)("inlineCode",{parentName:"p"},"name"),", just the ",Object(o.b)("inlineCode",{parentName:"p"},"id")," and the ",Object(o.b)("inlineCode",{parentName:"p"},"age"),".  We can\nchange things up a tiny bit."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc highest_age()\nbegin\n  declare C cursor for select * from T;\n  declare M cursor like select 1 id, 99 age;\n  loop fetch C\n  begin\n     if (not M or M.age < C.age) then\n       fetch M from cursor C(like M);\n     end if;\n  end;\n  out M;\nend;\n")),Object(o.b)("p",null,"So two things to notice.  We used an ",Object(o.b)("em",{parentName:"p"},"ad hoc")," shape, making a fake ",Object(o.b)("inlineCode",{parentName:"p"},"select")," statement that returns the shape we want.  This\nselect doesn't run but it does define types and columns easily.  Two not null integers in this case.  Now ",Object(o.b)("inlineCode",{parentName:"p"},"M")," is not the\nsame as ",Object(o.b)("inlineCode",{parentName:"p"},"C")," so we can't use the simplest form ",Object(o.b)("inlineCode",{parentName:"p"},"fetch M from C")," we have to use the more general form. "),Object(o.b)("p",null,"Fully expanded, what we wrote becomes:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"  FETCH M(id, age) FROM VALUES(C.id, C.age);\n")),Object(o.b)("p",null,"But as you can see, we didn't have to type all those column names.  And that's kind of the point of the ",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," construct."),Object(o.b)("p",null,"So we've covered a bunch of the shape sources already:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a table name"),Object(o.b)("li",{parentName:"ul"},"a cursor name"),Object(o.b)("li",{parentName:"ul"},"a select statement that gives the shape in an ad hoc fashion")),Object(o.b)("p",null,"There are three more"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a view name "),Object(o.b)("li",{parentName:"ul"},"the return shape of a procedure that returns a result set"),Object(o.b)("li",{parentName:"ul"},"the arguments of a procedure")),Object(o.b)("p",null,"View names are pretty simple, and they work the same as table names so we don't need to discuss those. Let's look\nat some of the other uses with procedures."),Object(o.b)("p",null,"Suppose we have a procedure that can return a result set shape but we want to be able to mock its results so we\ncan fake whatever result we need for testing.  "),Object(o.b)("p",null,"We'll complicate this a bit adding a new table (keeping short table names for the sample to save typing)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create table U(\n id integer not null,\n email text not null\n);\n")),Object(o.b)("p",null,"And here's a procedure:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc my_proc()\nbegin\n   select T.*, U.email from T inner join U on T.id = U.id;\nend;\n")),Object(o.b)("p",null,"Now we want to be able to make any fake result we want, so maybe want a temp table. No problem:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc _init_fake_results()\nbegin\n  create temp table if not exists fake_results(\n   like my_proc\n  );\nend;\n\ncreate proc add_fake_result(like fake_results)\nbegin\n  insert into fake_results from arguments;\nend;\n\ncreate proc get_fake_results()\nbegin\n  select * from fake_results;\nend;\n")),Object(o.b)("p",null,"The above is very generic and will maintain well.  You can see we made a temp table that will have\nexactly the same shape as whatever ",Object(o.b)("inlineCode",{parentName:"p"},"my_proc")," returns.  In this case it becomes:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"CREATE PROC _init_fake_results ()\nBEGIN\n  CREATE TEMP TABLE IF NOT EXISTS fake_results(\n    id INTEGER NOT NULL,\n    name TEXT NOT NULL,\n    age INTEGER NOT NULL,\n    email TEXT NOT NULL\n  );\nEND;\n")),Object(o.b)("p",null,"And the rest are patterns we've seem before."),Object(o.b)("p",null,"The last source of shapes are procedure arguments.  There's lots of good cases for those, I wrote an ",Object(o.b)("a",{parentName:"p",href:"https://cgsql.dev/blog/update"},"entry")," on those previously but I'll give a simple example here too."),Object(o.b)("p",null,"Suppose we have this weird procedure:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create proc delete_stuff(age_ integer, name_ text)\nbegin\n  if age_ is not null then\n     delete from T where T.age = age_;\n  end if;\n\n  if name_ is not null then\n     delete from T where T.name = name_;\n  end if;\nend;\n")),Object(o.b)("p",null,"What if we wanted to log any errors that happen here?  Maybe make a verison that logs.  We can do it like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},'create proc delete_and_log(like delete_stuff arguments)\nbegin\n  begin try\n    call delete_stuff(from arguments);\n  end try;\n  begin catch\n    call printf("delete failed\\n"); -- or whatever\n    throw;\n  end catch;\nend;\n')),Object(o.b)("p",null,"The nice thing about this logging wrapper procedure is that if ",Object(o.b)("inlineCode",{parentName:"p"},"delete_stuff")," changes, the wrapper will change with it."),Object(o.b)("p",null,"That covers all of the shape sources and as we saw we can use them to create things like cursors, tables, and argument lists.\nWe can use them to specify a subset of columns that might be of interest when fetching or updating cursors.  And we can use\nthem in one last way -- to restrict arguments to a particular shape.  Let's see how that works by making the previous logger\na little different.  Here we added an argument which tells if we should look.  And that might look like it would\nspoil the ",Object(o.b)("inlineCode",{parentName:"p"},"from arguments")," part of the forwarding, but there is the final way to use ",Object(o.b)("inlineCode",{parentName:"p"},"LIKE"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},'create proc delete_and_log2(log bool not null, like delete_stuff arguments)\nbegin\n  if log and age_ is not null then\n    call printf("deleting %d\\n", age_); -- or whatever\n  end if;\n  if log and name_ is not null then\n    call printf("deleting %d\\n", name_); -- or whatever\n  end if;\n\n  call delete_stuff(from arguments like delete_stuff arguments);\nend;\n')),Object(o.b)("p",null,"So this form lets you use some of your arguments, the ones that match a certain shape.  And as we saw in\nthe previous article you can also use ",Object(o.b)("inlineCode",{parentName:"p"},"from C")," to pass arguments where ",Object(o.b)("inlineCode",{parentName:"p"},"C")," is a cursor and in that case\nyou can also specify that arguments be matched by name ",Object(o.b)("inlineCode",{parentName:"p"},"from C like shape"),'.  In both those cases the\nformal parameter names of the called procedure are matched against the names of the shape and passed in\nthe order of the formals.  So this is like "call by name", the fields of the cursor or the order of\narguments in the argument list might be different than the formals but you\'ll get the correct items\nin the correct order regardless, because it matches by name.'),Object(o.b)("p",null,"These forms can save you a lot of typing... and are excellent at avoiding errors and improving maintainability.\nWhere they appear in SQL statements, everything is expanded before it goes to SQLite so SQLite will see\nnormal syntax forms.  Which is good because obviously SQLite doesn't know anything about this enhanced\n",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," business."),Object(o.b)("p",null,"In the examples above there were only one or two columns with very short names, but in real world code\nthere can easily be dozens of columns with very long names.  In those cases, these forms really shine."))}b.isMDXComponent=!0},138:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=u(n),m=a,h=b["".concat(l,".").concat(m)]||b[m]||p[m]||o;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);