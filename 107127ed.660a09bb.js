(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{138:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},b=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=u(n),m=a,h=b["".concat(l,".").concat(m)]||b[m]||d[m]||i;return n?o.a.createElement(h,r(r({ref:t},s),{},{components:n})):o.a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),o=n(6),i=(n(0),n(138)),l=["components"],r={id:"x4",title:"Appendix 4: CQL Error Codes",sidebar_label:"Appendix 4: CQL Error Codes"},c={unversionedId:"x4",id:"x4",isDocsHomePage:!1,title:"Appendix 4: CQL Error Codes",description:"\x3c!---",source:"@site/../CQL_Guide/x4.md",slug:"/x4",permalink:"/cql-guide/x4",version:"current",lastUpdatedBy:"mingodad",lastUpdatedAt:1625142269,sidebar_label:"Appendix 4: CQL Error Codes",sidebar:"someSidebar",previous:{title:"Appendix 3: Control Directives",permalink:"/cql-guide/x3"},next:{title:"Appendix 5: JSON Schema Grammar",permalink:"/cql-guide/x5"}},s=[{value:"CQL0001: operands must be an integer type, not real",id:"cql0001-operands-must-be-an-integer-type-not-real",children:[]},{value:"CQL0002: left operand cannot be an object in &#39;operator&#39;",id:"cql0002-left-operand-cannot-be-an-object-in-operator",children:[]},{value:"CQL0003: left operand cannot be an object in &#39;operator&#39;",id:"cql0003-left-operand-cannot-be-an-object-in-operator",children:[]},{value:"CQL0004: left operand cannot be a blob in &#39;operator&#39;",id:"cql0004-left-operand-cannot-be-a-blob-in-operator",children:[]},{value:"CQL0005: right operand cannot be a blob in &#39;operator&#39;",id:"cql0005-right-operand-cannot-be-a-blob-in-operator",children:[]},{value:"CQL0007: left operand cannot be a string in &#39;operator&#39;",id:"cql0007-left-operand-cannot-be-a-string-in-operator",children:[]},{value:"CQL0008: right operand cannot be a string in &#39;operator&#39;",id:"cql0008-right-operand-cannot-be-a-string-in-operator",children:[]},{value:"CQL0009: incompatible types in expression &#39;subject&#39;",id:"cql0009-incompatible-types-in-expression-subject",children:[]},{value:"CQL0010: incompatible types in expression &#39;subject&#39;",id:"cql0010-incompatible-types-in-expression-subject",children:[]},{value:"CQL0011: incompatible types in expression &#39;subject&#39;",id:"cql0011-incompatible-types-in-expression-subject",children:[]},{value:"CQL0012: incompatible types in expression &#39;subject&#39;",id:"cql0012-incompatible-types-in-expression-subject",children:[]},{value:"CQL0013: cannot assign/copy possibly null expression to not null target &#39;target&#39;",id:"cql0013-cannot-assigncopy-possibly-null-expression-to-not-null-target-target",children:[]},{value:"CQL0014: cannot assign/copy sensitive expression to not null target &#39;target&#39;",id:"cql0014-cannot-assigncopy-sensitive-expression-to-not-null-target-target",children:[]},{value:"CQL0015: expected numeric expression &#39;context&#39;",id:"cql0015-expected-numeric-expression-context",children:[]},{value:"CQL0016: duplicate table name in join &#39;table&#39;",id:"cql0016-duplicate-table-name-in-join-table",children:[]},{value:"CQL0017: index was present but now it does not exist (use <code>@delete</code> instead) &#39;index&#39;",id:"cql0017-index-was-present-but-now-it-does-not-exist-use-delete-instead-index",children:[]},{value:"CQL0018: duplicate index name &#39;index&#39;",id:"cql0018-duplicate-index-name-index",children:[]},{value:"CQL0019: create index table name not found &#39;table_name&#39;",id:"cql0019-create-index-table-name-not-found-table_name",children:[]},{value:"CQL0020: duplicate constraint name in table &#39;constraint_name&#39;",id:"cql0020-duplicate-constraint-name-in-table-constraint_name",children:[]},{value:"CQL0021: foreign key refers to non-existent table &#39;table_name&#39;",id:"cql0021-foreign-key-refers-to-non-existent-table-table_name",children:[]},{value:"CQL0022: the exact type of both sides of a foreign key must match (expected expected_type; found actual_type) &#39;key_name&#39;",id:"cql0022-the-exact-type-of-both-sides-of-a-foreign-key-must-match-expected-expected_type-found-actual_type-key_name",children:[]},{value:"CQL0023: The number of columns on both sides of a foreign key must match",id:"cql0023-the-number-of-columns-on-both-sides-of-a-foreign-key-must-match",children:[]},{value:"CQL0025: version number in annotation must be positive",id:"cql0025-version-number-in-annotation-must-be-positive",children:[]},{value:"CQL0026: duplicate version annotation",id:"cql0026-duplicate-version-annotation",children:[]},{value:"CQL0027: a procedure can appear in only one annotation &#39;procedure_name&#39;",id:"cql0027-a-procedure-can-appear-in-only-one-annotation-procedure_name",children:[]},{value:"CQL0028: the FK reference must be exactly one column with the correct type &#39;column_name&#39;",id:"cql0028-the-fk-reference-must-be-exactly-one-column-with-the-correct-type-column_name",children:[]},{value:"CQL0029: autoincrement column must be LONG_INTEGER PRIMARY KEY &#39;column name&#39;",id:"cql0029-autoincrement-column-must-be-long_integer-primary-key-column-name",children:[]},{value:"CQL0030: a column attribute was specified twice on the same column &#39;column_name&#39;",id:"cql0030-a-column-attribute-was-specified-twice-on-the-same-column-column_name",children:[]},{value:"CQL0031: column can&#39;t be primary key and also unique key &#39;column&#39;",id:"cql0031-column-cant-be-primary-key-and-also-unique-key-column",children:[]},{value:"CQL0032: created columns must be at the end and must be in version order&quot;, &#39;column&#39;",id:"cql0032-created-columns-must-be-at-the-end-and-must-be-in-version-order-column",children:[]},{value:"CQL0033: columns in a table marked @recreate cannot have @create or <code>@delete</code>, &#39;column&#39;",id:"cql0033-columns-in-a-table-marked-recreate-cannot-have-create-or-delete-column",children:[]},{value:"CQL0034: create/delete version numbers can only be applied to columns that are nullable or have a default value &#39;column&#39;",id:"cql0034-createdelete-version-numbers-can-only-be-applied-to-columns-that-are-nullable-or-have-a-default-value-column",children:[]},{value:"CQL0035: column delete version can&#39;t be &lt;= column create version&quot;, &#39;column&#39;",id:"cql0035-column-delete-version-cant-be--column-create-version-column",children:[]},{value:"CQL0036: column delete version can&#39;t be &lt;= the table create version &#39;column&#39;",id:"cql0036-column-delete-version-cant-be--the-table-create-version-column",children:[]},{value:"CQL0037: column delete version can&#39;t be &gt;= the table delete version",id:"cql0037-column-delete-version-cant-be--the-table-delete-version",children:[]},{value:"CQL0038: column create version can&#39;t be <code>&lt;=</code> the table create version &#39;column&#39;",id:"cql0038-column-create-version-cant-be--the-table-create-version-column",children:[]},{value:"CQL0039: column create version can&#39;t be <code>&gt;=</code> the table delete version &#39;column&#39;",id:"cql0039-column-create-version-cant-be--the-table-delete-version-column",children:[]},{value:"CQL0040: table can only have one autoinc column &#39;column&#39;",id:"cql0040-table-can-only-have-one-autoinc-column-column",children:[]},{value:"CQL0041: tables cannot have object columns &#39;column&#39;",id:"cql0041-tables-cannot-have-object-columns-column",children:[]},{value:"CQL0042: left operand must be a string in &#39;LIKE/MATCH/GLOB&#39;",id:"cql0042-left-operand-must-be-a-string-in-likematchglob",children:[]},{value:"CQL0043: right operand must be a string in &#39;LIKE/MATCH/GLOB&#39;",id:"cql0043-right-operand-must-be-a-string-in-likematchglob",children:[]},{value:"CQL0044: operator may only appear in the context of a SQL statement &#39;MATCH&#39;",id:"cql0044-operator-may-only-appear-in-the-context-of-a-sql-statement-match",children:[]},{value:"CQL0045: blob operand not allowed in &#39;operator&#39;",id:"cql0045-blob-operand-not-allowed-in-operator",children:[]},{value:"CQL0046: object operand not allowed in &#39;operator&#39;",id:"cql0046-object-operand-not-allowed-in-operator",children:[]},{value:"CQL0047: string operand not allowed in &#39;operator&#39;",id:"cql0047-string-operand-not-allowed-in-operator",children:[]},{value:"CQL0048: blob operand not allowed in &#39;NOT&#39;",id:"cql0048-blob-operand-not-allowed-in-not",children:[]},{value:"CQL0049: object operand not allowed in &#39;NOT&#39;",id:"cql0049-object-operand-not-allowed-in-not",children:[]},{value:"CQL0050: string operand not allowed in &#39;NOT&#39;",id:"cql0050-string-operand-not-allowed-in-not",children:[]},{value:"CQL0051: argument can only be used in count(<em>) &#39;</em>&#39;",id:"cql0051-argument-can-only-be-used-in-count-",children:[]},{value:"CQL0052: select * cannot be used with no FROM clause",id:"cql0052-select--cannot-be-used-with-no-from-clause",children:[]},{value:"CQL0053: select table.* cannot be used with no FROM clause",id:"cql0053-select-table-cannot-be-used-with-no-from-clause",children:[]},{value:"CQL0054: table not found &#39;table&#39;",id:"cql0054-table-not-found-table",children:[]},{value:"CQL0055: all columns in the select must have a name",id:"cql0055-all-columns-in-the-select-must-have-a-name",children:[]},{value:"CQL0056: NULL expression has no type to imply a needed type &#39;variable&#39;",id:"cql0056-null-expression-has-no-type-to-imply-a-needed-type-variable",children:[]},{value:"CQL0057: if multiple selects, all must have the same column count",id:"cql0057-if-multiple-selects-all-must-have-the-same-column-count",children:[]},{value:"CQL0058: if multiple selects, all column names must be identical so they have unambiguous names &#39;column&#39;",id:"cql0058-if-multiple-selects-all-column-names-must-be-identical-so-they-have-unambiguous-names-column",children:[]},{value:"CQL0059: a variable name might be ambiguous with a column name, this is an anti-pattern &#39;name&#39;",id:"cql0059-a-variable-name-might-be-ambiguous-with-a-column-name-this-is-an-anti-pattern-name",children:[]},{value:"CQL0060: referenced table can be independently recreated so it cannot be used in a foreign key, &#39;referenced_table&#39;",id:"cql0060-referenced-table-can-be-independently-recreated-so-it-cannot-be-used-in-a-foreign-key-referenced_table",children:[]},{value:"CQL0061: if multiple selects, all columns must be an exact type match (expected expected_type; found actual_type) &#39;column&#39;",id:"cql0061-if-multiple-selects-all-columns-must-be-an-exact-type-match-expected-expected_type-found-actual_type-column",children:[]},{value:"CQL0062: if multiple selects, all columns must be an exact type match (including nullability) (expected expected_type; found actual_type) &#39;column&#39;",id:"cql0062-if-multiple-selects-all-columns-must-be-an-exact-type-match-including-nullability-expected-expected_type-found-actual_type-column",children:[]},{value:"CQL0063: can&#39;t mix and match out statement with select/call for return values &#39;procedure_name&#39;",id:"cql0063-cant-mix-and-match-out-statement-with-selectcall-for-return-values-procedure_name",children:[]},{value:"CQL0064: object variables may not appear in the context of a SQL statement",id:"cql0064-object-variables-may-not-appear-in-the-context-of-a-sql-statement",children:[]},{value:"CQL0065: identifier is ambiguous &#39;name&#39;",id:"cql0065-identifier-is-ambiguous-name",children:[]},{value:"CQL0066: if a table is marked <code>@recreate</code>, its indices must be in its schema region &#39;index_name&#39;",id:"cql0066-if-a-table-is-marked-recreate-its-indices-must-be-in-its-schema-region-index_name",children:[]},{value:"CQL0067: cursor was not used with &#39;fetch cursor&#39;  &#39;cursor_name&#39;",id:"cql0067-cursor-was-not-used-with-fetch-cursor--cursor_name",children:[]},{value:"CQL0068: field not found in cursor &#39;field&#39;",id:"cql0068-field-not-found-in-cursor-field",children:[]},{value:"CQL0069: name not found &#39;name&#39;",id:"cql0069-name-not-found-name",children:[]},{value:"CQL0070: incompatible object type &#39;incompatible_type&#39;",id:"cql0070-incompatible-object-type-incompatible_type",children:[]},{value:"CQL0071: first operand cannot be a blob in &#39;BETWEEN/NOT BETWEEN&#39;",id:"cql0071-first-operand-cannot-be-a-blob-in-betweennot-between",children:[]},{value:"CQL0072: first operand cannot be a blob in &#39;BETWEEN/NOT BETWEEN&#39;",id:"cql0072-first-operand-cannot-be-a-blob-in-betweennot-between",children:[]},{value:"CQL0073: CAST may only appear in the context of SQL statement",id:"cql0073-cast-may-only-appear-in-the-context-of-sql-statement",children:[]},{value:"CQL0074: Too few arguments provided &#39;coalesce&#39;",id:"cql0074-too-few-arguments-provided-coalesce",children:[]},{value:"CQL0075: Incorrect number of arguments &#39;ifnull&#39;",id:"cql0075-incorrect-number-of-arguments-ifnull",children:[]},{value:"CQL0076: Null literal is useless in function &#39;ifnull/coalesce&#39;",id:"cql0076-null-literal-is-useless-in-function-ifnullcoalesce",children:[]},{value:"CQL0077: encountered arg known to be not null before the end of the list, rendering the rest useless.",id:"cql0077-encountered-arg-known-to-be-not-null-before-the-end-of-the-list-rendering-the-rest-useless",children:[]},{value:"CQL0078: not in (select ...) is only allowed inside of select lists, where, on, and having clauses",id:"cql0078-not-in-select--is-only-allowed-inside-of-select-lists-where-on-and-having-clauses",children:[]},{value:"CQL0079: function got incorrect number of arguments &#39;name&#39;",id:"cql0079-function-got-incorrect-number-of-arguments-name",children:[]},{value:"CQL0080: function may not appear in this context &#39;name&#39;",id:"cql0080-function-may-not-appear-in-this-context-name",children:[]},{value:"CQL0081: aggregates only make sense if there is a FROM clause &#39;name&#39;",id:"cql0081-aggregates-only-make-sense-if-there-is-a-from-clause-name",children:[]},{value:"CQL0082: argument must be numeric &#39;AVERAGE&#39;",id:"cql0082-argument-must-be-numeric-average",children:[]},{value:"CQL0083: argument must be numeric &#39;SUM&#39;",id:"cql0083-argument-must-be-numeric-sum",children:[]},{value:"CQL0084: second argument must be a string in function &#39;group_concat&#39;",id:"cql0084-second-argument-must-be-a-string-in-function-group_concat",children:[]},{value:"CQL0085: all arguments must be strings &#39;strftime&#39;",id:"cql0085-all-arguments-must-be-strings-strftime",children:[]},{value:"CQL0086: first argument must be a string in function &#39;printf&#39;",id:"cql0086-first-argument-must-be-a-string-in-function-printf",children:[]},{value:"CQL0087: no object/blob types are allowed in arguments for function &#39;printf&#39;",id:"cql0087-no-objectblob-types-are-allowed-in-arguments-for-function-printf",children:[]},{value:"CQL0088: User function may not appear in the context of a SQL statement &#39;function_name&#39;",id:"cql0088-user-function-may-not-appear-in-the-context-of-a-sql-statement-function_name",children:[]},{value:"CQL0089: User function may only appear in the context of a SQL statement &#39;function_name&#39;",id:"cql0089-user-function-may-only-appear-in-the-context-of-a-sql-statement-function_name",children:[]},{value:"CQL0090: Stored proc calls may not appear in the context of a SQL statement &#39;proc_name&#39;",id:"cql0090-stored-proc-calls-may-not-appear-in-the-context-of-a-sql-statement-proc_name",children:[]},{value:"CQL0091: Stored procs that deal with result sets or cursors cannot be invoked as functions &#39;name&#39;",id:"cql0091-stored-procs-that-deal-with-result-sets-or-cursors-cannot-be-invoked-as-functions-name",children:[]},{value:"CQL0092: RAISE may only be used in a trigger statement",id:"cql0092-raise-may-only-be-used-in-a-trigger-statement",children:[]},{value:"CQL0093: RAISE 2nd argument must be a string",id:"cql0093-raise-2nd-argument-must-be-a-string",children:[]},{value:"CQL0094: function not yet implemented &#39;function&#39;",id:"cql0094-function-not-yet-implemented-function",children:[]},{value:"CQL0095: table/view not defined &#39;name&#39;",id:"cql0095-tableview-not-defined-name",children:[]},{value:"CQL0096: join using column not found on the left side of the join &#39;column_name&#39;",id:"cql0096-join-using-column-not-found-on-the-left-side-of-the-join-column_name",children:[]},{value:"CQL0097: join using column not found on the right side of the join &#39;column_name&#39;",id:"cql0097-join-using-column-not-found-on-the-right-side-of-the-join-column_name",children:[]},{value:"CQL0098: left/right column types in join USING(...) do not match exactly &#39;column_name&#39;",id:"cql0098-leftright-column-types-in-join-using-do-not-match-exactly-column_name",children:[]},{value:"CQL0099: HAVING clause requires GROUP BY clause",id:"cql0099-having-clause-requires-group-by-clause",children:[]},{value:"CQL0100: duplicate common table name &#39;name&#39;",id:"cql0100-duplicate-common-table-name-name",children:[]},{value:"CQL0101: too few column names specified in common table expression &#39;name&#39;",id:"cql0101-too-few-column-names-specified-in-common-table-expression-name",children:[]},{value:"CQL0102: too many column names specified in common table expression &#39;name&#39;",id:"cql0102-too-many-column-names-specified-in-common-table-expression-name",children:[]},{value:"CQL0103: duplicate table/view name &#39;name&#39;",id:"cql0103-duplicate-tableview-name-name",children:[]},{value:"CQL0104: view was present but now it does not exist (use <code>@delete</code> instead) &#39;name&#39;",id:"cql0104-view-was-present-but-now-it-does-not-exist-use-delete-instead-name",children:[]},{value:"CQL0105: object was a view but is now a table &#39;name&#39;",id:"cql0105-object-was-a-view-but-is-now-a-table-name",children:[]},{value:"CQL0106: trigger was present but now it does not exist (use <code>@delete</code> instead) &#39;name&#39;",id:"cql0106-trigger-was-present-but-now-it-does-not-exist-use-delete-instead-name",children:[]},{value:"CQL0107: delete version can&#39;t be &lt;= create version &#39;name&#39;",id:"cql0107-delete-version-cant-be--create-version-name",children:[]},{value:"CQL0108: table in drop statement does not exist &#39;table_name&#39;",id:"cql0108-table-in-drop-statement-does-not-exist-table_name",children:[]},{value:"CQL0109: cannot drop a view with drop table &#39;view_name&#39;",id:"cql0109-cannot-drop-a-view-with-drop-table-view_name",children:[]},{value:"CQL0110: view in drop statement does not exist &#39;view_name&#39;",id:"cql0110-view-in-drop-statement-does-not-exist-view_name",children:[]},{value:"CQL0111: cannot drop a table with drop view &#39;name&#39;",id:"cql0111-cannot-drop-a-table-with-drop-view-name",children:[]},{value:"CQL0112: index in drop statement was not declared &#39;index_name&#39;",id:"cql0112-index-in-drop-statement-was-not-declared-index_name",children:[]},{value:"CQL0113: trigger in drop statement was not declared &#39;name&#39;",id:"cql0113-trigger-in-drop-statement-was-not-declared-name",children:[]},{value:"CQL0114: current schema can&#39;t go back to recreate semantics for &#39;table_name&#39;",id:"cql0114-current-schema-cant-go-back-to-recreate-semantics-for-table_name",children:[]},{value:"CQL0115: current create version not equal to previous create version for &#39;table&#39;",id:"cql0115-current-create-version-not-equal-to-previous-create-version-for-table",children:[]},{value:"CQL0116: current delete version not equal to previous delete version for &#39;table&#39;",id:"cql0116-current-delete-version-not-equal-to-previous-delete-version-for-table",children:[]},{value:"CQL0117: <code>@delete</code> procedure changed in object &#39;table_name&#39;",id:"cql0117-delete-procedure-changed-in-object-table_name",children:[]},{value:"CQL0118: <code>@create</code> procedure changed in object &#39;table_name&#39;",id:"cql0118-create-procedure-changed-in-object-table_name",children:[]},{value:"CQL0119: column name is different between previous and current schema &#39;name&#39;",id:"cql0119-column-name-is-different-between-previous-and-current-schema-name",children:[]},{value:"CQL0120: column type is different between previous and current schema &#39;name&#39;",id:"cql0120-column-type-is-different-between-previous-and-current-schema-name",children:[]},{value:"CQL0121: column current create version not equal to previous create version &#39;name&#39;",id:"cql0121-column-current-create-version-not-equal-to-previous-create-version-name",children:[]},{value:"CQL0122: column current delete version not equal to previous delete version &#39;name&#39;",id:"cql0122-column-current-delete-version-not-equal-to-previous-delete-version-name",children:[]},{value:"CQL0123: column <code>@delete</code> procedure changed &#39;name&#39;",id:"cql0123-column-delete-procedure-changed-name",children:[]},{value:"CQL0124: column <code>@create</code> procedure changed &#39;name&#39;",id:"cql0124-column-create-procedure-changed-name",children:[]},{value:"CQL0125: column current default value not equal to previous default value &#39;column&#39;",id:"cql0125-column-current-default-value-not-equal-to-previous-default-value-column",children:[]},{value:"CQL0126: table was present but now it does not exist (use <code>@delete</code> instead) &#39;table&#39;",id:"cql0126-table-was-present-but-now-it-does-not-exist-use-delete-instead-table",children:[]},{value:"CQL0127: object was a table but is now a view &#39;name&#39;",id:"cql0127-object-was-a-table-but-is-now-a-view-name",children:[]},{value:"CQL0128: table has a column that is different in the previous and current schema &#39;column&#39;",id:"cql0128-table-has-a-column-that-is-different-in-the-previous-and-current-schema-column",children:[]},{value:"CQL0129: a column was removed from the table rather than marked with <code>@delete</code> &#39;column_name&#39;",id:"cql0129-a-column-was-removed-from-the-table-rather-than-marked-with-delete-column_name",children:[]},{value:"CQL0130: table has columns added without marking them <code>@create</code> &#39;column_name&#39;",id:"cql0130-table-has-columns-added-without-marking-them-create-column_name",children:[]},{value:"CQL0131: table has newly added columns that are marked both <code>@create</code> and <code>@delete</code> &#39;column_name&#39;",id:"cql0131-table-has-newly-added-columns-that-are-marked-both-create-and-delete-column_name",children:[]},{value:"CQL0132: table has a facet that is different in the previous and current schema &#39;table_name&#39;",id:"cql0132-table-has-a-facet-that-is-different-in-the-previous-and-current-schema-table_name",children:[]},{value:"CQL0133: non-column facets have been removed from the table &#39;name&#39;",id:"cql0133-non-column-facets-have-been-removed-from-the-table-name",children:[]},{value:"CQL0134: table has a new non-column facet in the current schema &#39;table_name&#39;",id:"cql0134-table-has-a-new-non-column-facet-in-the-current-schema-table_name",children:[]},{value:"CQL0135: table create statement attributes different than previous version &#39;table_name&#39;",id:"cql0135-table-create-statement-attributes-different-than-previous-version-table_name",children:[]},{value:"CQL0136: trigger already exists &#39;trigger_name&#39;",id:"cql0136-trigger-already-exists-trigger_name",children:[]},{value:"CQL0137: table/view not found &#39;name&#39;",id:"cql0137-tableview-not-found-name",children:[]},{value:"CQL0138: a trigger on a view must be the INSTEAD OF form &#39;name&#39;",id:"cql0138-a-trigger-on-a-view-must-be-the-instead-of-form-name",children:[]},{value:"CQL0139: temp objects may not have versioning annotations &#39;object_name&#39;",id:"cql0139-temp-objects-may-not-have-versioning-annotations-object_name",children:[]},{value:"CQL0140: columns in a temp table may not have versioning attributes &#39;column_name&#39;",id:"cql0140-columns-in-a-temp-table-may-not-have-versioning-attributes-column_name",children:[]},{value:"CQL0141: table has an AUTOINCREMENT column; it cannot also be WITHOUT ROWID &#39;table_name&#39;",id:"cql0141-table-has-an-autoincrement-column-it-cannot-also-be-without-rowid-table_name",children:[]},{value:"CQL0142: duplicate column name &#39;column_name&#39;",id:"cql0142-duplicate-column-name-column_name",children:[]},{value:"CQL0143: more than one primary key in table &#39;table_name&#39;",id:"cql0143-more-than-one-primary-key-in-table-table_name",children:[]},{value:"CQL0144: cannot alter a view &#39;view_name&#39;",id:"cql0144-cannot-alter-a-view-view_name",children:[]},{value:"CQL0144: table in alter statement does not exist &#39;table_name&#39;",id:"cql0144-table-in-alter-statement-does-not-exist-table_name",children:[]},{value:"CQL0145: version annotations not valid in alter statement &#39;column_name&#39;",id:"cql0145-version-annotations-not-valid-in-alter-statement-column_name",children:[]},{value:"CQL0146: adding an auto increment column is not allowed &#39;column_name&#39;",id:"cql0146-adding-an-auto-increment-column-is-not-allowed-column_name",children:[]},{value:"CQL0147: adding a not nullable column with no default value is not allowed &#39;column_name&#39;",id:"cql0147-adding-a-not-nullable-column-with-no-default-value-is-not-allowed-column_name",children:[]},{value:"CQL0148: added column must already be reflected in declared schema, with <code>@create</code>, exact name match required &#39;column_name&#39;",id:"cql0148-added-column-must-already-be-reflected-in-declared-schema-with-create-exact-name-match-required-column_name",children:[]},{value:"CQL0149: added column must be an exact match for the column type declared in the table &#39;column_name&#39;",id:"cql0149-added-column-must-be-an-exact-match-for-the-column-type-declared-in-the-table-column_name",children:[]},{value:"CQL0150: expected numeric expression in IF predicate",id:"cql0150-expected-numeric-expression-in-if-predicate",children:[]},{value:"CQL0151: table in delete statement does not exist &#39;table_name&#39;",id:"cql0151-table-in-delete-statement-does-not-exist-table_name",children:[]},{value:"CQL0152: cannot delete from a view &#39;view_name&#39;",id:"cql0152-cannot-delete-from-a-view-view_name",children:[]},{value:"CQL0153: duplicate target column name in update statement &#39;column_name&#39;",id:"cql0153-duplicate-target-column-name-in-update-statement-column_name",children:[]},{value:"CQL0154: table in update statement does not exist &#39;table_name&#39;",id:"cql0154-table-in-update-statement-does-not-exist-table_name",children:[]},{value:"CQL0155: cannot update a view &#39;view_name&#39;",id:"cql0155-cannot-update-a-view-view_name",children:[]},{value:"CQL0156: seed expression must be a non-nullable integer",id:"cql0156-seed-expression-must-be-a-non-nullable-integer",children:[]},{value:"CQL0157: count of columns differs from count of values",id:"cql0157-count-of-columns-differs-from-count-of-values",children:[]},{value:"CQL0158: required column missing in INSERT statement &#39;column_name&#39;",id:"cql0158-required-column-missing-in-insert-statement-column_name",children:[]},{value:"CQL0159: cannot add an index to a virtual table &#39;table_name&#39;",id:"cql0159-cannot-add-an-index-to-a-virtual-table-table_name",children:[]},{value:"CQL0160: table in insert statement does not exist &#39;table_name&#39;",id:"cql0160-table-in-insert-statement-does-not-exist-table_name",children:[]},{value:"CQL0161: cannot insert into a view &#39;view_name&#39;",id:"cql0161-cannot-insert-into-a-view-view_name",children:[]},{value:"CQL0162: cannot add a trigger to a virtual table &#39;table_name&#39;",id:"cql0162-cannot-add-a-trigger-to-a-virtual-table-table_name",children:[]},{value:"CQL0163: FROM ARGUMENTS construct is only valid inside a procedure",id:"cql0163-from-arguments-construct-is-only-valid-inside-a-procedure",children:[]},{value:"CQL0164: cannot use ALTER TABLE on a virtual table &#39;table_name&#39;",id:"cql0164-cannot-use-alter-table-on-a-virtual-table-table_name",children:[]},{value:"CQL0165: fetch values is only for value cursors, not for sqlite cursors &#39;cursor_name&#39;",id:"cql0165-fetch-values-is-only-for-value-cursors-not-for-sqlite-cursors-cursor_name",children:[]},{value:"CQL0166: count of columns differs from count of values",id:"cql0166-count-of-columns-differs-from-count-of-values",children:[]},{value:"CQL0167: required column missing in FETCH statement &#39;column_name&#39;",id:"cql0167-required-column-missing-in-fetch-statement-column_name",children:[]},{value:"CQL0168: there&#39;s no good way to generate dummy blobs; not supported for now",id:"cql0168-theres-no-good-way-to-generate-dummy-blobs-not-supported-for-now",children:[]},{value:"CQL0169: enum not found &#39;enum_name&#39;",id:"cql0169-enum-not-found-enum_name",children:[]},{value:"CQL0170 available for re-use",id:"cql0170-available-for-re-use",children:[]},{value:"CQL0171: name not found &#39;name&#39;",id:"cql0171-name-not-found-name",children:[]},{value:"CQL0172: name list has duplicate name &#39;name&#39;",id:"cql0172-name-list-has-duplicate-name-name",children:[]},{value:"CQL0173: variable not found &#39;variable_name&#39;",id:"cql0173-variable-not-found-variable_name",children:[]},{value:"CQL0174: cannot set a cursor &#39;cursor_name&#39;",id:"cql0174-cannot-set-a-cursor-cursor_name",children:[]},{value:"CQL0175: duplicate parameter name &#39;parameter_name&#39;",id:"cql0175-duplicate-parameter-name-parameter_name",children:[]},{value:"CQL0176 available for re-use",id:"cql0176-available-for-re-use",children:[]},{value:"CQL0177 available for re-use",id:"cql0177-available-for-re-use",children:[]},{value:"CQL0178: proc has no result &#39;like_name&#39;",id:"cql0178-proc-has-no-result-like_name",children:[]},{value:"CQL0179 available for re-use",id:"cql0179-available-for-re-use",children:[]},{value:"CQL0180: duplicate column name in result not allowed &#39;column_name&#39;",id:"cql0180-duplicate-column-name-in-result-not-allowed-column_name",children:[]},{value:"CQL0181: autodrop temp table does not exist &#39;name&#39;",id:"cql0181-autodrop-temp-table-does-not-exist-name",children:[]},{value:"CQL0182: autodrop target is not a table &#39;name&#39;",id:"cql0182-autodrop-target-is-not-a-table-name",children:[]},{value:"CQL0183: autodrop target must be a temporary table &#39;name&#39;",id:"cql0183-autodrop-target-must-be-a-temporary-table-name",children:[]},{value:"CQL0184: stored procedures cannot be nested &#39;name&#39;",id:"cql0184-stored-procedures-cannot-be-nested-name",children:[]},{value:"CQL0185: proc name conflicts with func name &#39;name&#39;",id:"cql0185-proc-name-conflicts-with-func-name-name",children:[]},{value:"CQL0186: duplicate stored proc name &#39;name&#39;",id:"cql0186-duplicate-stored-proc-name-name",children:[]},{value:"CQL0187: @schema_upgrade_version not declared or doesn&#39;t match upgrade version <code>N</code> for proc &#39;name&#39;",id:"cql0187-schema_upgrade_version-not-declared-or-doesnt-match-upgrade-version-n-for-proc-name",children:[]},{value:"CQL0188: procedure is supposed to do schema migration but it doesn&#39;t have any DML &#39;name&#39;",id:"cql0188-procedure-is-supposed-to-do-schema-migration-but-it-doesnt-have-any-dml-name",children:[]},{value:"CQL0189: procedure declarations/definitions do not match &#39;name&#39;",id:"cql0189-procedure-declarationsdefinitions-do-not-match-name",children:[]},{value:"CQL0190: duplicate column name &#39;name&#39;",id:"cql0190-duplicate-column-name-name",children:[]},{value:"CQL0191: declared functions must be top level &#39;function_name&#39;",id:"cql0191-declared-functions-must-be-top-level-function_name",children:[]},{value:"CQL0192: func name conflicts with proc name &#39;name&#39;",id:"cql0192-func-name-conflicts-with-proc-name-name",children:[]},{value:"CQL0193: duplicate function name &#39;name&#39;",id:"cql0193-duplicate-function-name-name",children:[]},{value:"CQL0194: declared procedures must be top level &#39;name&#39;",id:"cql0194-declared-procedures-must-be-top-level-name",children:[]},{value:"CQL0195: proc name conflicts with func name &#39;name&#39;",id:"cql0195-proc-name-conflicts-with-func-name-name",children:[]},{value:"CQL0196: procedure declarations/definitions do not match &#39;name&#39;",id:"cql0196-procedure-declarationsdefinitions-do-not-match-name",children:[]},{value:"CQL0197: duplicate variable name in the same scope &#39;name&#39;",id:"cql0197-duplicate-variable-name-in-the-same-scope-name",children:[]},{value:"CQL0198: global variable hides table/view name &#39;name&#39;",id:"cql0198-global-variable-hides-tableview-name-name",children:[]},{value:"CQL0199: cursor requires a procedure that returns a result set via select &#39;proc_name&#39;",id:"cql0199-cursor-requires-a-procedure-that-returns-a-result-set-via-select-proc_name",children:[]},{value:"CQL0200: variable is not a cursor &#39;another_cursor&#39;",id:"cql0200-variable-is-not-a-cursor-another_cursor",children:[]},{value:"CQL0201: expanding FROM ARGUMENTS, there is no argument matching &#39;required_arg&#39;",id:"cql0201-expanding-from-arguments-there-is-no-argument-matching-required_arg",children:[]},{value:"CQL0202: must be a cursor, proc, table, or view &#39;like_name&#39;",id:"cql0202-must-be-a-cursor-proc-table-or-view-like_name",children:[]},{value:"CQL0203: cursor requires a procedure that returns a cursor with OUT &#39;cursor_name&#39;",id:"cql0203-cursor-requires-a-procedure-that-returns-a-cursor-with-out-cursor_name",children:[]},{value:"CQL0204: cursor not found &#39;name&#39;",id:"cql0204-cursor-not-found-name",children:[]},{value:"CQL0205: variable is not a cursor &#39;name&#39;",id:"cql0205-variable-is-not-a-cursor-name",children:[]},{value:"CQL0206: duplicate name in list &#39;name&#39;",id:"cql0206-duplicate-name-in-list-name",children:[]},{value:"CQL0207: proc out parameter: formal cannot be fulfilled by non-variable &#39;param_name&#39;",id:"cql0207-proc-out-parameter-formal-cannot-be-fulfilled-by-non-variable-param_name",children:[]},{value:"CQL0208 available for re-use",id:"cql0208-available-for-re-use",children:[]},{value:"CQL0209: proc out parameter: arg must be an exact type match (expected expected_type; found actual_type) &#39;param_name&#39;",id:"cql0209-proc-out-parameter-arg-must-be-an-exact-type-match-expected-expected_type-found-actual_type-param_name",children:[]},{value:"CQL0210: proc out parameter: arg must be an exact type match (even nullability)",id:"cql0210-proc-out-parameter-arg-must-be-an-exact-type-match-even-nullability",children:[]},{value:"CQL0211: last formal arg of procedure is not an out arg, cannot use proc as a function &#39;name&#39;",id:"cql0211-last-formal-arg-of-procedure-is-not-an-out-arg-cannot-use-proc-as-a-function-name",children:[]},{value:"CQL0212: too few arguments provided to procedure &#39;name&#39;",id:"cql0212-too-few-arguments-provided-to-procedure-name",children:[]},{value:"CQL0213: procedure had errors, can&#39;t call. &#39;proc_name&#39;",id:"cql0213-procedure-had-errors-cant-call-proc_name",children:[]},{value:"CQL0214: procedures with results can only be called using a cursor in global context &#39;name&#39;",id:"cql0214-procedures-with-results-can-only-be-called-using-a-cursor-in-global-context-name",children:[]},{value:"CQL0215: value cursors are not used with FETCH C, or FETCH C INTO &#39;cursor_name&#39;",id:"cql0215-value-cursors-are-not-used-with-fetch-c-or-fetch-c-into-cursor_name",children:[]},{value:"CQL0216: FETCH variable not found &#39;cursor_name&#39;",id:"cql0216-fetch-variable-not-found-cursor_name",children:[]},{value:"CQL0217: number of variables did not match count of columns in cursor &#39;cursor_name&#39;",id:"cql0217-number-of-variables-did-not-match-count-of-columns-in-cursor-cursor_name",children:[]},{value:"CQL0218: continue must be inside of a &#39;loop&#39; or &#39;while&#39; statement",id:"cql0218-continue-must-be-inside-of-a-loop-or-while-statement",children:[]},{value:"CQL0219: leave must be inside of a &#39;loop&#39;, &#39;while&#39;, or &#39;switch&#39; statement",id:"cql0219-leave-must-be-inside-of-a-loop-while-or-switch-statement",children:[]},{value:"CQL0220: savepoint has not been mentioned yet, probably wrong &#39;name&#39;",id:"cql0220-savepoint-has-not-been-mentioned-yet-probably-wrong-name",children:[]},{value:"CQL0221: savepoint has not been mentioned yet, probably wrong &#39;name&#39;",id:"cql0221-savepoint-has-not-been-mentioned-yet-probably-wrong-name",children:[]},{value:"CQL0222: the out cursor statement only makes sense inside of a procedure",id:"cql0222-the-out-cursor-statement-only-makes-sense-inside-of-a-procedure",children:[]},{value:"CQL0223: the cursor was not fetched with the auto-fetch syntax &#39;fetch cursor&#39; &#39;cursor_name&#39;",id:"cql0223-the-cursor-was-not-fetched-with-the-auto-fetch-syntax-fetch-cursor-cursor_name",children:[]},{value:"CQL0224 available for re-use",id:"cql0224-available-for-re-use",children:[]},{value:"CQL0225: switching to previous schema validation mode must be outside of any proc",id:"cql0225-switching-to-previous-schema-validation-mode-must-be-outside-of-any-proc",children:[]},{value:"CQL0226: schema upgrade declaration must be outside of any proc",id:"cql0226-schema-upgrade-declaration-must-be-outside-of-any-proc",children:[]},{value:"CQL0227: schema upgrade declaration must come before any tables are declared",id:"cql0227-schema-upgrade-declaration-must-come-before-any-tables-are-declared",children:[]},{value:"CQL0228: schema upgrade version must be a positive integer",id:"cql0228-schema-upgrade-version-must-be-a-positive-integer",children:[]},{value:"CQL0229: schema upgrade version declaration may only appear once",id:"cql0229-schema-upgrade-version-declaration-may-only-appear-once",children:[]},{value:"CQL0230: schema upgrade version declaration must be outside of any proc",id:"cql0230-schema-upgrade-version-declaration-must-be-outside-of-any-proc",children:[]},{value:"CQL0231: schema upgrade version declaration must come before any tables are declared",id:"cql0231-schema-upgrade-version-declaration-must-come-before-any-tables-are-declared",children:[]},{value:"CQL0232: nested select expression must return exactly one column",id:"cql0232-nested-select-expression-must-return-exactly-one-column",children:[]},{value:"CQL0233: procedure previously declared as schema upgrade proc, it can have no args &#39;proc_name&#39;",id:"cql0233-procedure-previously-declared-as-schema-upgrade-proc-it-can-have-no-args-proc_name",children:[]},{value:"CQL0234: autodrop annotation can only go on a procedure that returns a result set &#39;proc_name&#39;",id:"cql0234-autodrop-annotation-can-only-go-on-a-procedure-that-returns-a-result-set-proc_name",children:[]},{value:"CQL0235: too many arguments provided to procedure &#39;proc_name&#39;",id:"cql0235-too-many-arguments-provided-to-procedure-proc_name",children:[]},{value:"CQL0236: autodrop annotation can only go on a procedure that uses the database &#39;name&#39;",id:"cql0236-autodrop-annotation-can-only-go-on-a-procedure-that-uses-the-database-name",children:[]},{value:"CQL0237: strict FK validation requires that some ON UPDATE option be selected for every foreign key",id:"cql0237-strict-fk-validation-requires-that-some-on-update-option-be-selected-for-every-foreign-key",children:[]},{value:"CQL0238: strict FK validation requires that some ON DELETE option be selected for every foreign key",id:"cql0238-strict-fk-validation-requires-that-some-on-delete-option-be-selected-for-every-foreign-key",children:[]},{value:"CQL0239: &#39;annotation&#39; column does not exist in result set &#39;column_name&#39;",id:"cql0239-annotation-column-does-not-exist-in-result-set-column_name",children:[]},{value:"CQL0240: identity annotation can only go on a procedure that returns a result set &#39;proc_name&#39;",id:"cql0240-identity-annotation-can-only-go-on-a-procedure-that-returns-a-result-set-proc_name",children:[]},{value:"CQL0241: CONCAT may only appear in the context of SQL statement",id:"cql0241-concat-may-only-appear-in-the-context-of-sql-statement",children:[]},{value:"CQL0242: lossy conversion from type &#39;type&#39;",id:"cql0242-lossy-conversion-from-type-type",children:[]},{value:"CQL0243: blob operand must be converted to string first in &#39;||&#39;",id:"cql0243-blob-operand-must-be-converted-to-string-first-in-",children:[]},{value:"CQL0244: unknown schema region &#39;region&#39;",id:"cql0244-unknown-schema-region-region",children:[]},{value:"CQL0245: schema region already defined &#39;region&#39;",id:"cql0245-schema-region-already-defined-region",children:[]},{value:"CQL0246: schema regions do not nest; end the current region before starting a new one",id:"cql0246-schema-regions-do-not-nest-end-the-current-region-before-starting-a-new-one",children:[]},{value:"CQL0247: you must begin a schema region before you can end one",id:"cql0247-you-must-begin-a-schema-region-before-you-can-end-one",children:[]},{value:"CQL0248: schema region directives may not appear inside of a procedure",id:"cql0248-schema-region-directives-may-not-appear-inside-of-a-procedure",children:[]},{value:"CQL0249: function is not a table-valued-function &#39;function_name&#39;",id:"cql0249-function-is-not-a-table-valued-function-function_name",children:[]},{value:"CQL0250: table-valued function not declared &#39;function_name&#39;",id:"cql0250-table-valued-function-not-declared-function_name",children:[]},{value:"CQL0251: fragment must end with exactly &#39;SELECT * FROM CTE&#39;",id:"cql0251-fragment-must-end-with-exactly-select--from-cte",children:[]},{value:"CQL0252: @PROC literal can only appear inside of procedures",id:"cql0252-proc-literal-can-only-appear-inside-of-procedures",children:[]},{value:"CQL0253: base fragment must have only a single CTE named the same as the fragment &#39;name&#39;",id:"cql0253-base-fragment-must-have-only-a-single-cte-named-the-same-as-the-fragment-name",children:[]},{value:"CQL0254: switching to previous schema validation mode not allowed if <code>@schema_upgrade_version</code> was used",id:"cql0254-switching-to-previous-schema-validation-mode-not-allowed-if-schema_upgrade_version-was-used",children:[]},{value:"CQL0255: fragment name is not a previously declared base fragment &#39;bad_fragment_name&#39;",id:"cql0255-fragment-name-is-not-a-previously-declared-base-fragment-bad_fragment_name",children:[]},{value:"CQL0256: fragment name conflicts with existing base fragment &#39;NAME&#39;",id:"cql0256-fragment-name-conflicts-with-existing-base-fragment-name",children:[]},{value:"CQL0257: argument must be a string or numeric in &#39;function&#39;",id:"cql0257-argument-must-be-a-string-or-numeric-in-function",children:[]},{value:"CQL0258: extension fragment must add exactly one CTE; found extra named &#39;name&#39;",id:"cql0258-extension-fragment-must-add-exactly-one-cte-found-extra-named-name",children:[]},{value:"CQL0259: extension fragment CTE must select T.* from base CTE",id:"cql0259-extension-fragment-cte-must-select-t-from-base-cte",children:[]},{value:"CQL0260: extension fragment CTE must be a simple left outer join from &#39;table_name&#39;",id:"cql0260-extension-fragment-cte-must-be-a-simple-left-outer-join-from-table_name",children:[]},{value:"CQL0261: the cursor did not originate from a SQLite statement, it only has values &#39;cursor_name&#39;",id:"cql0261-the-cursor-did-not-originate-from-a-sqlite-statement-it-only-has-values-cursor_name",children:[]},{value:"CQL0262: LIKE ... ARGUMENTS used on a procedure with no arguments &#39;procedure_name&#39;",id:"cql0262-like--arguments-used-on-a-procedure-with-no-arguments-procedure_name",children:[]},{value:"CQL0263: non-ANSI joins are forbidden if strict join mode is enabled.",id:"cql0263-non-ansi-joins-are-forbidden-if-strict-join-mode-is-enabled",children:[]},{value:"CQL0264: duplicate assembly fragments of base fragment",id:"cql0264-duplicate-assembly-fragments-of-base-fragment",children:[]},{value:"CQL0265: assembly fragment can only have one CTE",id:"cql0265-assembly-fragment-can-only-have-one-cte",children:[]},{value:"CQL0266: extension fragment name conflicts with existing fragment",id:"cql0266-extension-fragment-name-conflicts-with-existing-fragment",children:[]},{value:"CQL0267: extension fragments of same base fragment share the same cte column",id:"cql0267-extension-fragments-of-same-base-fragment-share-the-same-cte-column",children:[]},{value:"CQL0268: extension/assembly fragment must have the CTE columns same as the base fragment",id:"cql0268-extensionassembly-fragment-must-have-the-cte-columns-same-as-the-base-fragment",children:[]},{value:"CQL0269: at least part of this unique key is redundant with previous unique keys",id:"cql0269-at-least-part-of-this-unique-key-is-redundant-with-previous-unique-keys",children:[]},{value:"CQL0270: use FETCH FROM for procedures that returns a cursor with OUT &#39;cursor&#39;",id:"cql0270-use-fetch-from-for-procedures-that-returns-a-cursor-with-out-cursor",children:[]},{value:"CQL0271: the OFFSET clause may only be used if LIMIT is also present",id:"cql0271-the-offset-clause-may-only-be-used-if-limit-is-also-present",children:[]},{value:"CQL0272: THE SET OF COLUMNS REFERENCED IN THE FOREIGN KEY STATEMENT SHOULD MATCH EXACTLY A UNIQUE KEY IN PARENT TABLE",id:"cql0272-the-set-of-columns-referenced-in-the-foreign-key-statement-should-match-exactly-a-unique-key-in-parent-table",children:[]},{value:"CQL0273: autotest attribute has incorrect format (...) in &#39;dummy_test&#39;",id:"cql0273-autotest-attribute-has-incorrect-format--in-dummy_test",children:[]},{value:"CQL0274: autotest attribute &#39;dummy_test&#39; has non existent table",id:"cql0274-autotest-attribute-dummy_test-has-non-existent-table",children:[]},{value:"CQL0275: autotest attribute &#39;dummy_test&#39; has non existent column",id:"cql0275-autotest-attribute-dummy_test-has-non-existent-column",children:[]},{value:"CQL0276: autotest attribute &#39;dummy_test&#39; has invalid value type in",id:"cql0276-autotest-attribute-dummy_test-has-invalid-value-type-in",children:[]},{value:"CQL0277: autotest has incorrect format",id:"cql0277-autotest-has-incorrect-format",children:[]},{value:"CQL0278: autotest attribute name is not valid",id:"cql0278-autotest-attribute-name-is-not-valid",children:[]},{value:"CQL0279: the set of columns referenced in the conflict target should match exactly a unique key in table we apply upsert",id:"cql0279-the-set-of-columns-referenced-in-the-conflict-target-should-match-exactly-a-unique-key-in-table-we-apply-upsert",children:[]},{value:"CQL0280: upsert statement requires a where clause if the insert clause uses select",id:"cql0280-upsert-statement-requires-a-where-clause-if-the-insert-clause-uses-select",children:[]},{value:"CQL0281: upsert statement does not include table name in the update statement",id:"cql0281-upsert-statement-does-not-include-table-name-in-the-update-statement",children:[]},{value:"CQL0282: update statement require table name",id:"cql0282-update-statement-require-table-name",children:[]},{value:"CQL0283: upsert syntax only support INSERT INTO",id:"cql0283-upsert-syntax-only-support-insert-into",children:[]},{value:"CQL0284: ad hoc schema migration directive must provide a procedure to run",id:"cql0284-ad-hoc-schema-migration-directive-must-provide-a-procedure-to-run",children:[]},{value:"CQL0285: ad hoc schema migration directive version number changed &#39;proc_name&#39;",id:"cql0285-ad-hoc-schema-migration-directive-version-number-changed-proc_name",children:[]},{value:"CQL0286: ad hoc schema migration directive was removed; this is not allowed &#39;proc_name&#39;",id:"cql0286-ad-hoc-schema-migration-directive-was-removed-this-is-not-allowed-proc_name",children:[]},{value:"CQL0287: extension/assembly fragment must add stub &quot;",id:"cql0287-extensionassembly-fragment-must-add-stub-",children:[]},{value:"CQL0288: extension/assembly fragment stub for base CTE column must be &quot;",id:"cql0288-extensionassembly-fragment-stub-for-base-cte-column-must-be-",children:[]},{value:"CQL0289: upsert statement are forbidden if strict upsert statement mode is enabled",id:"cql0289-upsert-statement-are-forbidden-if-strict-upsert-statement-mode-is-enabled",children:[]},{value:"CQL0290: fragments can only have one statement in the statement list and it must be a WITH..SELECT",id:"cql0290-fragments-can-only-have-one-statement-in-the-statement-list-and-it-must-be-a-withselect",children:[]},{value:"CQL0291: region links into the middle of a deployable region; you must point to the root of <code>&lt;deployable_region&gt;</code> not into the middle: <code>&lt;error_region&gt;</code>",id:"cql0291-region-links-into-the-middle-of-a-deployable-region-you-must-point-to-the-root-of-deployable_region-not-into-the-middle-error_region",children:[]},{value:"CQL0292: Explain statement is only available in dev mode because its result set may vary between sqlite versions",id:"cql0292-explain-statement-is-only-available-in-dev-mode-because-its-result-set-may-vary-between-sqlite-versions",children:[]},{value:"CQL0293: Only EXPLAIN QUERY PLAN ... statement is supported",id:"cql0293-only-explain-query-plan--statement-is-supported",children:[]},{value:"CQL0294: Window function invocations can only appear in the select list of a select statement",id:"cql0294-window-function-invocations-can-only-appear-in-the-select-list-of-a-select-statement",children:[]},{value:"CQL0295: Window name is not defined",id:"cql0295-window-name-is-not-defined",children:[]},{value:"CQL0296: Window name definition is not used",id:"cql0296-window-name-definition-is-not-used",children:[]},{value:"CQL0297: FROM shape is redundant if column list is empty",id:"cql0297-from-shape-is-redundant-if-column-list-is-empty",children:[]},{value:"CQL0298: cannot read from a cursor without fields &#39;cursor_name&#39;",id:"cql0298-cannot-read-from-a-cursor-without-fields-cursor_name",children:[]},{value:"CQL0299: cursor has too few fields, &#39;shape_name&#39;",id:"cql0299-cursor-has-too-few-fields-shape_name",children:[]},{value:"CQL0300: Argument must be an integer (between 1 and max integer) in function &#39;function_name&#39;",id:"cql0300-argument-must-be-an-integer-between-1-and-max-integer-in-function-function_name",children:[]},{value:"CQL0301: The second argument must be an integer (between 0 and max integer) in function &#39;function_name&#39;",id:"cql0301-the-second-argument-must-be-an-integer-between-0-and-max-integer-in-function-function_name",children:[]},{value:"CQL0302: The first and third arguments must be compatible in function &#39;function_name&#39;",id:"cql0302-the-first-and-third-arguments-must-be-compatible-in-function-function_name",children:[]},{value:"CQL0303: The second argument must be an integer between 1 and max integer in function &#39;function_name&#39;",id:"cql0303-the-second-argument-must-be-an-integer-between-1-and-max-integer-in-function-function_name",children:[]},{value:"CQL0304: DISTINCT may only be used with one explicit argument in an aggregate function",id:"cql0304-distinct-may-only-be-used-with-one-explicit-argument-in-an-aggregate-function",children:[]},{value:"CQL0305: DISTINCT may only be used in function that are aggregated or user defined",id:"cql0305-distinct-may-only-be-used-in-function-that-are-aggregated-or-user-defined",children:[]},{value:"CQL0306: FILTER clause may only be used in function that are aggregated or user defined",id:"cql0306-filter-clause-may-only-be-used-in-function-that-are-aggregated-or-user-defined",children:[]},{value:"CQL0307: return statement should be in a procedure and not at the top level",id:"cql0307-return-statement-should-be-in-a-procedure-and-not-at-the-top-level",children:[]},{value:"CQL0308: statement should be the last thing in a statement list",id:"cql0308-statement-should-be-the-last-thing-in-a-statement-list",children:[]},{value:"CQL0309: new table must be added with @create(number) or later &#39;table_name&#39;",id:"cql0309-new-table-must-be-added-with-createnumber-or-later-table_name",children:[]},{value:"CQL0310: new column must be added with @create(number) or later&quot; &#39;column_name&#39;",id:"cql0310-new-column-must-be-added-with-createnumber-or-later-column_name",children:[]},{value:"CQL0311: CQL0311: object&#39;s deployment region changed from &#39;&lt;previous_region&gt;&#39; to &#39;&lt;current_region&gt;&#39; &#39;object_name&#39;",id:"cql0311-cql0311-objects-deployment-region-changed-from-previous_region-to-current_region-object_name",children:[]},{value:"CQL0312: window function invocation are forbidden if strict window function mode is enabled",id:"cql0312-window-function-invocation-are-forbidden-if-strict-window-function-mode-is-enabled",children:[]},{value:"CQL0313: blob literals may only appear in the context of a SQL statement",id:"cql0313-blob-literals-may-only-appear-in-the-context-of-a-sql-statement",children:[]},{value:"CQL0314: select function does not require a declaration, it is a CQL built-in",id:"cql0314-select-function-does-not-require-a-declaration-it-is-a-cql-built-in",children:[]},{value:"CQL0315: mandatory column with no default value in INSERT INTO name DEFAULT VALUES statement.",id:"cql0315-mandatory-column-with-no-default-value-in-insert-into-name-default-values-statement",children:[]},{value:"CQL0316: the upsert-clause is not compatible with DEFAULT VALUES",id:"cql0316-the-upsert-clause-is-not-compatible-with-default-values",children:[]},{value:"CQL0317: char function arguments must be integer",id:"cql0317-char-function-arguments-must-be-integer",children:[]},{value:"CQL0318: more than one fragment annotation on procedure &#39;procedure_name&#39;",id:"cql0318-more-than-one-fragment-annotation-on-procedure-procedure_name",children:[]},{value:"CQL0319: the name of the assembly procedure must match the name of the base fragment &#39;procedure_name&#39;",id:"cql0319-the-name-of-the-assembly-procedure-must-match-the-name-of-the-base-fragment-procedure_name",children:[]},{value:"CQL0320: extension fragment CTE must have a FROM clause and no other top level clauses &#39;frag_name&#39;",id:"cql0320-extension-fragment-cte-must-have-a-from-clause-and-no-other-top-level-clauses-frag_name",children:[]},{value:"CQL0321: migration proc not allowed on object &#39;object_name&#39;",id:"cql0321-migration-proc-not-allowed-on-object-object_name",children:[]},{value:"CQL0322: fragment parameters must be exactly &#39;arguments&#39; &#39;procedure_name&#39;",id:"cql0322-fragment-parameters-must-be-exactly-arguments-procedure_name",children:[]},{value:"CQL0323: calls to undeclared procedures are forbidden if strict procedure mode is enabled; declaration missing or typo &#39;procedure_name&#39;",id:"cql0323-calls-to-undeclared-procedures-are-forbidden-if-strict-procedure-mode-is-enabled-declaration-missing-or-typo-procedure_name",children:[]},{value:"CQL0324: referenced table was created in a later version so it cannot be used in a foreign key &#39;referenced_table&#39;",id:"cql0324-referenced-table-was-created-in-a-later-version-so-it-cannot-be-used-in-a-foreign-key-referenced_table",children:[]},{value:"CQL0325: ok_table_scan attribute must be a name",id:"cql0325-ok_table_scan-attribute-must-be-a-name",children:[]},{value:"CQL0326: the table name in ok_table_scan does not exist &#39;table_name&#39;",id:"cql0326-the-table-name-in-ok_table_scan-does-not-exist-table_name",children:[]},{value:"CQL0327: a value should not be assigned to &#39;attribute_name&#39; attribute",id:"cql0327-a-value-should-not-be-assigned-to-attribute_name-attribute",children:[]},{value:"CQL0328: &#39;attribute_name&#39; attribute may only be added to a &#39;statement_name&#39;",id:"cql0328-attribute_name-attribute-may-only-be-added-to-a-statement_name",children:[]},{value:"CQL0329: ok_table_scan attribute can only be used in a create procedure statement",id:"cql0329-ok_table_scan-attribute-can-only-be-used-in-a-create-procedure-statement",children:[]},{value:"CQL0330: fragment must start with exactly &#39;SELECT * FROM CTE&#39;",id:"cql0330-fragment-must-start-with-exactly-select--from-cte",children:[]},{value:"CQL0331: extension fragment CTE must have not have ORDER BY or LIMIT clauses &#39;frag_name&#39;",id:"cql0331-extension-fragment-cte-must-have-not-have-order-by-or-limit-clauses-frag_name",children:[]},{value:"CQL0332: all extension fragments that use UNION ALL must come before those that use LEFT OUTER JOIN &#39;frag_name&#39;",id:"cql0332-all-extension-fragments-that-use-union-all-must-come-before-those-that-use-left-outer-join-frag_name",children:[]},{value:"CQL0333: all the compound operators in this CTE must be UNION ALL",id:"cql0333-all-the-compound-operators-in-this-cte-must-be-union-all",children:[]},{value:"CQL0334: @dummy_seed @dummy_nullables @dummy_defaults many only be used with a single VALUES row",id:"cql0334-dummy_seed-dummy_nullables-dummy_defaults-many-only-be-used-with-a-single-values-row",children:[]},{value:"CQL0336: select statement with VALUES clause requires a non empty list of values",id:"cql0336-select-statement-with-values-clause-requires-a-non-empty-list-of-values",children:[]},{value:"CQL0337: the number of columns values for each row should be identical in VALUES clause",id:"cql0337-the-number-of-columns-values-for-each-row-should-be-identical-in-values-clause",children:[]},{value:"CQL0338: the name of a migration procedure may not end in &#39;_crc&#39; &#39;procedure_name&#39;",id:"cql0338-the-name-of-a-migration-procedure-may-not-end-in-_crc-procedure_name",children:[]},{value:"CQL0339: WITHOUT ROWID tables are forbidden if strict without rowid mode is enabled",id:"cql0339-without-rowid-tables-are-forbidden-if-strict-without-rowid-mode-is-enabled",children:[]},{value:"CQL0340: FROM ARGUMENTS used in a procedure with no arguments &#39;procedure_name&#39;",id:"cql0340-from-arguments-used-in-a-procedure-with-no-arguments-procedure_name",children:[]},{value:"CQL0341: argument must be a variable in function &#39;function_name&#39;",id:"cql0341-argument-must-be-a-variable-in-function-function_name",children:[]},{value:"CQL0342: the cursor arguments must have identical column count &#39;function_name&#39;",id:"cql0342-the-cursor-arguments-must-have-identical-column-count-function_name",children:[]},{value:"CQL0343: all arguments must be blob &#39;cql_get_blob_size&#39;",id:"cql0343-all-arguments-must-be-blob-cql_get_blob_size",children:[]},{value:"CQL0344: argument must be a nullable type (but not constant NULL) in &#39;function&#39;",id:"cql0344-argument-must-be-a-nullable-type-but-not-constant-null-in-function",children:[]},{value:"CQL0345: the arguments must be of type blob &#39;function_name&#39;",id:"cql0345-the-arguments-must-be-of-type-blob-function_name",children:[]},{value:"CQL0346: the variable must be of type <code>object&lt;T cursor&gt;</code> where T is a valid shape name &#39;variable&#39;",id:"cql0346-the-variable-must-be-of-type-objectt-cursor-where-t-is-a-valid-shape-name-variable",children:[]},{value:"CQL0347: select function may not return type OBJECT &#39;function_name&#39;",id:"cql0347-select-function-may-not-return-type-object-function_name",children:[]},{value:"CQL0348: collate applied to a non-text column &#39;column_name&#39;",id:"cql0348-collate-applied-to-a-non-text-column-column_name",children:[]},{value:"CQL0349: column definitions may not come after constraints &#39;column_name&#39;",id:"cql0349-column-definitions-may-not-come-after-constraints-column_name",children:[]},{value:"CQL0350: statement must appear inside of a PROC SAVEPOINT block",id:"cql0350-statement-must-appear-inside-of-a-proc-savepoint-block",children:[]},{value:"CQL0351: statement should be in a procedure and at the top level",id:"cql0351-statement-should-be-in-a-procedure-and-at-the-top-level",children:[]},{value:"CQL0352: use COMMIT RETURN or ROLLBACK RETURN in within a proc savepoint block",id:"cql0352-use-commit-return-or-rollback-return-in-within-a-proc-savepoint-block",children:[]},{value:"CQL0353: evaluation of constant failed",id:"cql0353-evaluation-of-constant-failed",children:[]},{value:"CQL0354: duplicate enum member &#39;enum_name&#39;",id:"cql0354-duplicate-enum-member-enum_name",children:[]},{value:"CQL0355: evaluation failed &#39;enum_name&#39;",id:"cql0355-evaluation-failed-enum_name",children:[]},{value:"CQL0356: enum definitions do not match &#39;name&#39;",id:"cql0356-enum-definitions-do-not-match-name",children:[]},{value:"CQL0357: enum does not contain &#39;enum_name&#39;",id:"cql0357-enum-does-not-contain-enum_name",children:[]},{value:"CQL0358: declared enums must be top level &#39;enum&#39;",id:"cql0358-declared-enums-must-be-top-level-enum",children:[]},{value:"CQL0359: duplicate type declaration &#39;type_name&#39;",id:"cql0359-duplicate-type-declaration-type_name",children:[]},{value:"CQL0360: unknown type &#39;type_name&#39;",id:"cql0360-unknown-type-type_name",children:[]},{value:"CQL0361: Return data type in a create function declaration can only be Text, Blob or Object",id:"cql0361-return-data-type-in-a-create-function-declaration-can-only-be-text-blob-or-object",children:[]},{value:"CQL0362: The HIDDEN column attribute must be the first attribute if present",id:"cql0362-the-hidden-column-attribute-must-be-the-first-attribute-if-present",children:[]},{value:"CQL0363: all arguments must be names &#39;vault_sensitive&#39;",id:"cql0363-all-arguments-must-be-names-vault_sensitive",children:[]},{value:"CQL0364: vault_sensitive annotation can only go on a procedure that uses the database",id:"cql0364-vault_sensitive-annotation-can-only-go-on-a-procedure-that-uses-the-database",children:[]},{value:"CQL0365: @enforce_pop used but there is nothing to pop",id:"cql0365-enforce_pop-used-but-there-is-nothing-to-pop",children:[]},{value:"CQL0366: transaction operations disallowed while STRICT TRANSACTION enforcement is on",id:"cql0366-transaction-operations-disallowed-while-strict-transaction-enforcement-is-on",children:[]},{value:"CQL0367: an attribute was specified twice &#39;attribute_name&#39;",id:"cql0367-an-attribute-was-specified-twice-attribute_name",children:[]},{value:"CQL0368: strict select if nothing requires that all (select ...) expressions include &#39;if nothing&#39;",id:"cql0368-strict-select-if-nothing-requires-that-all-select--expressions-include-if-nothing",children:[]},{value:"CQL0369: The (select ... if nothing) construct is for use in top level expressions, not inside of other DML",id:"cql0369-the-select--if-nothing-construct-is-for-use-in-top-level-expressions-not-inside-of-other-dml",children:[]},{value:"CQL0370: due to a memory leak bug in old SQLite versions, the select part of an insert must not have a top level join or compound operator. Use WITH and a CTE, or a nested select to work around this.",id:"cql0370-due-to-a-memory-leak-bug-in-old-sqlite-versions-the-select-part-of-an-insert-must-not-have-a-top-level-join-or-compound-operator-use-with-and-a-cte-or-a-nested-select-to-work-around-this",children:[]},{value:"CQL0371: table valued function used in a left/right/cross context; this would hit a SQLite bug.  Wrap it in a CTE instead.",id:"cql0371-table-valued-function-used-in-a-leftrightcross-context-this-would-hit-a-sqlite-bug--wrap-it-in-a-cte-instead",children:[]},{value:"CQL0372: SELECT ... IF NOTHING OR NULL NULL is redundant; use SELECT ... IF NOTHING NULL instead.",id:"cql0372-select--if-nothing-or-null-null-is-redundant-use-select--if-nothing-null-instead",children:[]},{value:"CQL0373: Comparing against NULL always yields NULL; use IS and IS NOT instead.",id:"cql0373-comparing-against-null-always-yields-null-use-is-and-is-not-instead",children:[]},{value:"CQL0374: SELECT expression is equivalent to NULL.",id:"cql0374-select-expression-is-equivalent-to-null",children:[]},{value:"CQL 0375 : unused, this was added to prevent merge conflicts at the end on literally every checkin",id:"cql-0375--unused-this-was-added-to-prevent-merge-conflicts-at-the-end-on-literally-every-checkin",children:[]},{value:"CQL 0376 : unused, this was added to prevent merge conflicts at the end on literally every checkin",id:"cql-0376--unused-this-was-added-to-prevent-merge-conflicts-at-the-end-on-literally-every-checkin",children:[{value:"CQL0377: table transitioning from <code>@recreate</code> to <code>@create</code> must use <code>@create(nn,cql:from_recreate)</code> &#39;table name&#39;",id:"cql0377-table-transitioning-from-recreate-to-create-must-use-createnncqlfrom_recreate-table-name",children:[]},{value:"CQL0378: built-in migration procedure not valid in this context &#39;name&#39;",id:"cql0378-built-in-migration-procedure-not-valid-in-this-context-name",children:[]},{value:"CQL0379: unknown built-in migration procedure &#39;name&#39;",id:"cql0379-unknown-built-in-migration-procedure-name",children:[]},{value:"CQL0380: the WHEN expression cannot be evaluated to a constant",id:"cql0380-the-when-expression-cannot-be-evaluated-to-a-constant",children:[]},{value:"CQL0381: case expression must be a not-null integral type",id:"cql0381-case-expression-must-be-a-not-null-integral-type",children:[]},{value:"CQL0382: the type of a WHEN expression is bigger than the type of the SWITCH expression",id:"cql0382-the-type-of-a-when-expression-is-bigger-than-the-type-of-the-switch-expression",children:[]},{value:"CQL0383: switch ... ALL VALUES is useless with an ELSE clause",id:"cql0383-switch--all-values-is-useless-with-an-else-clause",children:[]},{value:"CQL0384: switch statement did not have any actual statements in it",id:"cql0384-switch-statement-did-not-have-any-actual-statements-in-it",children:[]},{value:"CQL0385: WHEN clauses contain duplicate values &#39;value&#39;",id:"cql0385-when-clauses-contain-duplicate-values-value",children:[]},{value:"CQL0386: SWITCH ... ALL VALUES is used but the switch expression is not an enum type",id:"cql0386-switch--all-values-is-used-but-the-switch-expression-is-not-an-enum-type",children:[]},{value:"CQL0387: a value exists in the enum that is not present in the switch &#39;enum_member&#39;",id:"cql0387-a-value-exists-in-the-enum-that-is-not-present-in-the-switch-enum_member",children:[]},{value:"CQL0388: a value exists in the switch that is not present in the enum &#39;numeric_value&#39;",id:"cql0388-a-value-exists-in-the-switch-that-is-not-present-in-the-enum-numeric_value",children:[]},{value:"CQL0389: DECLARE OUT requires that the procedure be already declared",id:"cql0389-declare-out-requires-that-the-procedure-be-already-declared",children:[]},{value:"CQL0390: DECLARE OUT CALL used on a procedure with no missing OUT arguments",id:"cql0390-declare-out-call-used-on-a-procedure-with-no-missing-out-arguments",children:[]},{value:"CQL0391: CLOSE cannot be used on a boxed cursor",id:"cql0391-close-cannot-be-used-on-a-boxed-cursor",children:[]},{value:"CQL0392: when deleting a virtual table you must specify @delete(nn, cql:module_must_not_be_deleted_see_docs_for_CQL0392) as a reminder not to delete the module for this virtual table",id:"cql0392-when-deleting-a-virtual-table-you-must-specify-deletenn-cqlmodule_must_not_be_deleted_see_docs_for_cql0392-as-a-reminder-not-to-delete-the-module-for-this-virtual-table",children:[]},{value:"CQL0393: User function cannot appear in a constraint expression &#39;function_name&#39;",id:"cql0393-user-function-cannot-appear-in-a-constraint-expression-function_name",children:[]},{value:"CQL0394: Nested select expressions may not appear inside of a constraint expression",id:"cql0394-nested-select-expressions-may-not-appear-inside-of-a-constraint-expression",children:[]},{value:"CQL0395: table valued functions may not be used in an expression context &#39;function_name&#39;",id:"cql0395-table-valued-functions-may-not-be-used-in-an-expression-context-function_name",children:[]},{value:"CQL0396: versioning attributes may not be used on DDL inside a procedure",id:"cql0396-versioning-attributes-may-not-be-used-on-ddl-inside-a-procedure",children:[]},{value:"CQL0397: object is an orphan because its table is deleted. Remove rather than @delete &#39;object_name&#39;",id:"cql0397-object-is-an-orphan-because-its-table-is-deleted-remove-rather-than-delete-object_name",children:[]},{value:"CQL0398: A compound select cannot be ordered by the result of an expression",id:"cql0398-a-compound-select-cannot-be-ordered-by-the-result-of-an-expression",children:[]},{value:"CQL0399: table must leave @recreate management with @create(nn) or later &#39;table_name&#39;",id:"cql0399-table-must-leave-recreate-management-with-createnn-or-later-table_name",children:[]}]}],u={rightToc:s};function b(e){var t=e.components,n=Object(o.a)(e,l);return Object(i.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"cql0001-operands-must-be-an-integer-type-not-real"},"CQL0001: operands must be an integer type, not real"),Object(i.b)("p",null,"integer math operators like << >> & and | are not compatible with real-valued arguments"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0002-left-operand-cannot-be-an-object-in-operator"},"CQL0002: left operand cannot be an object in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on objects.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0003-left-operand-cannot-be-an-object-in-operator"},"CQL0003: left operand cannot be an object in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on objects.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0004-left-operand-cannot-be-a-blob-in-operator"},"CQL0004: left operand cannot be a blob in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on blobs.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0005-right-operand-cannot-be-a-blob-in-operator"},"CQL0005: right operand cannot be a blob in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on blobs.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0007-left-operand-cannot-be-a-string-in-operator"},"CQL0007: left operand cannot be a string in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on strings.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0008-right-operand-cannot-be-a-string-in-operator"},"CQL0008: right operand cannot be a string in 'operator'"),Object(i.b)("p",null,"Most arithmetic operators (e.g. +, -, *) do not work on strings.  Basically comparison is all you can do."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0009-incompatible-types-in-expression-subject"},"CQL0009: incompatible types in expression 'subject'"),Object(i.b)("p",null,"The expression type indicated by subject required a TEXT as the next item and found something else.\nThis could be a binary operator, part of a CASE expression, the parts of an IN expression or any other\nplace where several expressions might need to be compatible with each other."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0010-incompatible-types-in-expression-subject"},"CQL0010: incompatible types in expression 'subject'"),Object(i.b)("p",null,"The expression type indicated by subject required an OBJECT as the next item and found something else.\nThis could be a binary operator, part of a CASE expression, the parts of an IN expression or any other\nplace where several expressions might need to be compatible with each other."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0011-incompatible-types-in-expression-subject"},"CQL0011: incompatible types in expression 'subject'"),Object(i.b)("p",null,"The expression type indicated by subject required a BLOB as the next item and found something else.\nThis could be a binary operator, part of a CASE expression, the parts of an IN expression or any other\nplace where several expressions might need to be compatible with each other."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0012-incompatible-types-in-expression-subject"},"CQL0012: incompatible types in expression 'subject'"),Object(i.b)("p",null,"The expression type indicated by subject required a numeric as the next item and found something else.\nThis could be a binary operator, part of a CASE expression, the parts of an IN expression or any other\nplace where several expressions might need to be compatible with each other."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0013-cannot-assigncopy-possibly-null-expression-to-not-null-target-target"},"CQL0013: cannot assign/copy possibly null expression to not null target 'target'"),Object(i.b)("p",null,"Here assign/copy can be the simplest case of assigning to a local variable or an OUT parameter but this error also appears when calling functions.  You should think of the IN arguments as requiring that the actual argument be assignable to the formal variable and OUT arguments requiring that the formal be assignable to the actual argument variable."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0014-cannot-assigncopy-sensitive-expression-to-not-null-target-target"},"CQL0014: cannot assign/copy sensitive expression to not null target 'target'"),Object(i.b)("p",null,"Here assign/copy can be the simplest case of assigning to a local variable or an OUT parameter but this error also appears when calling functions.  You should think of the IN arguments as requiring that the actual argument be assignable to the formal variable and OUT arguments requiring that the formal be assignable to the actual argument variable."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0015-expected-numeric-expression-context"},"CQL0015: expected numeric expression 'context'"),Object(i.b)("p",null,"Many SQL clauses require a numeric expression such as WHERE/HAVING/LIMIT/OFFSET.  This expression indicates the expression in the given context is not a numeric."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0016-duplicate-table-name-in-join-table"},"CQL0016: duplicate table name in join 'table'"),Object(i.b)("p",null,"When this error is produced it means the result of the join would have the same table twice with no disambiguation between the two places.  The conflicting name is provided.  To fix this, make an alias both tables.\ne.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT T1.id AS parent_id, T2.id AS child_id\n  FROM foo AS T1\n  INNER JOIN foo AS T2 ON T1.id = T2.parent_id;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0017-index-was-present-but-now-it-does-not-exist-use-delete-instead-index"},"CQL0017: index was present but now it does not exist (use ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," instead) 'index'"),Object(i.b)("p",null,"The named index is in the previous schema bit it is not in the current schema.  All entities need some kind of tombstone in the  schema so that they can be correctly deleted if they are still present."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0018-duplicate-index-name-index"},"CQL0018: duplicate index name 'index'"),Object(i.b)("p",null,"An index with the indicated name already exists."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0019-create-index-table-name-not-found-table_name"},"CQL0019: create index table name not found 'table_name'"),Object(i.b)("p",null,"The table part of a CREATE INDEX statement was not a valid table name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0020-duplicate-constraint-name-in-table-constraint_name"},"CQL0020: duplicate constraint name in table 'constraint_name'"),Object(i.b)("p",null,"A table contains two contraints with the same name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0021-foreign-key-refers-to-non-existent-table-table_name"},"CQL0021: foreign key refers to non-existent table 'table_name'"),Object(i.b)("p",null,"The table in a foreign key REFERENCES clause is not a valid table."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0022-the-exact-type-of-both-sides-of-a-foreign-key-must-match-expected-expected_type-found-actual_type-key_name"},"CQL0022: the exact type of both sides of a foreign key must match (expected expected_type; found actual_type) 'key_name'"),Object(i.b)("p",null,"The indicated foreign key has at least one column with a different type than corresponding column in the table it references.\nThis usually means that you have picked the wrong table or column in the foreign key declaration."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0023-the-number-of-columns-on-both-sides-of-a-foreign-key-must-match"},"CQL0023: The number of columns on both sides of a foreign key must match"),Object(i.b)("p",null,"The number of column in the foreign key must be the same as the number of columns specified in the foreign table.\nThis usually means a column is missing in the REFERENCES part of the declaration."),Object(i.b)("hr",null),Object(i.b)("p",null,"CQL0024: no longer in use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0025-version-number-in-annotation-must-be-positive"},"CQL0025: version number in annotation must be positive"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," annotation, the version number must be > 0.\nThis error usually means there is a typo in the version number."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0026-duplicate-version-annotation"},"CQL0026: duplicate version annotation"),Object(i.b)("p",null,"There can only be one ",Object(i.b)("inlineCode",{parentName:"p"},"@create"),", ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," annotation for any given table/column.  More than one ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," is redundant.\nThis error usually means the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," was cut/paste to make an ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and then not edited or something like that."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0027-a-procedure-can-appear-in-only-one-annotation-procedure_name"},"CQL0027: a procedure can appear in only one annotation 'procedure_name'"),Object(i.b)("p",null,"The indicated migration procedure e.g. the foo in ",Object(i.b)("inlineCode",{parentName:"p"},"@create(5, foo)")," appears in another annotation.  Migration steps should happen exactly once.\nThis probably means the annotation was cut/paste and the migration proc was not removed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0028-the-fk-reference-must-be-exactly-one-column-with-the-correct-type-column_name"},"CQL0028: the FK reference must be exactly one column with the correct type 'column_name'"),Object(i.b)("p",null,"When a foreign key is specified in the column definition it is the entire foreign key.  That means the references part of the declaration can only be for that one column.\nIf you need more columns, you have to declare the foreign key independently."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0029-autoincrement-column-must-be-long_integer-primary-key-column-name"},"CQL0029: autoincrement column must be ","[LONG_]","INTEGER PRIMARY KEY 'column name'"),Object(i.b)("p",null,"SQLite is very fussy about autoincrement columns.  The column in question must be either a LONG INTEGER or an INTEGER and it must be PRIMARY KEY.\nIn fact, CQL will rewrite LONG INTEGER into INTEGER because only that exact form is supported, but SQLite INTEGERs can hold LONG values so that's ok.\nAny other autoincrement form results in this error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0030-a-column-attribute-was-specified-twice-on-the-same-column-column_name"},"CQL0030: a column attribute was specified twice on the same column 'column_name'"),Object(i.b)("p",null,'This error indicates a pattern like "id text not null not null" was found.\nThe same attribute shouldn\'t appear twice.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0031-column-cant-be-primary-key-and-also-unique-key-column"},"CQL0031: column can't be primary key and also unique key 'column'"),Object(i.b)("p",null,"In a column definition, the column can only be marked with at most one of PRIMARY KEY or UNIQUE"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0032-created-columns-must-be-at-the-end-and-must-be-in-version-order-column"},"CQL0032: created columns must be at the end and must be in version order\", 'column'"),Object(i.b)("p",null,"The SQLite ALTER TABLE ADD COLUMN statement is used to add new columns to the schema.  This statement puts the columns at the end of the table.\nIn order to make the CQL schema align as closely as possible to the actual sqlite schema you will get you are required to add\ncolumns where SQLite will put them.  This will help a lot if you ever connect to such a database and start doing ",Object(i.b)("inlineCode",{parentName:"p"},"select * from <somewhere with creates>")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0033-columns-in-a-table-marked-recreate-cannot-have-create-or-delete-column"},"CQL0033: columns in a table marked @recreate cannot have @create or ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete"),", 'column'"),Object(i.b)("p",null,"If the table is using the ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," plan then you can add and remove columns (and other things freely)  you don't need to mark columns with ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," just add/remove them.\nThis error prevents the build up of useless annotations."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0034-createdelete-version-numbers-can-only-be-applied-to-columns-that-are-nullable-or-have-a-default-value-column"},"CQL0034: create/delete version numbers can only be applied to columns that are nullable or have a default value 'column'"),Object(i.b)("p",null,"Any new column added to a schema must have a default value or be nullable so that its initial state is clear\nand so that all existing insert statements do not have to be updated to include it.  Either make the column\nnullable or give it a default value."),Object(i.b)("p",null,'Similarly, any column being deleted must be nullable or have a default value.  The column can\'t actually be deleted\n(not all versions of SQLite support this) so it will only be "deprecated".  But if the column is not null and has no default\nthen it would be impossible to write a correct insert statement for the table with the deleted column.'),Object(i.b)("p",null,"As a consequence you can neither add nor remove columns that are not null and have no default."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0035-column-delete-version-cant-be--column-create-version-column"},"CQL0035: column delete version can't be <= column create version\", 'column'"),Object(i.b)("p",null,"You can't ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," a column in a version before it was even created.  Probably there is a typo in one or both of the versions."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0036-column-delete-version-cant-be--the-table-create-version-column"},"CQL0036: column delete version can't be <= the table create version 'column'"),Object(i.b)("p",null,"The indicated column is being deleted in a version that is before the table it is found in was even created.  Probably there is a typo in the delete version."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0037-column-delete-version-cant-be--the-table-delete-version"},"CQL0037: column delete version can't be >= the table delete version"),Object(i.b)("p",null,"The indicated column is being deleted in a version that is after the table has already been deleted.  This would be redundant.  Probably one or both have a typo in their delete version."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0038-column-create-version-cant-be--the-table-create-version-column"},"CQL0038: column create version can't be ",Object(i.b)("inlineCode",{parentName:"h3"},"<=")," the table create version 'column'"),Object(i.b)("p",null,"The indicated column is being created in a version that is before the table it is found in was even created.  Probably there is a typo in the delete version."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0039-column-create-version-cant-be--the-table-delete-version-column"},"CQL0039: column create version can't be ",Object(i.b)("inlineCode",{parentName:"h3"},">=")," the table delete version 'column'"),Object(i.b)("p",null,"The indicated column is being created in a version that that is after it has already been supposedly deleted.  Probably there is a typo in one or both of the version numbers."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0040-table-can-only-have-one-autoinc-column-column"},"CQL0040: table can only have one autoinc column 'column'"),Object(i.b)("p",null,"The indicated column is the second column to be marked with AUTOINCREMENT in its table.  There can only be one such column."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0041-tables-cannot-have-object-columns-column"},"CQL0041: tables cannot have object columns 'column'"),Object(i.b)("p",null,"The OBJECT data type is only for use in parameters and local variables.  SQLite has no storage for object references.\nThe valid data types include ",Object(i.b)("inlineCode",{parentName:"p"},"INTEGER"),", ",Object(i.b)("inlineCode",{parentName:"p"},"LONG INTEGER"),", ",Object(i.b)("inlineCode",{parentName:"p"},"REAL"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BOOL"),", ",Object(i.b)("inlineCode",{parentName:"p"},"TEXT"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BLOB")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0042-left-operand-must-be-a-string-in-likematchglob"},"CQL0042: left operand must be a string in 'LIKE/MATCH/GLOB'"),Object(i.b)("p",null,"The indicated operator can only be used to compare two strings."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0043-right-operand-must-be-a-string-in-likematchglob"},"CQL0043: right operand must be a string in 'LIKE/MATCH/GLOB'"),Object(i.b)("p",null,"The indicated operator can only be used to compare two strings."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0044-operator-may-only-appear-in-the-context-of-a-sql-statement-match"},"CQL0044: operator may only appear in the context of a SQL statement 'MATCH'"),Object(i.b)("p",null,"The MATCH operator is a complex sqlite primitive.  It can only appear within SQL expressions.\nSee the CQL documentation about it being a two-headed-beast when it comes to expression evaluation."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0045-blob-operand-not-allowed-in-operator"},"CQL0045: blob operand not allowed in 'operator'"),Object(i.b)("p",null,"None of the unary math operators e.g. '-' and '~' allow blobs as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0046-object-operand-not-allowed-in-operator"},"CQL0046: object operand not allowed in 'operator'"),Object(i.b)("p",null,"None of the unary math operators e.g. '-' and '~' allow objects as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0047-string-operand-not-allowed-in-operator"},"CQL0047: string operand not allowed in 'operator'"),Object(i.b)("p",null,"None of the unary math operators e.g. '-' and '~' allow strings as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0048-blob-operand-not-allowed-in-not"},"CQL0048: blob operand not allowed in 'NOT'"),Object(i.b)("p",null,"The logical not operator only works on numbers.  Blobs are not allow as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0049-object-operand-not-allowed-in-not"},"CQL0049: object operand not allowed in 'NOT'"),Object(i.b)("p",null,"The logical not operator only works on numbers.  Objects are not allow as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0050-string-operand-not-allowed-in-not"},"CQL0050: string operand not allowed in 'NOT'"),Object(i.b)("p",null,"The logical not operator only works on numbers.  Strings are not allow as an operand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0051-argument-can-only-be-used-in-count-"},"CQL0051: argument can only be used in count(",Object(i.b)("em",{parentName:"h3"},") '"),"'"),Object(i.b)("p",null,"The '",Object(i.b)("em",{parentName:"p"},"' special operator can only appear in the COUNT function.\ne.g. `select count("),") from some_table`\nIt is not a valid function argument in any other context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0052-select--cannot-be-used-with-no-from-clause"},"CQL0052: select * cannot be used with no FROM clause"),Object(i.b)("p",null,"Select statements of the form ",Object(i.b)("inlineCode",{parentName:"p"},"select 1, 'foo';")," are ",Object(i.b)("inlineCode",{parentName:"p"},"valid but select '*';")," is not.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"*")," shortcut for columns only makes sense if there is something to select from.\ne.g. ",Object(i.b)("inlineCode",{parentName:"p"},"select * from some_table;")," is valid."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0053-select-table-cannot-be-used-with-no-from-clause"},"CQL0053: select ","[table]",".* cannot be used with no FROM clause"),Object(i.b)("p",null,"Select statements of the form ",Object(i.b)("inlineCode",{parentName:"p"},"select 1, 'foo';")," are ",Object(i.b)("inlineCode",{parentName:"p"},"valid but select 'T.*';")," is not.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"T.*")," shortcut for all the columns from table T only makes sense if there is\nsomething to select form.\ne.g. ",Object(i.b)("inlineCode",{parentName:"p"},"select T.* from some_table T;")," is valid."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0054-table-not-found-table"},"CQL0054: table not found 'table'"),Object(i.b)("p",null,"The indicated table was used in a select statement like ",Object(i.b)("inlineCode",{parentName:"p"},"select T.* from ...")," but no such table was present in the ",Object(i.b)("inlineCode",{parentName:"p"},"FROM")," clause."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0055-all-columns-in-the-select-must-have-a-name"},"CQL0055: all columns in the select must have a name"),Object(i.b)("p",null,"Referring to the select statement on the failing line, that select statement was used in a context where all the columns must have a name.\nExamples include defining a view, a cursor, or creating a result set from a procedure.  The failing code might look something like this.\n",Object(i.b)("inlineCode",{parentName:"p"},"select 1, 2 B;"),"  it needs to look like this ",Object(i.b)("inlineCode",{parentName:"p"},"select 1 A, 2 B"),";"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0056-null-expression-has-no-type-to-imply-a-needed-type-variable"},"CQL0056: NULL expression has no type to imply a needed type 'variable'"),Object(i.b)("p",null,"In some contexts the type of a constant is used to imply the type of the expression.  The NULL literal cannot be used in such contexts\nbecause it has no specific type."),Object(i.b)("p",null,"In a SELECT statement the NULL literal has no type.  If the type of the column cannot be inferred then it must be declared specifically."),Object(i.b)("p",null,"In a  LET statement, the same situation arises  ",Object(i.b)("inlineCode",{parentName:"p"},"LET x := NULL;"),"  doesn't specify what type 'x' is to be."),Object(i.b)("p",null,"You can fix this error by changing the ",Object(i.b)("inlineCode",{parentName:"p"},"NULL")," to something like ",Object(i.b)("inlineCode",{parentName:"p"},"CAST(NULL as TEXT)"),"."),Object(i.b)("p",null,"A common place this problem happens is in defining a view or returning a result set from a stored procedure.  In those cases\nall the columns must have a name and a type."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0057-if-multiple-selects-all-must-have-the-same-column-count"},"CQL0057: if multiple selects, all must have the same column count"),Object(i.b)("p",null,"If a stored procedure might return one of several result sets, each of the select statements it might return must have the same number of columns.\nLikewise, if several select results are being combined with ",Object(i.b)("inlineCode",{parentName:"p"},"UNION")," or ",Object(i.b)("inlineCode",{parentName:"p"},"UNION ALL")," they must all have the same number of columns."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0058-if-multiple-selects-all-column-names-must-be-identical-so-they-have-unambiguous-names-column"},"CQL0058: if multiple selects, all column names must be identical so they have unambiguous names 'column'"),Object(i.b)("p",null,"If a stored procedure might return one of several result sets, each of the select statements must have the same column names for its result.\nLikewise, if several select results are being combined with ",Object(i.b)("inlineCode",{parentName:"p"},"UNION")," or ",Object(i.b)("inlineCode",{parentName:"p"},"UNION ALL")," they must all have the same column names."),Object(i.b)("p",null,"This is important so that there can be one unambiguous column name for every column for group of select statements."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select 1 A, 2 B\nunion\nselect 3 A, 4 C;\n")),Object(i.b)("p",null,"Would provoke this error.  In this case 'C' would be regarded as the offending column."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0059-a-variable-name-might-be-ambiguous-with-a-column-name-this-is-an-anti-pattern-name"},"CQL0059: a variable name might be ambiguous with a column name, this is an anti-pattern 'name'"),Object(i.b)("p",null,"The referenced name is the name of a local or a global in the same scope as the name of a column.  This can lead to surprising results as it is not clear which name takes priority (previously the variable did rather than the column, now it's an error)."),Object(i.b)("p",null,"example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create proc foo(id integer)\nbegin\n  -- this is now an error, in all cases the argument would have been selected\n  select id from bar T1 where T1.id != id;\nend;\n")),Object(i.b)("p",null,"To correct this, rename the local/global.  Or else pick a more distinctive column name, but usually the local is the problem."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0060-referenced-table-can-be-independently-recreated-so-it-cannot-be-used-in-a-foreign-key-referenced_table"},"CQL0060: referenced table can be independently recreated so it cannot be used in a foreign key, 'referenced_table'"),Object(i.b)("p",null,"The referenced table is marked recreate so it must be in the same recreate\ngroup as the current table because the referenced table might be recreated away leaving all the\nforeign key references in current table as orphans."),Object(i.b)("p",null,"So we check the following:\nIf the referenced table is marked recreate then any of the following result in CQL0060"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the referenced table is in no group, OR"),Object(i.b)("li",{parentName:"ul"},"the containing table is not recreate at all (non-recreate table can't reference recreate tables at all), OR"),Object(i.b)("li",{parentName:"ul"},"the containing table is in no recreate group (it's recreate but not in any group so they might not rev together), OR"),Object(i.b)("li",{parentName:"ul"},"the recreate groups of the two tables are different (it's in a recreate group but not same one so they my not rev together)")),Object(i.b)("p",null,"The referenced table is a recreate table and one of the 4 above conditions was not met.  Either don't reference it or\nelse put the current table and the referenced table into the same recreate group."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0061-if-multiple-selects-all-columns-must-be-an-exact-type-match-expected-expected_type-found-actual_type-column"},"CQL0061: if multiple selects, all columns must be an exact type match (expected expected_type; found actual_type) 'column'"),Object(i.b)("p",null,"In a stored proc with multiple possible selects providing the result, all of the columns of all the selects must be an exact type match."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"if x then\n  select 1 A, 2 B\nelse\n  select 3 A, 4.0 B;\nend if;\n")),Object(i.b)("p",null,"Would provoke this error.  In this case 'B' would be regarded as the offending column and the error is reported on the second B."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0062-if-multiple-selects-all-columns-must-be-an-exact-type-match-including-nullability-expected-expected_type-found-actual_type-column"},"CQL0062: if multiple selects, all columns must be an exact type match (including nullability) (expected expected_type; found actual_type) 'column'"),Object(i.b)("p",null,"In a stored proc with multiple possible selects providing the result, all of the columns of all the selects must be an exact type match.\nThis error indicates that the specified column differs by nullability."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0063-cant-mix-and-match-out-statement-with-selectcall-for-return-values-procedure_name"},"CQL0063: can't mix and match out statement with select/call for return values 'procedure_name'"),Object(i.b)("p",null,"If the procedure is using SELECT to create a result set it cannot also use the OUT keyword\nto create a one-row result set."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0064-object-variables-may-not-appear-in-the-context-of-a-sql-statement"},"CQL0064: object variables may not appear in the context of a SQL statement"),Object(i.b)("p",null,"SQLite doesn't understand object references, so that means you cannot try to use a variable or parameter of type object inside of a SQL statement."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create proc foo(X object)\nbegin\n  select X is null;\nend;\n")),Object(i.b)("p",null,"In this example X is an object parameter, but even to use X for an ",Object(i.b)("inlineCode",{parentName:"p"},"is null")," check in a select statement would require binding an object which is not possible."),Object(i.b)("p",null,"On the other hand this compiles fine."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create proc foo(X object, out is_null bool not null)\nbegin\n  set is_null := X is null;\nend;\n")),Object(i.b)("p",null,"This is another example of XQL being a two-headed beast."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0065-identifier-is-ambiguous-name"},"CQL0065: identifier is ambiguous 'name'"),Object(i.b)("p",null,"There is more than one variable/column with indicated name in equally near scopes.  The most common reason for this is that there are two column in a join with the same name and that name has not been qualified elsewhere."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT A\n  FROM (SELECT 1 AS A, 2 AS B) AS T1\n  INNER JOIN (SELECT 1 AS A, 2 AS B) AS T2;\n")),Object(i.b)("p",null,"There are two possible columns named ",Object(i.b)("inlineCode",{parentName:"p"},"A"),".  Fix this by using ",Object(i.b)("inlineCode",{parentName:"p"},"T1.A")," or ",Object(i.b)("inlineCode",{parentName:"p"},"T2.A"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0066-if-a-table-is-marked-recreate-its-indices-must-be-in-its-schema-region-index_name"},"CQL0066: if a table is marked ",Object(i.b)("inlineCode",{parentName:"h3"},"@recreate"),", its indices must be in its schema region 'index_name'"),Object(i.b)("p",null,"If a table is marked ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," that means that when it changes it is dropped and created during schema maintenance.  Of course when it is dropped its indices are also dropped.  So the indices must also be recreated when the table changes.  So with such a table it makes no sense to have indices that are in a different schema region.  This can only work if they are all always visible together."),Object(i.b)("p",null,"Tables on the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," plan are not dropped so their indices can be maintained separately.  So they get a little extra flexibility."),Object(i.b)("p",null,"To fix this error move the offending index into the same schema region as the table.  And probably put them physically close for maintenance sanity."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0067-cursor-was-not-used-with-fetch-cursor--cursor_name"},"CQL0067: cursor was not used with 'fetch ","[cursor]","'  'cursor_name'"),Object(i.b)("p",null,"The code is trying to access fields in the named cursor but the automatic field generation form was not used so there are no such fields."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare a integer;\ndeclare b integer;\ndeclare C cursor for select 1 A, 2 B;\nfetch C into a, b; -- C.A and C.B not created (!)\nif (C.A) then -- error\n  ...\nend if;\n")),Object(i.b)("p",null,"Correct usage looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for select 1 A, 2 B;\nfetch C;  -- automatically creates C.A and C.B\nif (C.A) then\n  ...\nend if;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0068-field-not-found-in-cursor-field"},"CQL0068: field not found in cursor 'field'"),Object(i.b)("p",null,"The indicated field is not a valid field in a cursor expression."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for select 1 A, 2 B;\nfetch C;  -- automatically creates C.A and C.B\nif (C.X) then -- C has A and B, but no X\n  ...\nend if;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0069-name-not-found-name"},"CQL0069: name not found 'name'"),Object(i.b)("p",null,"The indicated name could not be resolved in the scope in which it appears.\nProbably there is a typo.  But maybe the name you need isn't available in\nthe scope you are trying to use it in."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0070-incompatible-object-type-incompatible_type"},"CQL0070: incompatible object type 'incompatible_type'"),Object(i.b)("p",null,"Two expressions of type object are holding a different object type e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"declare x object<Foo>;\ndeclare y object<Bar>;\nset x := y;\n")),Object(i.b)("p",null,"Here the message would report that 'Bar' is incompatible. The message generally\nrefers to the 2nd object type as the first one was ok by default then the\nsecond one caused the problem."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0071-first-operand-cannot-be-a-blob-in-betweennot-between"},"CQL0071: first operand cannot be a blob in 'BETWEEN/NOT BETWEEN'"),Object(i.b)("p",null,"The BETWEEN operator works on numerics and strings only."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0072-first-operand-cannot-be-a-blob-in-betweennot-between"},"CQL0072: first operand cannot be a blob in 'BETWEEN/NOT BETWEEN'"),Object(i.b)("p",null,"The BETWEEN operator works on numerics and strings only."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0073-cast-may-only-appear-in-the-context-of-sql-statement"},"CQL0073: CAST may only appear in the context of SQL statement"),Object(i.b)("p",null,"The CAST function does highly complex and subtle conversions, including date/time functions and other things.  It's not possibly to emulate this accurately and there is no sqlite helper to do the job directly from a C call.  Consequently it's only supported in the context of CQL statements.  It can be used in normal expressions by using the nested ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," form ",Object(i.b)("inlineCode",{parentName:"p"},"(select ...)")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0074-too-few-arguments-provided-coalesce"},"CQL0074: Too few arguments provided 'coalesce'"),Object(i.b)("p",null,"There must be at least two arguments in a call to ",Object(i.b)("inlineCode",{parentName:"p"},"coalesce"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0075-incorrect-number-of-arguments-ifnull"},"CQL0075: Incorrect number of arguments 'ifnull'"),Object(i.b)("p",null,"The  ",Object(i.b)("inlineCode",{parentName:"p"},"ifnull")," function requires exactly two arguments."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0076-null-literal-is-useless-in-function-ifnullcoalesce"},"CQL0076: Null literal is useless in function 'ifnull/coalesce'"),Object(i.b)("p",null,"Adding a NULL literal to ",Object(i.b)("inlineCode",{parentName:"p"},"IFNULL")," or ",Object(i.b)("inlineCode",{parentName:"p"},"COALESCE")," is a no-op.  It's most likely an error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0077-encountered-arg-known-to-be-not-null-before-the-end-of-the-list-rendering-the-rest-useless"},"CQL0077: encountered arg known to be not null before the end of the list, rendering the rest useless."),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"IFNULL")," or ",Object(i.b)("inlineCode",{parentName:"p"},"COALESCE")," call, only the last argument should be known to be not null.  If the not null argument comes earlier in the list, then none of the others could ever be used.  That is almost certainly an error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0078-not-in-select--is-only-allowed-inside-of-select-lists-where-on-and-having-clauses"},"CQL0078: ","[not]"," in (select ...) is only allowed inside of select lists, where, on, and having clauses"),Object(i.b)("p",null,"The (select...) option for ",Object(i.b)("inlineCode",{parentName:"p"},"IN")," or ",Object(i.b)("inlineCode",{parentName:"p"},"NOT IN")," only makes sense in certain expression contexts.    Other uses are most likely errors.  It cannot appear in a loose expression because it fundamentally requires sqlite to process it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0079-function-got-incorrect-number-of-arguments-name"},"CQL0079: function got incorrect number of arguments 'name'"),Object(i.b)("p",null,"The indicated function was called with the wrong number of arguments.  There are various functions supported each with different rules.  See the SQLite documentation for more information about the specified function."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0080-function-may-not-appear-in-this-context-name"},"CQL0080: function may not appear in this context 'name'"),Object(i.b)("p",null,"Many functions can only appear in certain contexts.  For instance most aggregate functions are limited to the select list or the HAVING clause.  They cannot appear in, for instance, a WHERE, or ON clause.  The particulars vary by function."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0081-aggregates-only-make-sense-if-there-is-a-from-clause-name"},"CQL0081: aggregates only make sense if there is a FROM clause 'name'"),Object(i.b)("p",null,"The indicated aggregate function was used in a select statement with no tables.  For instance"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select MAX(7);\n")),Object(i.b)("p",null,"Doesn't make any sense."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0082-argument-must-be-numeric-average"},"CQL0082: argument must be numeric 'AVERAGE'"),Object(i.b)("p",null,"The argument of AVERAGE must be numeric."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0083-argument-must-be-numeric-sum"},"CQL0083: argument must be numeric 'SUM'"),Object(i.b)("p",null,"The argument of SUM must be numeric."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0084-second-argument-must-be-a-string-in-function-group_concat"},"CQL0084: second argument must be a string in function 'group_concat'"),Object(i.b)("p",null,"The second argument of group_concat is the separator, it must be a string.  The first argument will be converted to a string."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0085-all-arguments-must-be-strings-strftime"},"CQL0085: all arguments must be strings 'strftime'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"strftime")," function does complex data formatting.  All the arguments are strings.  See the sqlite documentation for more details on the options (there are many)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0086-first-argument-must-be-a-string-in-function-printf"},"CQL0086: first argument must be a string in function 'printf'"),Object(i.b)("p",null,"The first argument of ",Object(i.b)("inlineCode",{parentName:"p"},"printf")," is the formatting string.  The other arguments are variable and many complex conversions will apply."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0087-no-objectblob-types-are-allowed-in-arguments-for-function-printf"},"CQL0087: no object/blob types are allowed in arguments for function 'printf'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"printf")," has no meaningful conversions for blobs.  Object references are entirely unsupported."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0088-user-function-may-not-appear-in-the-context-of-a-sql-statement-function_name"},"CQL0088: User function may not appear in the context of a SQL statement 'function_name'"),Object(i.b)("p",null,"External C functions declared with ",Object(i.b)("inlineCode",{parentName:"p"},"declare function ...")," are not for use in sqlite.  They may not appear inside statements."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0089-user-function-may-only-appear-in-the-context-of-a-sql-statement-function_name"},"CQL0089: User function may only appear in the context of a SQL statement 'function_name'"),Object(i.b)("p",null,"SQLite user defined functions (or builtins) declared with  ",Object(i.b)("inlineCode",{parentName:"p"},"declare select function")," may only appear inside of sql statements.  In the case of user defined functions they must be added to sqlite by the appropriate C APIs before they can be used in CQL stored procs (or any other context really).   See the sqlite documentation on how to add user defined functions. ",Object(i.b)("a",{parentName:"p",href:"http://www.sqlite.org/c3ref/create_function.html"},"Create Or Redefine SQL Functions")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0090-stored-proc-calls-may-not-appear-in-the-context-of-a-sql-statement-proc_name"},"CQL0090: Stored proc calls may not appear in the context of a SQL statement 'proc_name'"),Object(i.b)("p",null,"While it's possible to call a CQL stored procedure as though it was a function (if it has an OUT argument as its last arg) you may not do this from inside of a SQL statement.  Just like external C functions SQLite cannot call stored procs."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0091-stored-procs-that-deal-with-result-sets-or-cursors-cannot-be-invoked-as-functions-name"},"CQL0091: Stored procs that deal with result sets or cursors cannot be invoked as functions 'name'"),Object(i.b)("p",null,"The function syntax for procs cannot be used on procedures that return a result set.  Such procedures already have a result and it isn't even a scalar result."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0092-raise-may-only-be-used-in-a-trigger-statement"},"CQL0092: RAISE may only be used in a trigger statement"),Object(i.b)("p",null,"SQLite only supports this kind of control flow in the context of triggers, certain trigger predicates might need to unconditionally fail and complex logic can be implemented in this way.  However this sort of thing is not really recommended.  In any case this is not a general purpose construct."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0093-raise-2nd-argument-must-be-a-string"},"CQL0093: RAISE 2nd argument must be a string"),Object(i.b)("p",null,"Only forms with a string as the second argument are supported by SQLite."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0094-function-not-yet-implemented-function"},"CQL0094: function not yet implemented 'function'"),Object(i.b)("p",null,"The indicated function is not implemented in CQL.  Possibly you intended to declare it with ",Object(i.b)("inlineCode",{parentName:"p"},"declare function")," as an external function or ",Object(i.b)("inlineCode",{parentName:"p"},"declare select function")," as a sqlite builtin.  Note not all sqlite builtins are automatically declared."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0095-tableview-not-defined-name"},"CQL0095: table/view not defined 'name'"),Object(i.b)("p",null,"The indicated name is neither a table nor a view.  It is possible that the table/view is now deprecated with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and therefore will appear to not exist in the current context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0096-join-using-column-not-found-on-the-left-side-of-the-join-column_name"},"CQL0096: join using column not found on the left side of the join 'column_name'"),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"JOIN ... USING(x,y,z)")," form, all the columns in the using clause must appear on both sides of the join.  Here the indicated name is not present on the left side of the join."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0097-join-using-column-not-found-on-the-right-side-of-the-join-column_name"},"CQL0097: join using column not found on the right side of the join 'column_name'"),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"JOIN ... USING(x,y,z)")," form, all the columns in the using clause must appear on both sides of the join.  Here the indicated name is not present on the right side of the join."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0098-leftright-column-types-in-join-using-do-not-match-exactly-column_name"},"CQL0098: left/right column types in join USING(...) do not match exactly 'column_name'"),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"JOIN ... USING(x,y,z)")," form, all the columns in the using clause must appear on both sides of the join and have the same data type.  Here the data types differ in the named column."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0099-having-clause-requires-group-by-clause"},"CQL0099: HAVING clause requires GROUP BY clause"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"HAVING")," clause makes no sense unless there is also a ",Object(i.b)("inlineCode",{parentName:"p"},"GROUP BY")," clause.  SQLite enforces this as does CQL."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0100-duplicate-common-table-name-name"},"CQL0100: duplicate common table name 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"WITH")," clause, the indicated common table name was defined more than once."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0101-too-few-column-names-specified-in-common-table-expression-name"},"CQL0101: too few column names specified in common table expression 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"WITH")," clause the indicated common table expression doesn't include enough column names to capture the result of the ",Object(i.b)("inlineCode",{parentName:"p"},"select")," statement it is associated with."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"WITH foo(a) as (SELECT 1 A, 2 B) ...`\n")),Object(i.b)("p",null,"The select statement produces two columns the ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," declaration specifies one."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0102-too-many-column-names-specified-in-common-table-expression-name"},"CQL0102: too many column names specified in common table expression 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"WITH")," clause the indicated common table expression has more  column names than the ",Object(i.b)("inlineCode",{parentName:"p"},"select")," expression it is associated with."),Object(i.b)("p",null,"e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"WITH foo(a, b) as (SELECT 1) ... `\n")),Object(i.b)("p",null,"The select statement produces one column the ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," declaration specifies two."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0103-duplicate-tableview-name-name"},"CQL0103: duplicate table/view name 'name'"),Object(i.b)("p",null,"The indicated table or view must be unique in its context.  The version at the indicated line number is a duplicate of a previous declaration."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0104-view-was-present-but-now-it-does-not-exist-use-delete-instead-name"},"CQL0104: view was present but now it does not exist (use ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," instead) 'name'"),Object(i.b)("p",null,"During schema validation, CQL found a view that used to exist but is now totally gone.  The correct procedure is to mark the view with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," (you can also make it stub with the same name to save a little space).  This is necessary so that CQL can know what views should be deleted on client devices during an upgrade.  If the view is eradicated totally there would be no way to know that the view should be deleted if it exists."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0105-object-was-a-view-but-is-now-a-table-name"},"CQL0105: object was a view but is now a table 'name'"),Object(i.b)("p",null,"Converting a view into a table, or otherwise creating a table with the same name as a view is not legal."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0106-trigger-was-present-but-now-it-does-not-exist-use-delete-instead-name"},"CQL0106: trigger was present but now it does not exist (use ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," instead) 'name'"),Object(i.b)("p",null,"During schema validation, CQL found a trigger that used to exist but is now totally gone.  The correct procedure is to mark the trigger with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," (you can also make it stub with the same name to save a little space).  This is necessary so that CQL can know what triggers should be deleted on client devices during an upgrade.  If the trigger is eradicated totally there would be no way to know that the trigger should be deleted if it exists.  That would be bad."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0107-delete-version-cant-be--create-version-name"},"CQL0107: delete version can't be <= create version 'name'"),Object(i.b)("p",null,"Attempting to declare that an object has been deleted before it was created is an error.  Probably there is a typo in one or both of the version numbers of the named object."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0108-table-in-drop-statement-does-not-exist-table_name"},"CQL0108: table in drop statement does not exist 'table_name'"),Object(i.b)("p",null,"The indicated table was not declared anywhere.  Note that CQL requires that you declare all tables you will work with, even if all you intend to do with the table is drop it.  When you put a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement in global scope this only declares a table, it doesn't actually create the table. See the documentation on DDL for more information."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0109-cannot-drop-a-view-with-drop-table-view_name"},"CQL0109: cannot drop a view with drop table 'view_name'"),Object(i.b)("p",null,"The object named in a ",Object(i.b)("inlineCode",{parentName:"p"},"DROP TABLE")," statement must be a table, not a view."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0110-view-in-drop-statement-does-not-exist-view_name"},"CQL0110: view in drop statement does not exist 'view_name'"),Object(i.b)("p",null,"The indicated view was not declared anywhere.  Note that CQL requires that you declare all views you will work with, even if all you intend to do with the view is drop it.  When you put a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE VIEW")," statement in global scope this only declares a view, it doesn't actually create the view.  See the documentation on DDL for more information."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0111-cannot-drop-a-table-with-drop-view-name"},"CQL0111: cannot drop a table with drop view 'name'"),Object(i.b)("p",null,"The object named in a ",Object(i.b)("inlineCode",{parentName:"p"},"DROP VIEW")," statement must be a view, not a table."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0112-index-in-drop-statement-was-not-declared-index_name"},"CQL0112: index in drop statement was not declared 'index_name'"),Object(i.b)("p",null,"The indicated index was not declared anywhere.  Note that CQL requires that you declare all indices you will work with, even if all you intend to do with the index is drop it.  When you put a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE INDEX")," statement in global scope this only declares an index, it doesn't actually create the index.  See the documentation on DDL for more information."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0113-trigger-in-drop-statement-was-not-declared-name"},"CQL0113: trigger in drop statement was not declared 'name'"),Object(i.b)("p",null,"The indicated trigger was not declared anywhere.  Note that CQL requires that you declare all triggers you will work with, even if all you intend to do with the trigger is drop it.  When you put a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TRIGGER")," statement in global scope this only declares a trigger, it doesn't actually create the trigger.  See the documentation on DDL for more information."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0114-current-schema-cant-go-back-to-recreate-semantics-for-table_name"},"CQL0114: current schema can't go back to recreate semantics for 'table_name'"),Object(i.b)("p",null,"The indicated table was previously marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," indicating it has precious content and should be upgraded carefully.  The current schema marks the same table with ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," meaning it has discardable content and should be upgraded by dropping it and recreating it.  This transition is not allowed.  If the table really is non-precious now you can mark it with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and then make a new similar table with ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate"),".  This really shouldn't happen very often if at all.  Probably the error is due to a typo or wishful thinking."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0115-current-create-version-not-equal-to-previous-create-version-for-table"},"CQL0115: current create version not equal to previous create version for 'table'"),Object(i.b)("p",null,"The indicated table was previously marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," at some version (x) and now it is being created at some different version (y !=x ).  This not allowed (if it were then objects might be created in the wrong/different order during upgrade which would cause all kinds of problems)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0116-current-delete-version-not-equal-to-previous-delete-version-for-table"},"CQL0116: current delete version not equal to previous delete version for 'table'"),Object(i.b)("p",null,"The indicated table was previously marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," at some version (x) and now it is being deleted at some different version (y != x).  This not allowed (if it were then objects might be deleted in the wrong/different order during upgrade which would cause all kinds of problems)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0117-delete-procedure-changed-in-object-table_name"},"CQL0117: ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," procedure changed in object 'table_name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),' attribute can optional include a "migration proc" that is run when the upgrade happens.  Once set, this proc can never be changed.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0118-create-procedure-changed-in-object-table_name"},"CQL0118: ",Object(i.b)("inlineCode",{parentName:"h3"},"@create")," procedure changed in object 'table_name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@create"),' attribute can optional include a "migration proc" that is run when the upgrade happens.  Once set, this proc can never be changed.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0119-column-name-is-different-between-previous-and-current-schema-name"},"CQL0119: column name is different between previous and current schema 'name'"),Object(i.b)("p",null,"Since there is no sqlite operation that allows for columns to be renamed, attempting to rename a column is not allowed."),Object(i.b)("p",null,"NOTE: you can also get this error if you remove a column entirely, or add a column in the middle of the list somewhere."),Object(i.b)("p",null,"Since columns (also) cannot be reordered during upgrade, CQL expects to find all the columns in exactly the same order in the previous and new schema.  Any reordering, or deletion could easily look like an erroneous rename.  New columns must appear at the end of any existing columns."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0120-column-type-is-different-between-previous-and-current-schema-name"},"CQL0120: column type is different between previous and current schema 'name'"),Object(i.b)("p",null,"It is not possible to change the data type of a column during an upgrade, SQLite provides no such options.  Attempting to do so results in an error.  This includes nullability."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0121-column-current-create-version-not-equal-to-previous-create-version-name"},"CQL0121: column current create version not equal to previous create version 'name'"),Object(i.b)("p",null,"The indicated column was previously marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," at some version (x) and now it is being created at some different version (y !=x ).  This not allowed (if it were then objects might be created in the wrong/different order during upgrade which would cause all kinds of problems)."),Object(i.b)("h3",{id:"cql0122-column-current-delete-version-not-equal-to-previous-delete-version-name"},"CQL0122: column current delete version not equal to previous delete version 'name'"),Object(i.b)("p",null,"The indicated column was previously marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," at some version (x) and now it is being deleted at some different version (y != x).  This not allowed (if it were then objects might be deleted in the wrong/different order during upgrade which would cause all kinds of problems)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0123-column-delete-procedure-changed-name"},"CQL0123: column ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," procedure changed 'name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),' attribute can optional include a "migration proc" that is run when the upgrade happens.  Once set, this proc can never be changed.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0124-column-create-procedure-changed-name"},"CQL0124: column ",Object(i.b)("inlineCode",{parentName:"h3"},"@create")," procedure changed 'name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@create"),' attribute can optional include a "migration proc" that is run when the upgrade happens.  Once set, this proc can never be changed.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0125-column-current-default-value-not-equal-to-previous-default-value-column"},"CQL0125: column current default value not equal to previous default value 'column'"),Object(i.b)("p",null,"The default value of a column may not be changed in later versions of the schema.  There is no SQLite operation that would allow this."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0126-table-was-present-but-now-it-does-not-exist-use-delete-instead-table"},"CQL0126: table was present but now it does not exist (use ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," instead) 'table'"),Object(i.b)("p",null,"During schema validation, CQL found a table that used to exist but is now totally gone.  The correct procedure is to mark the table with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),".  This is necessary so that CQL can know what tables should be deleted on client devices during an upgrade.  If the table is eradicated totally there would be no way to know that the table should be deleted if it exists.  That would be bad."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0127-object-was-a-table-but-is-now-a-view-name"},"CQL0127: object was a table but is now a view 'name'"),Object(i.b)("p",null,"The indicated object was a table in the previous schema but is now a view in the current schema.  This transformation is not allowed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0128-table-has-a-column-that-is-different-in-the-previous-and-current-schema-column"},"CQL0128: table has a column that is different in the previous and current schema 'column'"),Object(i.b)("p",null,"The indicated column changed in one of its more exotic attributes, examples:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"its ",Object(i.b)("inlineCode",{parentName:"li"},"FOREIGN KEY")," rules changed in some way"),Object(i.b)("li",{parentName:"ul"},"its ",Object(i.b)("inlineCode",{parentName:"li"},"PRIMARY KEY")," status changed"),Object(i.b)("li",{parentName:"ul"},"its ",Object(i.b)("inlineCode",{parentName:"li"},"UNIQUE")," status changed")),Object(i.b)("p",null,"Basically the long form description of the column is now different and it isn't different in one of the usual way like type or default value.  This error is the catch all for all the other ways a column could change such as \"the FK rule for what happens when an update fk violation occurs is now different\" -- there are dozens of such errors and they aren't very helpful anyway."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0129-a-column-was-removed-from-the-table-rather-than-marked-with-delete-column_name"},"CQL0129: a column was removed from the table rather than marked with ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," 'column_name'"),Object(i.b)("p",null,"During schema validation, CQL found a column that used to exist but is now totally gone.  The correct procedure is to mark the column with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),".  This is necessary so that CQL can know what columns existed during any version of the schema, thereby allowing them to be used in migration scripts during an upgrade.  If the column is eradicated totally there would be no way to know that the exists, and should no longer be used.  That would be bad."),Object(i.b)("p",null,"Of course ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," tables will never get this error because they can be altered at whim."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0130-table-has-columns-added-without-marking-them-create-column_name"},"CQL0130: table has columns added without marking them ",Object(i.b)("inlineCode",{parentName:"h3"},"@create")," 'column_name'"),Object(i.b)("p",null,"The indicated column was added but it was not marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@create"),".  The table in question is not on the ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," plan so this is an error.  Add a suitable ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," annotation to the column declaration."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0131-table-has-newly-added-columns-that-are-marked-both-create-and-delete-column_name"},"CQL0131: table has newly added columns that are marked both ",Object(i.b)("inlineCode",{parentName:"h3"},"@create")," and ",Object(i.b)("inlineCode",{parentName:"h3"},"@delete")," 'column_name'"),Object(i.b)("p",null,"The indicated column was simultaneously marked ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," and ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),".  That's surely some kind of typo.  Creating a column and deleting it in the same version is weird."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0132-table-has-a-facet-that-is-different-in-the-previous-and-current-schema-table_name"},"CQL0132: table has a facet that is different in the previous and current schema 'table_name'"),Object(i.b)("p",null,"The indicated table has changes in one of its non-column features.  These changes might be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a primary key declaration"),Object(i.b)("li",{parentName:"ul"},"a unique key declaration"),Object(i.b)("li",{parentName:"ul"},"a foreign key declaration")),Object(i.b)("p",null,"None of these are allowed to change.  Of course ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," tables will never get this error because they can be altered at whim."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0133-non-column-facets-have-been-removed-from-the-table-name"},"CQL0133: non-column facets have been removed from the table 'name'"),Object(i.b)("p",null,'The error indicates that the table has had some stuff removed from it.  The "stuff" might be:'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a primary key declaration"),Object(i.b)("li",{parentName:"ul"},"a unique key declaration"),Object(i.b)("li",{parentName:"ul"},"a foreign key declaration")),Object(i.b)("p",null,"Since there is no way to change any of the constraints after the fact, they may not be changed at all if the table is on the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," plan.  Of course ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," tables will never get this error because they can be altered at whim."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0134-table-has-a-new-non-column-facet-in-the-current-schema-table_name"},"CQL0134: table has a new non-column facet in the current schema 'table_name'"),Object(i.b)("p",null,'The error indicates that the table has had some stuff added to it.  The "stuff" might be:'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"a primary key declaration"),Object(i.b)("li",{parentName:"ul"},"a unique key declaration"),Object(i.b)("li",{parentName:"ul"},"a foreign key declaration")),Object(i.b)("p",null,"Since there is no way to change any of the constraints after the fact, they may not be changed at all if the table is on the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," plan.  Of course ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," tables will never get this error because they can be altered at whim."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0135-table-create-statement-attributes-different-than-previous-version-table_name"},"CQL0135: table create statement attributes different than previous version 'table_name'"),Object(i.b)("p",null,"The 'flags' on the ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement changed between versions.  These flags capture the options like the",Object(i.b)("inlineCode",{parentName:"p"},"TEMP")," in ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TEMP TABLE")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"IF NOT EXISTS"),".   Changing these is not allowed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0136-trigger-already-exists-trigger_name"},"CQL0136: trigger already exists 'trigger_name'"),Object(i.b)("p",null,"Trigger names may not be duplicated.  Probably there is copy/pasta going on here."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0137-tableview-not-found-name"},"CQL0137: table/view not found 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TRIGGER")," statement, the indicated name is neither a table or a view.  Either a table or\na view was expected in this context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0138-a-trigger-on-a-view-must-be-the-instead-of-form-name"},"CQL0138: a trigger on a view must be the INSTEAD OF form 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TRIGGER")," statement, the named target of the trigger was a view but the trigger type is not ",Object(i.b)("inlineCode",{parentName:"p"},"INSTEAD OF"),".  Only ",Object(i.b)("inlineCode",{parentName:"p"},"INSTEAD OF")," can be applied to views because views are not directly mutable so none of the other types make sense.  e.g. there can be no delete operations, on a view, so ",Object(i.b)("inlineCode",{parentName:"p"},"BEFORE DELETE")," or ",Object(i.b)("inlineCode",{parentName:"p"},"AFTER DELETE")," are not really a thing."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0139-temp-objects-may-not-have-versioning-annotations-object_name"},"CQL0139: temp objects may not have versioning annotations 'object_name'"),Object(i.b)("p",null,"The indicated object is a temporary.  Since temporary  do not survive sessions it makes no sense to try to version them for schema upgrade.\nThey are always recreated on demand.  If you need to remove one, simply delete it entirely, it requires no tombstone."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0140-columns-in-a-temp-table-may-not-have-versioning-attributes-column_name"},"CQL0140: columns in a temp table may not have versioning attributes 'column_name'"),Object(i.b)("p",null,"The indicated column is part of a temporary table.  Since temp tables do not survive sessions it makes no sense to try to version their columns for schema upgrade.  They are always recreated on demand."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0141-table-has-an-autoincrement-column-it-cannot-also-be-without-rowid-table_name"},"CQL0141: table has an AUTOINCREMENT column; it cannot also be WITHOUT ROWID 'table_name'"),Object(i.b)("p",null,"SQLite uses its ",Object(i.b)("inlineCode",{parentName:"p"},"ROWID")," internally for ",Object(i.b)("inlineCode",{parentName:"p"},"AUTOINCREMENT")," columns.  Therefore ",Object(i.b)("inlineCode",{parentName:"p"},"WITHOUT ROWID")," is not a possibility if ",Object(i.b)("inlineCode",{parentName:"p"},"AUTOINCREMENT")," is in use."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0142-duplicate-column-name-column_name"},"CQL0142: duplicate column name 'column_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement, the indicated column was defined twice.  This is probably a copy/pasta issue."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0143-more-than-one-primary-key-in-table-table_name"},"CQL0143: more than one primary key in table 'table_name'"),Object(i.b)("p",null,"The indicated table has more than one column with the ",Object(i.b)("inlineCode",{parentName:"p"},"PRIMARY KEY")," attribute or multiple ",Object(i.b)("inlineCode",{parentName:"p"},"PRIMARY KEY")," constraints, or a combination of these things.  You'll have to decide which one is really intended to be primary."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0144-cannot-alter-a-view-view_name"},"CQL0144: cannot alter a view 'view_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement, the table to be altered is actually a view.  This is not allowed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0144-table-in-alter-statement-does-not-exist-table_name"},"CQL0144: table in alter statement does not exist 'table_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement, the table to be altered was not defined, or perhaps was marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and is no longer usable in the current schema version."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0145-version-annotations-not-valid-in-alter-statement-column_name"},"CQL0145: version annotations not valid in alter statement 'column_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement, the attributes on the column may not include ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),".  Those annotations go on the columns declaration in the corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0146-adding-an-auto-increment-column-is-not-allowed-column_name"},"CQL0146: adding an auto increment column is not allowed 'column_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement, the attributes on the column may not include ",Object(i.b)("inlineCode",{parentName:"p"},"AUTOINCREMENT"),".  SQLite does not support the addition of new ",Object(i.b)("inlineCode",{parentName:"p"},"AUTOINCREMENT")," columns."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0147-adding-a-not-nullable-column-with-no-default-value-is-not-allowed-column_name"},"CQL0147: adding a not nullable column with no default value is not allowed 'column_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement the attributes on the named column must include a default value or else the column must be nullable.  This is so that SQLite knows what value to put on existing rows when the column is added and also so that any existing insert statements will not suddenly all become invalid.  If the column is nullable or has a default value then the existing insert statements that don't specify the column will continue to work, using either NULL or the default."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0148-added-column-must-already-be-reflected-in-declared-schema-with-create-exact-name-match-required-column_name"},"CQL0148: added column must already be reflected in declared schema, with ",Object(i.b)("inlineCode",{parentName:"h3"},"@create"),", exact name match required 'column_name'"),Object(i.b)("p",null,"In CQL loose schema is a declaration, it does not actually create anything unless placed inside of a procedure.  A column that is added with ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is not actually declared as part of the schema by the ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER"),".  Rather the schema declaration is expected to include any columns you plan to add.  Normally the way this all happens is that you put ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," notations on a column in the schema and the automatic schema upgrader then creates suitable ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statements to arrange for that column to be added.  If you manually write an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement it isn't allowed to add columns at whim; in some sense it must be creating the reality already described in the declaration.  This is exactly what the automated schema upgrader does -- it declares the end state and then alters the world to get to that state."),Object(i.b)("p",null,"It's important to remember that from CQL's perspective the schema is fixed for any given compilation, so runtime alterations to it are not really part of the type system.  They can't be.  Even ",Object(i.b)("inlineCode",{parentName:"p"},"DROP TABLE")," does not remove the table from type system -- it can't -- the most likely situation is that you are about to recreate that same table again for another iteration with the proc that creates it."),Object(i.b)("p",null,"This particular error is saying that the column you are trying to add does not exist in the declared schema."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0149-added-column-must-be-an-exact-match-for-the-column-type-declared-in-the-table-column_name"},"CQL0149: added column must be an exact match for the column type declared in the table 'column_name'"),Object(i.b)("p",null,"In CQL loose schema is a declaration, it does not actually create anything unless placed inside of a procedure.  A column that is added with ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is not actually declared as part of the schema by the ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER"),".  Rather the schema declaration is expected to include any columns you plan to add.  Normally the way this all happens is that you put ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," notations on a column in the schema and the automatic schema upgrader then creates suitable ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statements to arrange for that column to be added.  If you manually write an ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement it isn't allowed to add columns at whim; in some sense it must be creating the reality already described in the declaration.  This is exactly what the automated schema upgrader does -- it declares the end state and then alters the world to get to that state."),Object(i.b)("p",null,"It's important to remember that from CQL's perspective the schema is fixed for any given compilation, so runtime alterations to it are not really part of the type system.  They can't be.  Even ",Object(i.b)("inlineCode",{parentName:"p"},"DROP TABLE")," does not remove the table from type system -- it can't -- the most likely situation is that you are about to recreate that same table again for another iteration with the proc that creates it."),Object(i.b)("p",null,"This particular error is saying that the column you are trying to add exists in the declared schema, but its definition is different than you have specified in the ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," statement."),Object(i.b)("p",null,"NOTE: ",Object(i.b)("inlineCode",{parentName:"p"},"ALTER TABLE")," is typically not used directly; the automated schema upgrade script generation system uses it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0150-expected-numeric-expression-in-if-predicate"},"CQL0150: expected numeric expression in IF predicate"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"IF")," statement the condition (predicate) must be a numeric.  The body of the ",Object(i.b)("inlineCode",{parentName:"p"},"IF")," runs if the value is not null and not zero."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0151-table-in-delete-statement-does-not-exist-table_name"},"CQL0151: table in delete statement does not exist 'table_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DELETE")," statement, the indicated table does not exist. Probably it's a spelling mistake, or else the table has been marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and may no longer be used in ",Object(i.b)("inlineCode",{parentName:"p"},"DELETE")," statements."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0152-cannot-delete-from-a-view-view_name"},"CQL0152: cannot delete from a view 'view_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DELETE")," statement, the target of the delete must be a table, but the indicated name is a view."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0153-duplicate-target-column-name-in-update-statement-column_name"},"CQL0153: duplicate target column name in update statement 'column_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE")," statement, you can only specify any particular column to update once."),Object(i.b)("p",null,"e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE coordinates set x = 1, x = 3;"),"  will produce this error. ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE coordinates set x = 1, y = 3;")," might be correct."),Object(i.b)("p",null,"This error is most likely caused by a typo or a copy/pasta of the column names, especially if they were written one per line."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0154-table-in-update-statement-does-not-exist-table_name"},"CQL0154: table in update statement does not exist 'table_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE")," statement, the target table does not exist.  Probably it's a spelling mistake, or else the table has been marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and may no longer be used in ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE")," statements."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0155-cannot-update-a-view-view_name"},"CQL0155: cannot update a view 'view_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"UPDATE")," statement, the target of the update must be a table but the name of a view was provided."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0156-seed-expression-must-be-a-non-nullable-integer"},"CQL0156: seed expression must be a non-nullable integer"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement statement supports the notion of synthetically generated values for dummy data purposes.  A 'seed' integer is used to derive the values.  That seed (in the ",Object(i.b)("inlineCode",{parentName:"p"},"@seed()")," position) must be a non-null integer."),Object(i.b)("p",null,"The most common reason for this error is that the seed is an input parameter and it was not declared ",Object(i.b)("inlineCode",{parentName:"p"},"NOT NULL"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0157-count-of-columns-differs-from-count-of-values"},"CQL0157: count of columns differs from count of values"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement of the form ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT INTO foo(a, b, c) VALUES(x, y, z)")," the number of values (x, y, z) must\nbe the same as the number of columns (a, b, c).  Note that there are many reasons you might not have to specify all the columns of the table but whichever columns you do specify should have values."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0158-required-column-missing-in-insert-statement-column_name"},"CQL0158: required column missing in INSERT statement 'column_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement such as ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT INTO foo(a,b,c) VALUES(x,yz)")," this error is indicating that there is a column in ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," (the one indicated in the error) which was not in the list (i.e. not one of a, b, c) and that column is neither nullable, nor does it have a default value.  In order to insert a row a value must be provided.  To fix this include the indicated column in your insert statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0159-cannot-add-an-index-to-a-virtual-table-table_name"},"CQL0159: cannot add an index to a virtual table 'table_name'"),Object(i.b)("p",null,"Adding an index to a virtual table isn't possible, the virtual table includes whatever indexing its module provides, no further indexing is possible."),Object(i.b)("p",null,'From the SQLite documentation: "One cannot create additional indices on a virtual table. (Virtual tables can have indices but that must be built into the virtual table implementation. Indices cannot be added separately using CREATE INDEX statements.)"'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0160-table-in-insert-statement-does-not-exist-table_name"},"CQL0160: table in insert statement does not exist 'table_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement attempting to insert into the indicated table name is not possible because there is no such table.\nThis error might happen because of a typo, or it might happen because the indicated table has been marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," and is logically hidden."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0161-cannot-insert-into-a-view-view_name"},"CQL0161: cannot insert into a view 'view_name'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement attempting to insert into the indicated name is not possible because that name is a view not a table.  Inserting into views is not supported."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0162-cannot-add-a-trigger-to-a-virtual-table-table_name"},"CQL0162: cannot add a trigger to a virtual table 'table_name'"),Object(i.b)("p",null,"Adding a trigger to a virtual table isn't possible."),Object(i.b)("p",null,'From the SQLite documentation: "One cannot create a trigger on a virtual table."'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0163-from-arguments-construct-is-only-valid-inside-a-procedure"},"CQL0163: FROM ARGUMENTS construct is only valid inside a procedure"),Object(i.b)("p",null,"Several statements support the ",Object(i.b)("inlineCode",{parentName:"p"},"FROM ARGUMENTS")," sugar format like ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT INTO foo(a,b,c) FROM ARGUMENTS")," which causes the arguments of the current procedure to be used as the values.  This error is complaining that you have used this form but the statement does not occur inside of a procedure so there can be no arguments.  This form does not make sense outside of any procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0164-cannot-use-alter-table-on-a-virtual-table-table_name"},"CQL0164: cannot use ALTER TABLE on a virtual table 'table_name'"),Object(i.b)("p",null,"This is not supported by SQLite."),Object(i.b)("p",null,'From the SQLite documentation: "One cannot run ALTER TABLE ... ADD COLUMN commands against a virtual table."'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0165-fetch-values-is-only-for-value-cursors-not-for-sqlite-cursors-cursor_name"},"CQL0165: fetch values is only for value cursors, not for sqlite cursors 'cursor_name'"),Object(i.b)("p",null,'Cursors come in two flavors.  There are "statement cursors" which are built from something like this:'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for select * from foo;\nfetch C;\n-- or --\nfetch C into a, b, c;\n")),Object(i.b)("p",null,"That is, they come from a SQLite statement and you can fetch values from that statement.  The second type comes from procedural values like this."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor like my_table;\nfetch C from values(1, 2, 3);\n")),Object(i.b)("p",null,"In the second example ",Object(i.b)("inlineCode",{parentName:"p"},"C"),"'s data type will be the same as the columns in ",Object(i.b)("inlineCode",{parentName:"p"},"my_table")," and we will fetch its values from ",Object(i.b)("inlineCode",{parentName:"p"},"1,2,3")," -- this version has no database backing at all, it's just data."),Object(i.b)("p",null,"This error says that you declared the cursor in the first form (with a SQL statement) but then you tried to fetch it using the second form, the one for data. These forms don't mix.   If you need a value cursor for a row you can copy data from one cursor into another."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0166-count-of-columns-differs-from-count-of-values"},"CQL0166: count of columns differs from count of values"),Object(i.b)("p",null,"In a value cursor, declared something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor like my_table;\nfetch C from values(1, 2, 3);\n")),Object(i.b)("p",null,"The type of the cursor ( in this case from ",Object(i.b)("inlineCode",{parentName:"p"},"my_table"),") requires a certain number of columns, but that doesn't match the number that were provided in the values."),Object(i.b)("p",null,"To fix this you'll need to add/remove values so that the type match."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0167-required-column-missing-in-fetch-statement-column_name"},"CQL0167: required column missing in FETCH statement 'column_name'"),Object(i.b)("p",null,"In a value cursor, declared something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor like my_table;\nfetch C(a,b,c) from values(1, 2, 3);\n")),Object(i.b)("p",null,"This error is saying that there is some other field in the table 'd' and it was not specified in the values.  Nor was there a usable dummy data for that column that could be used.  You need to provide a value for the missing column."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0168-theres-no-good-way-to-generate-dummy-blobs-not-supported-for-now"},"CQL0168: there's no good way to generate dummy blobs; not supported for now"),Object(i.b)("p",null,"In a value cursor with dummy data specified, one of the columns in the cursor is of type blob.  There's no good way to create dummy data for blobs so that isn't supported."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0169-enum-not-found-enum_name"},"CQL0169: enum not found 'enum_name'"),Object(i.b)("p",null,"The indicated name was used in a context where an enumerated type name was expected but there is no such type."),Object(i.b)("p",null,"Perhaps the enum was not included (missing a #include) or else there is a typo."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0170-available-for-re-use"},"CQL0170 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0171-name-not-found-name"},"CQL0171: name not found 'name'"),Object(i.b)("p",null,"In a scoped name list, like the columns of a cursor (for a fetch), or the columns of a particular table (for an index) a name appeared that did not belong to the universe of legal names.  Trying to make a table index using a column that is not in the table would produce this error.  There are many instances where a list of names belongs to some limited scope."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0172-name-list-has-duplicate-name-name"},"CQL0172: name list has duplicate name 'name'"),Object(i.b)("p",null,"In a scoped name list, like the columns of a cursor (for a fetch), or the columns of a particular table (for an index) a name appeared twice in the list where the names must be unique.  Trying to make a table index using the same column twice would produce this error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0173-variable-not-found-variable_name"},"CQL0173: variable not found 'variable_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SET")," statement, the target of the assignment is not a valid variable name in that scope."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0174-cannot-set-a-cursor-cursor_name"},"CQL0174: cannot set a cursor 'cursor_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SET")," statement, the target of the assignment is a cursor variable, you cannot assign to a cursor variable."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0175-duplicate-parameter-name-parameter_name"},"CQL0175: duplicate parameter name 'parameter_name'"),Object(i.b)("p",null,"In a parameter list for a function or a procedure, the named parameter appears more than once.  The formal names for function arguments must be unique."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0176-available-for-re-use"},"CQL0176 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0177-available-for-re-use"},"CQL0177 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0178-proc-has-no-result-like_name"},"CQL0178: proc has no result 'like_name'"),Object(i.b)("p",null,"In an argument list, the ",Object(i.b)("inlineCode",{parentName:"p"},"LIKE")," construct was used to create arguments that are the same as the return type of the named procedure.  However the named procedure does not produce a result set and therefore has no columns to mimic.  Probably the name is wrong."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0179-available-for-re-use"},"CQL0179 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0180-duplicate-column-name-in-result-not-allowed-column_name"},"CQL0180: duplicate column name in result not allowed 'column_name'"),Object(i.b)("p",null,"In a procedure that returns a result either with a loose ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," statement or in a place where the result of a ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," is captured with a ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH")," statement the named column appears twice in the projection of the ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," in question.  The column names must be unique in order to have consistent cursor field names or consistent access functions for the result set of the procedure.  One instance of the named column must be renamed with something like ",Object(i.b)("inlineCode",{parentName:"p"},"select T1.foo first_foo, T2.foo second_foo"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0181-autodrop-temp-table-does-not-exist-name"},"CQL0181: autodrop temp table does not exist 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autodrop")," annotation, the given name is unknown entirely."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0182-autodrop-target-is-not-a-table-name"},"CQL0182: autodrop target is not a table 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autodrop")," annotation, the given name is not a table (it's probably a view)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0183-autodrop-target-must-be-a-temporary-table-name"},"CQL0183: autodrop target must be a temporary table 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autodrop"),' annotation, the given name is a table but it is not a temp table.  The annotation is only valid on temp tables, it\'s not for "durable" tables.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0184-stored-procedures-cannot-be-nested-name"},"CQL0184: stored procedures cannot be nested 'name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE PROCEDURE")," statement may not appear inside of another stored procedure.  The named procedure appears in a nested context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0185-proc-name-conflicts-with-func-name-name"},"CQL0185: proc name conflicts with func name 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE PROCEDURE")," statement, the given name conflicts with an already declared function (",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," or ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE SELECT FUNCTION"),").  You'll have to choose a different name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0186-duplicate-stored-proc-name-name"},"CQL0186: duplicate stored proc name 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE PROCEDURE")," statement, the indicated name already corresponds to a created (not just declared) stored procedure.  You'll have to choose a different name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0187-schema_upgrade_version-not-declared-or-doesnt-match-upgrade-version-n-for-proc-name"},"CQL0187: @schema_upgrade_version not declared or doesn't match upgrade version ",Object(i.b)("inlineCode",{parentName:"h3"},"N")," for proc 'name'"),Object(i.b)("p",null,"The named procedure was declared as a schema migration procedure in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," annotation for schema version ",Object(i.b)("inlineCode",{parentName:"p"},"N"),".  In order to correctly type check such a procedure it must be compiled in the context of schema version ",Object(i.b)("inlineCode",{parentName:"p"},"N"),".  This restriction is required so that the tables and columns the procedure sees are the ones that existed in version ",Object(i.b)("inlineCode",{parentName:"p"},"N")," not the ones that exist in the most recent version as usual."),Object(i.b)("p",null,"To create this condition, the procedure must appear in a file that begins with the line:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"@schema_upgrade_version <N>;\n")),Object(i.b)("p",null,"And this declaration must come before any ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," statements.  If there is no such declaration, or if it is for the wrong version, then this error will be generated."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0188-procedure-is-supposed-to-do-schema-migration-but-it-doesnt-have-any-dml-name"},"CQL0188: procedure is supposed to do schema migration but it doesn't have any DML 'name'"),Object(i.b)("p",null,"The named procedure was declared as a schema migration procedure in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," annotation, however the procedure does not have any DML in it.  That can't be right.  Some kind of data reading and writing is necessary."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0189-procedure-declarationsdefinitions-do-not-match-name"},"CQL0189: procedure declarations/definitions do not match 'name'"),Object(i.b)("p",null,"The named procedure was previously declared with a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE")," statement but when the ",Object(i.b)("inlineCode",{parentName:"p"},"CREATE PROCEDURE")," was encountered, it did not match the previous declaration."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0190-duplicate-column-name-name"},"CQL0190: duplicate column name 'name'"),Object(i.b)("p",null,"In a context with a typed name list (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"id integer, t text"),") the named column occurs twice.  Typed name lists happen in many contexts, but a common one is the type of the result in a declared procedure statement or declared function statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0191-declared-functions-must-be-top-level-function_name"},"CQL0191: declared functions must be top level 'function_name'"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," statement for the named function is happening inside of a procedure.  This is not legal.  To correct this move the declaration outside of the procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0192-func-name-conflicts-with-proc-name-name"},"CQL0192: func name conflicts with proc name 'name'"),Object(i.b)("p",null,"The named function in a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," statement conflicts with an existing declared or created procedure.  One or the other must be renamed to resolve this issue."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0193-duplicate-function-name-name"},"CQL0193: duplicate function name 'name'"),Object(i.b)("p",null,"The named function in a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," statement conflicts with an existing declared function, or it was declared twice.  One or the other declaration must be renamed or removed to resolve this issue."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0194-declared-procedures-must-be-top-level-name"},"CQL0194: declared procedures must be top level 'name'"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE")," statement for the named procedure is itself happening inside of a procedure.  This is not legal.  To correct this move the declaration outside of the procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0195-proc-name-conflicts-with-func-name-name"},"CQL0195: proc name conflicts with func name 'name'"),Object(i.b)("p",null,"The named procedure in a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE")," statement conflicts with an existing declared function.  One or the other declaration must be renamed or removed to resolve this issue."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0196-procedure-declarationsdefinitions-do-not-match-name"},"CQL0196: procedure declarations/definitions do not match 'name'"),Object(i.b)("p",null,"The named procedure was previously declared with a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE")," statement.  Now there is another declaration and it does not match the previous declaration"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0197-duplicate-variable-name-in-the-same-scope-name"},"CQL0197: duplicate variable name in the same scope 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE")," statement, a variable of the same name already exists in that scope.  Note that CQL does not have block level scope, all variables are procedure level, so they are in scope until the end of the procedure.  To resolve this problem, either re-use the old variable if appropriate or rename the new variable."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0198-global-variable-hides-tableview-name-name"},"CQL0198: global variable hides table/view name 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE")," statement, the named variable is a global (declared outside of any procedure) and has the same name as a table or view.  This creates a lot of confusion and is therefore disallowed.  To correct the problem, rename the variable.  Global variables generally are problematic, but sometimes necessary."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0199-cursor-requires-a-procedure-that-returns-a-result-set-via-select-proc_name"},"CQL0199: cursor requires a procedure that returns a result set via select 'proc_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE")," statement that declares a ",Object(i.b)("inlineCode",{parentName:"p"},"CURSOR FOR CALL")," the procedure that is being called does not produce a result set with the ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," statement.  As it has no row results it is meaningless to try to put a cursor on it.  Probably the error is due to a copy/pasta of the procedure name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0200-variable-is-not-a-cursor-another_cursor"},"CQL0200: variable is not a cursor 'another_cursor'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE")," statement that declares a ",Object(i.b)("inlineCode",{parentName:"p"},"CURSOR LIKE")," another cursor, the indicated name is a variable but it is not a cursor, so we cannot make another cursor like it.  Probably the error is due to a typo in the 'like_name'."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0201-expanding-from-arguments-there-is-no-argument-matching-required_arg"},"CQL0201: expanding FROM ARGUMENTS, there is no argument matching 'required_arg'"),Object(i.b)("p",null,"In an ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," or ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH")," statment using the form ",Object(i.b)("inlineCode",{parentName:"p"},"FROM ARGUMENTS(LIKE [name])"),"\nThe shape ",Object(i.b)("inlineCode",{parentName:"p"},"[name]")," had columns that did not appear in as arguments to the current procedure.\nMaybe arguments are missing or maybe the name in the ",Object(i.b)("inlineCode",{parentName:"p"},"like")," part is the wrong name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0202-must-be-a-cursor-proc-table-or-view-like_name"},"CQL0202: must be a cursor, proc, table, or view 'like_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE")," statement that declares a ",Object(i.b)("inlineCode",{parentName:"p"},"CURSOR LIKE")," some other name, the indicated name is not the name of any of the things that might have a valid shape to copy, like other cursors, procedures, tables, or views.  Probably there is a typo in the name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0203-cursor-requires-a-procedure-that-returns-a-cursor-with-out-cursor_name"},"CQL0203: cursor requires a procedure that returns a cursor with OUT 'cursor_name'"),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE [cursor_name] CURSOR FETCH FROM CALL <something>")," form, the code is trying to create the named cursor by calling a procedure that doesn't actually produce a single row result set with the ",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," statement.  The procedure is valid (that would be a different error) so it's likely that the wrong procedure is being called rather than being an outright typo.  Or perhaps the procedure was changed such that it no longer produces a single row result set."),Object(i.b)("p",null,"This form is equivalent to:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"DECLARE [cursor_name] LIKE procedure;\nFETCH [cursor_name] FROM CALL procedure(args);\n")),Object(i.b)("p",null,"It's the declaration that's failing here, not the call."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0204-cursor-not-found-name"},"CQL0204: cursor not found 'name'"),Object(i.b)("p",null,"The indicated name appeared in a context where a cursor name was expected, but that name does not correspond to any variable at all.  Probably there is a typo here."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0205-variable-is-not-a-cursor-name"},"CQL0205: variable is not a cursor 'name'"),Object(i.b)("p",null,"The indicated name appeared in a context where a cursor name was expected. There is a variable of that name but it is not a cursor.  Probably there is a copy/pasta type error here."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0206-duplicate-name-in-list-name"},"CQL0206: duplicate name in list 'name'"),Object(i.b)("p",null,"There are many contexts where a list of names appears in the CQL grammar and the list must not contain duplicate names.  Some examples are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the column names in a ",Object(i.b)("inlineCode",{parentName:"li"},"JOIN ... USING(x,y,z,...)")," clause"),Object(i.b)("li",{parentName:"ul"},"the fetched variables in a ",Object(i.b)("inlineCode",{parentName:"li"},"FETCH [cursor] INTO x,y,z...")," statement"),Object(i.b)("li",{parentName:"ul"},"the column names listed in a common table expression ",Object(i.b)("inlineCode",{parentName:"li"},"CTE(x,y,z,...) as (SELECT ...)")),Object(i.b)("li",{parentName:"ul"},"the antecedent schema region names in ",Object(i.b)("inlineCode",{parentName:"li"},"@declare_schema_region <name> USING x,y,z,..."))),Object(i.b)("p",null,"The indicated name was duplicated in such a context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0207-proc-out-parameter-formal-cannot-be-fulfilled-by-non-variable-param_name"},"CQL0207: proc out parameter: formal cannot be fulfilled by non-variable 'param_name'"),Object(i.b)("p",null,"In a procedure call, the indicated parameter of the procedure is an OUT or INOUT parameter but the call site doesn't have a variable in that position in the argument list."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare proc foo(out x integer);\n\n-- the constant 1 cannot be used in the out position when calling foo\ncall foo(1); '\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0208-available-for-re-use"},"CQL0208 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0209-proc-out-parameter-arg-must-be-an-exact-type-match-expected-expected_type-found-actual_type-param_name"},"CQL0209: proc out parameter: arg must be an exact type match (expected expected_type; found actual_type) 'param_name'"),Object(i.b)("p",null,"In a procedure call, the indicated parameter is in an 'out' position, it is a viable local variable but it is not an exact type match for the parameter.  The type of variable used to capture out parameters must be an exact match."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare proc foo(out x integer);\n\ncreate proc bar(out y real)\nbegin\n  call foo(y); -- y is a real variable, not an integer.\nend;\n")),Object(i.b)("p",null,"The above produces:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"CQL0209: proc out parameter: arg must be an exact type match\n(expected integer; found real) 'y'\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0210-proc-out-parameter-arg-must-be-an-exact-type-match-even-nullability"},"CQL0210: proc out parameter: arg must be an exact type match (even nullability)"),Object(i.b)("p",null,"(expected expected_type; found actual_type) 'variable_name'"),Object(i.b)("p",null,"In a procedure call, the indicated parameter is in an 'out' position, it is a viable local variable of the correct type but the nullability does not match.  The type of variable used to capture out parameters must be an exact match."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare proc foo(out x integer not null);\n\ncreate proc bar(out y integer)\nbegin\n  call foo(y); -- y is nullable but foo is expecting not null.\nend;\n")),Object(i.b)("p",null,"The above produces:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"CQL0210: proc out parameter: arg must be an exact type match (even nullability)\n(expected integer notnull; found integer) 'y'\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0211-last-formal-arg-of-procedure-is-not-an-out-arg-cannot-use-proc-as-a-function-name"},"CQL0211: last formal arg of procedure is not an out arg, cannot use proc as a function 'name'"),Object(i.b)("p",null,"In a function call, the target of the function call was a procedure, procedures can be used like functions but their last parameter must be marked ",Object(i.b)("inlineCode",{parentName:"p"},"out"),". That will be the return value.  In this case the last argument was not marked as ",Object(i.b)("inlineCode",{parentName:"p"},"out")," and so the call is invalid."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare proc foo(x integer);\n\ncreate proc bar(out y integer)\nbegin\n  set y := foo(); -- foo does not have an out argument at the end\nend;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0212-too-few-arguments-provided-to-procedure-name"},"CQL0212: too few arguments provided to procedure 'name'"),Object(i.b)("p",null,"In a procedure call to the named procedure, not enough arguments were provided to make the call.  One or more arguments may have been omitted or perhaps the called procedure has changed such that it now requires more arguments."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0213-procedure-had-errors-cant-call-proc_name"},"CQL0213: procedure had errors, can't call. 'proc_name'"),Object(i.b)("p",null,"In a procedure call to the named procedure, the target of the call had compilation errors.  As a consequence this call cannot be checked and therefore must be marked in error, too.  Fix the errors in the named procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0214-procedures-with-results-can-only-be-called-using-a-cursor-in-global-context-name"},"CQL0214: procedures with results can only be called using a cursor in global context 'name'"),Object(i.b)("p",null,"The named procedure results a result set, either with the ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," statement or the ",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," statement.  However it is being called from outside of any procedure.  Because of this, its result cannot then be returned anywhere.  As a result, at the global level the result must be capture with a cursor."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create proc foo()\nbegin\n  select * from bar;\nend;\n\ncall foo();  -- this is not valid\ndeclare cursor C for call foo();  -- C captures the result of foo, this is ok.\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0215-value-cursors-are-not-used-with-fetch-c-or-fetch-c-into-cursor_name"},"CQL0215: value cursors are not used with FETCH C, or FETCH C INTO 'cursor_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH")," statement of the form ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH [cursor]")," or ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH [cursor] INTO")," the named cursor\nis a value cursor.  These forms of the ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH")," statement apply only to statement cursors."),Object(i.b)("p",null,"Example:good"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"-- value cursor shaped like a table\ndeclare C cursor for select * from bar;\n--ok, C is fetched from the select results\nfetch C;\n")),Object(i.b)("p",null,"Example: bad"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"-- value cursor shaped like a table\ndeclare C cursor like bar;\n-- invalid, there is no source for fetching a value cursor\nfetch C;\n-- ok assuming bar is made up of 3 integers\nfetch C from values(1,2,3);\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"statement cursors come from SQL statements and can be fetched"),Object(i.b)("li",{parentName:"ul"},"value cursors are of a prescribed shape and can only be loaded from value sources")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0216-fetch-variable-not-found-cursor_name"},"CQL0216: FETCH variable not found 'cursor_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH")," statement,  the indicated name, which is supposed to be a cursor, is not in fact a valid name at all."),Object(i.b)("p",null,"Probably there is a typo in the name.  Or else the declaration is entirely missing."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0217-number-of-variables-did-not-match-count-of-columns-in-cursor-cursor_name"},"CQL0217: number of variables did not match count of columns in cursor 'cursor_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH [cursor] INTO [variables]")," the number of variables specified did not match the number of columns in the named cursor.  Perhaps the source of the cursor (a select statement or some such) has changed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0218-continue-must-be-inside-of-a-loop-or-while-statement"},"CQL0218: continue must be inside of a 'loop' or 'while' statement"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"CONTINUE")," statement may only appear inside of looping constructs.  CQL only has two ",Object(i.b)("inlineCode",{parentName:"p"},"LOOP FETCH ...")," and ",Object(i.b)("inlineCode",{parentName:"p"},"WHILE")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0219-leave-must-be-inside-of-a-loop-while-or-switch-statement"},"CQL0219: leave must be inside of a 'loop', 'while', or 'switch' statement"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"LEAVE")," statement may only appear inside of looping constructs or the switch statement."),Object(i.b)("p",null,"CQL has two loop types: ",Object(i.b)("inlineCode",{parentName:"p"},"LOOP FETCH ...")," and ",Object(i.b)("inlineCode",{parentName:"p"},"WHILE")," and of course the ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement."),Object(i.b)("p",null,"The errant ",Object(i.b)("inlineCode",{parentName:"p"},"LEAVE")," statement is not in any of those."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0220-savepoint-has-not-been-mentioned-yet-probably-wrong-name"},"CQL0220: savepoint has not been mentioned yet, probably wrong 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"ROLLBACK")," statement that is rolling back to a named savepoint, the indicated savepoint was never mentioned before.  It should have appeared previously in a ",Object(i.b)("inlineCode",{parentName:"p"},"SAVEPOINT")," statement.  This probably means there is a typo in the name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0221-savepoint-has-not-been-mentioned-yet-probably-wrong-name"},"CQL0221: savepoint has not been mentioned yet, probably wrong 'name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"RELEASE SAVEPOINT")," statement that is rolling back to a named savepoint, the indicated savepoint was never mentioned before.  It should have appeared previously in a ",Object(i.b)("inlineCode",{parentName:"p"},"SAVEPOINT")," statement.  This probably means there is a typo in the name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0222-the-out-cursor-statement-only-makes-sense-inside-of-a-procedure"},"CQL0222: the out cursor statement only makes sense inside of a procedure"),Object(i.b)("p",null,"The statement form ",Object(i.b)("inlineCode",{parentName:"p"},"OUT [cursor_name]")," makes a procedure that returns a single row result set.  It doesn't make any\nsense to do this outside of any procedure because there is no procedure to return that result.  Perhaps the ",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," statement was mis-placed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0223-the-cursor-was-not-fetched-with-the-auto-fetch-syntax-fetch-cursor-cursor_name"},"CQL0223: the cursor was not fetched with the auto-fetch syntax 'fetch ","[cursor]","' 'cursor_name'"),Object(i.b)("p",null,"The statement form ",Object(i.b)("inlineCode",{parentName:"p"},"OUT [cursor_name]")," makes a procedure that returns a single row result set that corresponds to the current value of the cursor.  If the cursor never held values directly then there is nothing to return."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for select * from bar;\nout C;  -- error C was never fetched\n\ndeclare C cursor for select * from bar;\nfetch C into x, y, z;\n-- error C was used to load x, y, z so it's not holding any data\nout C;\n\ndeclare C cursor for select * from bar;\n-- create storage in C to hold bar columns (e.g. C.x, C,y, C.z)\nfetch C;\n-- ok, C holds data\nout C;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0224-available-for-re-use"},"CQL0224 available for re-use"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0225-switching-to-previous-schema-validation-mode-must-be-outside-of-any-proc"},"CQL0225: switching to previous schema validation mode must be outside of any proc"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@previous_schema")," directive says that any schema that follows should be compared against what was declared before this point.  This gives CQL the opportunity to detect changes in schema that are not supportable."),Object(i.b)("p",null,"The previous schema directive must be outside of any stored procedure."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"@previous_schema;  -- ok here\n\ncreate proc foo()\nbegin\n  @previous schema; -- nope\nend;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0226-schema-upgrade-declaration-must-be-outside-of-any-proc"},"CQL0226: schema upgrade declaration must be outside of any proc"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_script")," directive tells CQL that the code that follows is intended to upgrade schema from one version to another.  This kind of script is normally generated by the ",Object(i.b)("inlineCode",{parentName:"p"},"--rt schema_upgrade")," option discussed elsewhere.  When processing such a script, a different set of rules are used for DDL analysis.  In particular, it's normal to declare the final versions of tables but have DDL that creates the original version and more DDL to upgrade them from wherever they are to the final version (as declared).  Ordinarily these duplicate definitions would produce errors.  This directive allows those duplications."),Object(i.b)("p",null,"This error is reporting that the directive happened inside of a stored procedure, this is not allowed."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"@schema_upgrade_script;  -- ok here\n\ncreate proc foo()\nbegin\n  @schema_upgrade_script; -- nope\nend;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0227-schema-upgrade-declaration-must-come-before-any-tables-are-declared"},"CQL0227: schema upgrade declaration must come before any tables are declared"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_script")," directive tells CQL that the code that follows is intended to upgrade schema from one version to another.  This kind of script is normally generated by the ",Object(i.b)("inlineCode",{parentName:"p"},"--rt schema_upgrade")," option discussed elsewhere.  When processing such a script, a different set of rules are used for DDL analysis.  In particular, it's normal to declare the final versions of tables but have DDL that creates the original version and more DDL to upgrade them from wherever they are to the final version (as declared).  Ordinarily these duplicate definitions would produce errors.  This directive allows those duplications."),Object(i.b)("p",null,"In order to do its job properly the directive must come before any tables are created with DDL.  This error tells you that the directive came too late in the stream. Or perhaps there were two such directives and one is late in the stream."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0228-schema-upgrade-version-must-be-a-positive-integer"},"CQL0228: schema upgrade version must be a positive integer"),Object(i.b)("p",null,"When authoring a schema migration procedure that was previously declared in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," directive, the code in that procedure expects to see the schema as it existed at the version it is to migrate.  The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive allows you to set the visible schema version to something other than the latest. There can only be one such directive."),Object(i.b)("p",null,"This error says that the version you are trying to view is not a positive integer version (e.g version -2)"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0229-schema-upgrade-version-declaration-may-only-appear-once"},"CQL0229: schema upgrade version declaration may only appear once"),Object(i.b)("p",null,"When authoring a schema migration procedure that was previously declared in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," directive, the code in that procedure expects to see the schema as it existed at the version it is to migrate.  The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive allows you to set the visible schema version to something other than the latest.  There can only be one such directive."),Object(i.b)("p",null,"This error says that a second ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive has been found."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0230-schema-upgrade-version-declaration-must-be-outside-of-any-proc"},"CQL0230: schema upgrade version declaration must be outside of any proc"),Object(i.b)("p",null,"When authoring a schema migration procedure that was previously declared in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," directive, the code in that procedure expects to see the schema as it existed at the version it is to migrate.  The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive allows you to set the visible schema version to something other than the latest.  There can only be one such directive."),Object(i.b)("p",null,"This error says that the ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive was found inside of a stored procedure.  This is not allowed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0231-schema-upgrade-version-declaration-must-come-before-any-tables-are-declared"},"CQL0231: schema upgrade version declaration must come before any tables are declared"),Object(i.b)("p",null,"When authoring a schema migration procedure that was previously declared in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," directive, the code in that procedure expects to see the schema as it existed at the version it is to migrate.  The ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive allows you to set the visible schema version to something other than the latest.  There can only be one such directive."),Object(i.b)("p",null,"This error says that the ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_version")," directive came after tables were already declared.  This is not allowed, the directive must come before any DDL."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0232-nested-select-expression-must-return-exactly-one-column"},"CQL0232: nested select expression must return exactly one column"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," expression like ",Object(i.b)("inlineCode",{parentName:"p"},"set x := (select id from bar)")," the select statement must return exactly one column as in the example provided.  Note that a runtime error will ensue if the statement returns zero rows, or more than one row,  so this form is very limited.  To fix this error change your select statement to return exactly one column.  Consider how many rows you will get very carefully also, that cannot be checked at compile time."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0233-procedure-previously-declared-as-schema-upgrade-proc-it-can-have-no-args-proc_name"},"CQL0233: procedure previously declared as schema upgrade proc, it can have no args 'proc_name'"),Object(i.b)("p",null,"When authoring a schema migration procedure that was previously declared in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," directive that procedure will be called during schema migration with no context available.  Therefore, the schema migration proc is not allowed to have any arguments."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0234-autodrop-annotation-can-only-go-on-a-procedure-that-returns-a-result-set-proc_name"},"CQL0234: autodrop annotation can only go on a procedure that returns a result set 'proc_name'"),Object(i.b)("p",null,"The named procedure has the ",Object(i.b)("inlineCode",{parentName:"p"},"autodrop")," annotation (to automatically drop a temporary table) but the procedure in question doesn't return a result set so it has no need of the autodrop feature.  The purpose that that feature is to drop the indicated temporary tables once all the select results have been fetched."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0235-too-many-arguments-provided-to-procedure-proc_name"},"CQL0235: too many arguments provided to procedure 'proc_name'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"CALL")," statement, or a function call, the named procedure takes fewer arguments than were provided. This error might be due to some copy/pasta going on or perhaps the argument list of the procedure/function changed to fewer items.\nTo fix this, consult the argument list and adjust the call accordingly."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0236-autodrop-annotation-can-only-go-on-a-procedure-that-uses-the-database-name"},"CQL0236: autodrop annotation can only go on a procedure that uses the database 'name'"),Object(i.b)("p",null,"The named procedure has the ",Object(i.b)("inlineCode",{parentName:"p"},"autodrop")," annotation (to automatically drop a temporary table) but the procedure in question doesn't even use the database at all, much less the named table.  This annotation is therefore redundant."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0237-strict-fk-validation-requires-that-some-on-update-option-be-selected-for-every-foreign-key"},"CQL0237: strict FK validation requires that some ON UPDATE option be selected for every foreign key"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict")," has been use to enable strict foreign key enforcement.  When enabled every foreign key must have an action for the ",Object(i.b)("inlineCode",{parentName:"p"},"ON UPDATE")," rule.  You can specify ",Object(i.b)("inlineCode",{parentName:"p"},"NO ACTION")," but you can't simply leave the action blank."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0238-strict-fk-validation-requires-that-some-on-delete-option-be-selected-for-every-foreign-key"},"CQL0238: strict FK validation requires that some ON DELETE option be selected for every foreign key"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict")," has been use to enable strict foreign key enforcement.  When enabled every foreign key must have an action for the ",Object(i.b)("inlineCode",{parentName:"p"},"ON DELETE")," rule.  You can specify ",Object(i.b)("inlineCode",{parentName:"p"},"NO ACTION")," but you can't simply leave the action blank."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0239-annotation-column-does-not-exist-in-result-set-column_name"},"CQL0239: 'annotation' column does not exist in result set 'column_name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:identity=(col1, col2, ...))")," form has been used to list the identity columns of a stored procedures result set.  These columns must exist in the result set and they must be unique.  The indicated column name is not part of the result of the procedure that is being annotated."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:vault_sensitive=(col1, col2, ...)")," form has been used to list the columns of a stored procedures\nresult set. These columns must exist in the result set. The indicated column name will be encoded if they are sensitive\nand the cursor that produced the result_set is a DML."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0240-identity-annotation-can-only-go-on-a-procedure-that-returns-a-result-set-proc_name"},"CQL0240: identity annotation can only go on a procedure that returns a result set 'proc_name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:identity=(col1, col2,...))")," form has been used to list the identity columns of a stored procedures result set.  These columns must exist in the result set and they must be unique.  In this case, the named procedure doesn't even return a result set.  Probably there is a copy/pasta going on.  The identity attribute can likely be removed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0241-concat-may-only-appear-in-the-context-of-sql-statement"},"CQL0241: CONCAT may only appear in the context of SQL statement"),Object(i.b)("p",null,"The SQLite ",Object(i.b)("inlineCode",{parentName:"p"},"||")," operator has complex string conversion rules making it impossible to faithfully emulate.  Since there is no helper function for doing concatenations, CQL choses to support this operator only in contexts where it will be evaluated by SQLite.  That is, inside of some SQL statement."),Object(i.b)("p",null,"Examples:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare X text;\n\nset X := 'foo' || 'bar';   -- error\n\nset X := (select 'foo' || 'bar');  -- ok\n")),Object(i.b)("p",null,"If concatenation is required in some non-sql context, use the ",Object(i.b)("inlineCode",{parentName:"p"},"(select ..)")," expression form to let SQLite do the evaluation."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0242-lossy-conversion-from-type-type"},"CQL0242: lossy conversion from type 'type'"),Object(i.b)("p",null,"There is an explicit (",Object(i.b)("inlineCode",{parentName:"p"},"set x := y"),") or implicit assignment (e.g. conversion of a parameter) where the storage for the\ntarget is a smaller numeric type than the expression that is being stored.   This usually means a variable that should\nhave been declared ",Object(i.b)("inlineCode",{parentName:"p"},"LONG")," is instead declared ",Object(i.b)("inlineCode",{parentName:"p"},"INTEGER")," or that you are typing to pass a LONG to a procedure that expects an ",Object(i.b)("inlineCode",{parentName:"p"},"INTEGER")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0243-blob-operand-must-be-converted-to-string-first-in-"},"CQL0243: blob operand must be converted to string first in '||'"),Object(i.b)("p",null,"We explicitly do not wish to support string concatenation for blobs that holds non-string data. If the blob contains string data, make your intent clear by converting it to string first using ",Object(i.b)("inlineCode",{parentName:"p"},"CAST")," before doing the concatenation."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0244-unknown-schema-region-region"},"CQL0244: unknown schema region 'region'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"@declare_schema_region")," statement one of the USING regions is not a valid region name.  Or in ",Object(i.b)("inlineCode",{parentName:"p"},"@begin_schema_region")," the region name is not valid.  This probably means there is a typo in your code."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0245-schema-region-already-defined-region"},"CQL0245: schema region already defined 'region'"),Object(i.b)("p",null,"The indicated region was previously defined, it cannot be redefined."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0246-schema-regions-do-not-nest-end-the-current-region-before-starting-a-new-one"},"CQL0246: schema regions do not nest; end the current region before starting a new one"),Object(i.b)("p",null,"Another ",Object(i.b)("inlineCode",{parentName:"p"},"@begin_schema_region")," directive was encountered before the previous ",Object(i.b)("inlineCode",{parentName:"p"},"@end_schema_region")," was found."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0247-you-must-begin-a-schema-region-before-you-can-end-one"},"CQL0247: you must begin a schema region before you can end one"),Object(i.b)("p",null,"An ",Object(i.b)("inlineCode",{parentName:"p"},"@end_schema_region")," directive was encountered but there was no corresponding ",Object(i.b)("inlineCode",{parentName:"p"},"@begin_schema_region")," directive."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0248-schema-region-directives-may-not-appear-inside-of-a-procedure"},"CQL0248: schema region directives may not appear inside of a procedure"),Object(i.b)("p",null,"All of the ",Object(i.b)("inlineCode",{parentName:"p"},"*_schema_region")," directives must be used at the top level of your program, where tables are typically declared.  They do not belong inside of procedures.  If you get this error, move the directive out of the procedure near the DDL that it affects."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0249-function-is-not-a-table-valued-function-function_name"},"CQL0249: function is not a table-valued-function 'function_name'"),Object(i.b)("p",null,"The indicated identifier appears in the context of a table, it is a function, but it is not a table-valued function.  Either the declaration is wrong (use  something like ",Object(i.b)("inlineCode",{parentName:"p"},"declare select function foo(arg text) (id integer, t text)"),") or the name is wrong.  Or both."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0250-table-valued-function-not-declared-function_name"},"CQL0250: table-valued function not declared 'function_name'"),Object(i.b)("p",null,"In a select statement, there is a reference to the indicated table-valued-function.  For instance:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"-- the above error happens if my_function has not been declared\n-- as a table valued function\nselect * from my_function(1,2,3);\n")),Object(i.b)("p",null,"However , ",Object(i.b)("inlineCode",{parentName:"p"},"my_function")," has not been declared as a function at all.  A correct declaration might look like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare select function my_function(a int, b int, c int)\n                                   (x int, y text);\n")),Object(i.b)("p",null,"Either there is a typo in the name or the declaration is missing, or both..."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0251-fragment-must-end-with-exactly-select--from-cte"},"CQL0251: fragment must end with exactly 'SELECT * FROM CTE'"),Object(i.b)("p",null,"Query fragments have an exact prescription for their shape.  This prescription includes ",Object(i.b)("inlineCode",{parentName:"p"},"select * from CTE")," as the final query where CTE is the common table expression that they define.  This the error message includes the specific name that is required in this context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0252-proc-literal-can-only-appear-inside-of-procedures"},"CQL0252: @PROC literal can only appear inside of procedures"),Object(i.b)("p",null,"An @PROC literal was used outside of any procedure.  It cannot be resolved if it isn't inside a procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0253-base-fragment-must-have-only-a-single-cte-named-the-same-as-the-fragment-name"},"CQL0253: base fragment must have only a single CTE named the same as the fragment 'name'"),Object(i.b)("p",null,"Query fragments have an exact prescription for their shape.  This prescription includes  ",Object(i.b)("inlineCode",{parentName:"p"},"select * from CTE")," where CTE is the single common table expression with the same name as the base query."),Object(i.b)("p",null,"This error says that the final select came from something other than the single CTE that is the base name or there was more than one CTE in the fragment."),Object(i.b)("p",null,"You can also get this error if you have an extension fragment but you accidentally marked it as a base fragment."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0254-switching-to-previous-schema-validation-mode-not-allowed-if-schema_upgrade_version-was-used"},"CQL0254: switching to previous schema validation mode not allowed if ",Object(i.b)("inlineCode",{parentName:"h3"},"@schema_upgrade_version")," was used"),Object(i.b)("p",null,"When authoring a schema migration script (a stored proc named in an ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," annotation) you must create that procedure in a file that is marked with ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_upgrade_verison")," specifying the schema version it is upgrading.  If you do this, then the proc (correctly) only sees the schema as it existed at that version.  However that makes the schema unsuitable for analysis using ",Object(i.b)("inlineCode",{parentName:"p"},"@previous_schema")," because it could be arbitrarily far in the past.  This error prevents you from combining those features.  Previous schema validation should only happen against the current schema."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0255-fragment-name-is-not-a-previously-declared-base-fragment-bad_fragment_name"},"CQL0255: fragment name is not a previously declared base fragment 'bad_fragment_name'"),Object(i.b)("p",null,"In an extension or assembly fragment declaration, the specified base fragment name has not been previously defined and that is not allowed."),Object(i.b)("p",null,"Probably there is a typo, or the declarations are in the wrong order. The base fragment has to come first."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0256-fragment-name-conflicts-with-existing-base-fragment-name"},"CQL0256: fragment name conflicts with existing base fragment 'NAME'"),Object(i.b)("p",null,"Extension query fragment can only be created with a custom procedure name different from all existing base fragment names otherwise we throw this error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0257-argument-must-be-a-string-or-numeric-in-function"},"CQL0257: argument must be a string or numeric in 'function'"),Object(i.b)("p",null,"The indicated function (usually min or max) only works on strings and numerics.  ",Object(i.b)("inlineCode",{parentName:"p"},"NULL")," literals, blobs, or objects\nare not allowed in this context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0258-extension-fragment-must-add-exactly-one-cte-found-extra-named-name"},"CQL0258: extension fragment must add exactly one CTE; found extra named 'name'"),Object(i.b)("p",null,"The extension fragment includes more than one additional CTE, it must have exactly one."),Object(i.b)("p",null,"In the following example, ",Object(i.b)("inlineCode",{parentName:"p"},"ext2")," is not valid,  you have to stop at ",Object(i.b)("inlineCode",{parentName:"p"},"ext1")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},'-- example bad extension fragment\n@attribute(cql:extension_fragment=core)\ncreate proc test_bad_extension_fragment_three()\nbegin\n  with\n    core(x,y,z) as (select 1,nullable("a"),nullable(3L)),\n    ext1(x,y,z,a) as (select core.*, extra1.* from core left outer join extra1),\n    ext2(x,y,z,b) as (select core.*, extra2.* from core left outer join extra2)\n  select * from ext2;\nend;\n')),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0259-extension-fragment-cte-must-select-t-from-base-cte"},"CQL0259: extension fragment CTE must select T.* from base CTE"),Object(i.b)("p",null,"For the select expression in extension fragment, it must include all columns from the base table. This error indicates the select expression doesn't select from the base table. It should look like this"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select core.*, ... from core\n")),Object(i.b)("p",null,"Here core is the name of its base table."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0260-extension-fragment-cte-must-be-a-simple-left-outer-join-from-table_name"},"CQL0260: extension fragment CTE must be a simple left outer join from 'table_name'"),Object(i.b)("p",null,"Extension fragments may add columns to the result, to do this without lose any rows you must always left outer join to the new data that you with to include.  There is a specific prescription for this.  It has\nto look like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},'@attribute(cql:extension_fragment=core)\ncreate proc an_extension()\nbegin\n  with\n    core(x,y,z) as (select 1,nullable("a"),nullable(3L)),\n    ext1(x,y,z,a) as (select core.*, extra_column from core left outer join extra_stuff),\n  select * from ext1;\nend;\n')),Object(i.b)("p",null,"Here extension ",Object(i.b)("inlineCode",{parentName:"p"},"ext1")," is adding ",Object(i.b)("inlineCode",{parentName:"p"},"extra_column")," which came from ",Object(i.b)("inlineCode",{parentName:"p"},"extra_stuff"),".  There could have\nbeen any desired join condition or indeed any join expression at all but it has to begin with ",Object(i.b)("inlineCode",{parentName:"p"},"from core left outer join")," so that all the core columns will be present and now rows can be removed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0261-the-cursor-did-not-originate-from-a-sqlite-statement-it-only-has-values-cursor_name"},"CQL0261: the cursor did not originate from a SQLite statement, it only has values 'cursor_name'"),Object(i.b)("p",null,"The form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"  SET [name] FROM CURSOR [cursor_name]\n")),Object(i.b)("p",null,'Is used to wrap a cursor in an object so that it can be returned for forwarded.  This is the so-called "boxing" operation\non the cursor.  The object can then be "unboxed" later to make a cursor again.  However the point of this is to\nkeep reading forward on the cursor perhaps in another procedure.  You can only read forward on a cursor that\nhas an associated SQLite statement.  That is the cursor was created with something like this'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"  DECLARE [name] CURSOR FOR SELECT ... | CALL ...\n")),Object(i.b)("p",null,"If the cursor isn't of this form it's just values, you can't move it forward and so \"boxing\" it is of no value.  Hence not allowed.\nYou can return the cursor values with ",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," instead."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0262-like--arguments-used-on-a-procedure-with-no-arguments-procedure_name"},"CQL0262: LIKE ... ARGUMENTS used on a procedure with no arguments 'procedure_name'"),Object(i.b)("p",null,"The LIKE ","[procedure]"," ARGUMENTS form creates a shape for use in a cursor or procedure arguments."),Object(i.b)("p",null,"The indicated name is a procedure with no arguments so it cannot be used to make a shape."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0263-non-ansi-joins-are-forbidden-if-strict-join-mode-is-enabled"},"CQL0263: non-ANSI joins are forbidden if strict join mode is enabled."),Object(i.b)("p",null,"You can enable strict enforcement of joins to avoid the form"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from A, B;\n")),Object(i.b)("p",null,"which sometimes confuses people (the above is exactly the same as"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from A inner join B on 1;\n")),Object(i.b)("p",null,"Usually there are constraints on the join also in the WHERE clause but there don't have to be."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict join")," turns on this mode."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0264-duplicate-assembly-fragments-of-base-fragment"},"CQL0264: duplicate assembly fragments of base fragment"),Object(i.b)("p",null,"For each base fragment, it only allows to exist one assembly fragment of that base fragment."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0265-assembly-fragment-can-only-have-one-cte"},"CQL0265: assembly fragment can only have one CTE"),Object(i.b)("p",null,"Assembly fragment can only have one base table CTE."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0266-extension-fragment-name-conflicts-with-existing-fragment"},"CQL0266: extension fragment name conflicts with existing fragment"),Object(i.b)("p",null,"Two or more extension fragments share the same name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0267-extension-fragments-of-same-base-fragment-share-the-same-cte-column"},"CQL0267: extension fragments of same base fragment share the same cte column"),Object(i.b)("p",null,"Two or more extension fragments which have the same base fragments share the same name for one of their unique columns. E.g. the base table is ",Object(i.b)("inlineCode",{parentName:"p"},"core(x,y)")," and one extension table is ",Object(i.b)("inlineCode",{parentName:"p"},"plugin_one(x,y,z)")," and antoher is ",Object(i.b)("inlineCode",{parentName:"p"},"plugin_two(x,y,z)"),".\nHere, z in both extension fragments share the same name but may refer to different values."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0268-extensionassembly-fragment-must-have-the-cte-columns-same-as-the-base-fragment"},"CQL0268: extension/assembly fragment must have the CTE columns same as the base fragment"),Object(i.b)("p",null," Extension and assembly fragments have an exact prescription for their shape. For each extension and assembly fragment, the first CTE must be a stub for their base table. This error means this stub in extension/assembly fragment differs from the definition of the base table."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0269-at-least-part-of-this-unique-key-is-redundant-with-previous-unique-keys"},"CQL0269: at least part of this unique key is redundant with previous unique keys"),Object(i.b)("p",null,"The new unique key must have at least one column that is not in a previous key AND it must not have all the columns from any previous key."),Object(i.b)("p",null,"e.g:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create table t1 (\n  a int,\n  b long,\n  c text,\n  d real,\n  UNIQUE (a, b),\n  UNIQUE (a, b, c), -- INVALID  (a, b) is already unique key\n  UNIQUE (b, a), -- INVALID (b, a) is the same as (a, b)\n  UNIQUE (c, d, b, a), -- INVALID subset (b, a) is already unique key\n  UNIQUE (a), -- INVALID a is part of (a, b) key\n  UNIQUE (a, c), -- VALID\n  UNIQUE (d), -- VALID\n  UNIQUE (b, d) -- VALID\n);\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0270-use-fetch-from-for-procedures-that-returns-a-cursor-with-out-cursor"},"CQL0270: use FETCH FROM for procedures that returns a cursor with OUT 'cursor'"),Object(i.b)("p",null,"If you are calling a procedure that returns a value cursor (using ",Object(i.b)("inlineCode",{parentName:"p"},"OUT"),") then you accept that cursor using the pattern"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"DECLARE C CURSOR FETCH FROM CALL foo(...);\n")),Object(i.b)("p",null,"The pattern"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"DECLARE C CURSOR FOR CALL foo(...);\n")),Object(i.b)("p",null,"Is used for procedures that provide a full ",Object(i.b)("inlineCode",{parentName:"p"},"select")," statement."),Object(i.b)("p",null,"Note that in the former cause you don't then use ",Object(i.b)("inlineCode",{parentName:"p"},"fetch")," on the cursor.  There is at most one row anyway and it's fetched for you so a fetch would be useless.  In the second case you fetch as many rows as there are and/or you want."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0271-the-offset-clause-may-only-be-used-if-limit-is-also-present"},"CQL0271: the OFFSET clause may only be used if LIMIT is also present"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from foo offset 1;\n")),Object(i.b)("p",null,"Is not supported by SQLite.  ",Object(i.b)("inlineCode",{parentName:"p"},"OFFSET")," may only be used if ",Object(i.b)("inlineCode",{parentName:"p"},"LIMIT")," is also present.  Also, both should be small because offset is not cheap.  There is no way to do offset other than to read and ignore the indicated number of rows.  So something like ",Object(i.b)("inlineCode",{parentName:"p"},"offset 1000")," is always horrible."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0272-the-set-of-columns-referenced-in-the-foreign-key-statement-should-match-exactly-a-unique-key-in-parent-table"},"CQL0272: THE SET OF COLUMNS REFERENCED IN THE FOREIGN KEY STATEMENT SHOULD MATCH EXACTLY A UNIQUE KEY IN PARENT TABLE"),Object(i.b)("p",null,"If you're creating a table t2 with foreign keys on table t1, then the set of t1's columns reference in the foreign key statement for table t2 should be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A primary key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ncreate table t1(a text primary key);\ncreate table t2(a text primary key, foreign key(a) references t1(a));\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A unique key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ncreate table t1(a text unique);\ncreate table t2(a text primary key, foreign key(a) references t1(a));\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A group of unique key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ncreate table t1(a text, b int, unique(a, b));\ncreate table t2(a text, b int, foreign key(a, b) references t1(a, b));\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A group of primary key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ncreate table t1(a text, b int, primary key(a, b));\ncreate table t2(a text, b int, foreign key(a, b) references t1(a, b));\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A unique index in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ncreate table t1(a text, b int);\ncreate unique index unq on t1(a, b);\ncreate table t2(a text, b int, foreign key(a, b) references t1(a, b));\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0273-autotest-attribute-has-incorrect-format--in-dummy_test"},"CQL0273: autotest attribute has incorrect format (...) in 'dummy_test'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the given ",Object(i.b)("strong",{parentName:"p"},"dummy_test")," info (table name, column name, column value) has incorrect format."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0274-autotest-attribute-dummy_test-has-non-existent-table"},"CQL0274: autotest attribute 'dummy_test' has non existent table"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the given table name for ",Object(i.b)("strong",{parentName:"p"},"dummy_test")," attribute does not exist."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0275-autotest-attribute-dummy_test-has-non-existent-column"},"CQL0275: autotest attribute 'dummy_test' has non existent column"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the given column name for ",Object(i.b)("strong",{parentName:"p"},"dummy_test")," attribute does not exist."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0276-autotest-attribute-dummy_test-has-invalid-value-type-in"},"CQL0276: autotest attribute 'dummy_test' has invalid value type in"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the given column value's type for ",Object(i.b)("strong",{parentName:"p"},"dummy_test")," attribute does not match the column type."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0277-autotest-has-incorrect-format"},"CQL0277: autotest has incorrect format"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the format is incorrect."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0278-autotest-attribute-name-is-not-valid"},"CQL0278: autotest attribute name is not valid"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"cql:autotest")," annotation, the given attribute name is not valid."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0279-the-set-of-columns-referenced-in-the-conflict-target-should-match-exactly-a-unique-key-in-table-we-apply-upsert"},"CQL0279: the set of columns referenced in the conflict target should match exactly a unique key in table we apply upsert"),Object(i.b)("p",null,"If you're doing an UPSERT on table t1, the columns listed in the conflict target should be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A primary key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1")),Object(i.b)("li",{parentName:"ul"},"A unique key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1")),Object(i.b)("li",{parentName:"ul"},"A group of unique key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1")),Object(i.b)("li",{parentName:"ul"},"A group of primary key in ",Object(i.b)("inlineCode",{parentName:"li"},"t1")),Object(i.b)("li",{parentName:"ul"},"A unique index in ",Object(i.b)("inlineCode",{parentName:"li"},"t1"))),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0280-upsert-statement-requires-a-where-clause-if-the-insert-clause-uses-select"},"CQL0280: upsert statement requires a where clause if the insert clause uses select"),Object(i.b)("p",null,"When the ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement to which the UPSERT is attached takes its values from a ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," statement, there is a potential parsing ambiguity. The SQLite parser might not be able to tell if the ",Object(i.b)("inlineCode",{parentName:"p"},"ON")," keyword is introducing the UPSERT or if it is the ",Object(i.b)("inlineCode",{parentName:"p"},"ON")," clause of a join. To work around this, the ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT")," statement should always include a ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause, even if that ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause is just ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE 1"),' (always true).   Note: The CQL parser doesn\'t have this ambiguity because it treats "ON CONFLICT" as a single token so this is CQL reporting that SQLite might have trouble with the query as written.'),Object(i.b)("p",null,"e.g:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"insert into foo select id from bar where 1 on conflict(id) do nothing;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0281-upsert-statement-does-not-include-table-name-in-the-update-statement"},"CQL0281: upsert statement does not include table name in the update statement"),Object(i.b)("p",null,"The UPDATE statement of and UPSERT should not include the table name because the name is already known from the INSERT statement part of the UPSERT\ne.g:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"insert into foo select id from bar where 1 on conflict(id) do update set id=10;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0282-update-statement-require-table-name"},"CQL0282: update statement require table name"),Object(i.b)("p",null,"The UPDATE statement should always include a table name except if the UPDATE statement is part of an UPSERT statement."),Object(i.b)("p",null,"e.g:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"update foo set id=10;\ninsert into foo(id) values(1) do update set id=10;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0283-upsert-syntax-only-support-insert-into"},"CQL0283: upsert syntax only support INSERT INTO"),Object(i.b)("p",null,"The INSERT statement part of an UPSERT statement can only uses INSERT INTO ..."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"e.g:\ninsert into foo(id) values(1) on conflict do nothing;\ninsert into foo(id) values(1) on conflict do update set id=10;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0284-ad-hoc-schema-migration-directive-must-provide-a-procedure-to-run"},"CQL0284: ad hoc schema migration directive must provide a procedure to run"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@schema_ad_hoc_migration")," must provide both a version number and a migrate procedure name.\nThis is unlike the other version directives like ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," where the version number is optional.  This\nis because the whole point of this migrator is to invoke a procedure of your choice."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0285-ad-hoc-schema-migration-directive-version-number-changed-proc_name"},"CQL0285: ad hoc schema migration directive version number changed 'proc_name'"),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_ad_hoc_migration")," you cannot change the version number of the directive once\nit has been added to the schema because this could cause inconsistencies when upgrading."),Object(i.b)("p",null,"You can change the body of the method if you need to but this is also not recommended because\nagain there could be inconsistencies.  However careful replacement and compensation is possible.  This is like\ngoing to 110% on the reactor... possible, but not recommended."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0286-ad-hoc-schema-migration-directive-was-removed-this-is-not-allowed-proc_name"},"CQL0286: ad hoc schema migration directive was removed; this is not allowed 'proc_name'"),Object(i.b)("p",null,"An ",Object(i.b)("inlineCode",{parentName:"p"},"@schema_ad_hoc_migration")," cannot be removed because it could cause inconsistencies on upgrade."),Object(i.b)("p",null,"You can change the body of the method if you need to but this is also not recommended because\nagain there could be inconsistencies.  However careful replacement and compensation is possible.  This is like\ngoing to 110% on the reactor... possible, but not recommended."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0287-extensionassembly-fragment-must-add-stub-"},'CQL0287: extension/assembly fragment must add stub "'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0288-extensionassembly-fragment-stub-for-base-cte-column-must-be-"},'CQL0288: extension/assembly fragment stub for base CTE column must be "'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0289-upsert-statement-are-forbidden-if-strict-upsert-statement-mode-is-enabled"},"CQL0289: upsert statement are forbidden if strict upsert statement mode is enabled"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict")," has been use to enable strict upsert statement enforcement.  When enabled all sql statement should not use the upsert statement. This is because sqlite version running in some iOS and Android version is old. Upsert statement was added to sqlite in the version ",Object(i.b)("strong",{parentName:"p"},"3.24.0 (2018-06-04)"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0290-fragments-can-only-have-one-statement-in-the-statement-list-and-it-must-be-a-withselect"},"CQL0290: fragments can only have one statement in the statement list and it must be a WITH..SELECT"),Object(i.b)("p",null,"All of the query fragment types consist of a procedure with exactly one statement and that statement is a WITH...SELECT statement.  If you have more than one statement or some other type of statement you'll get this error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0291-region-links-into-the-middle-of-a-deployable-region-you-must-point-to-the-root-of-deployable_region-not-into-the-middle-error_region"},"CQL0291: region links into the middle of a deployable region; you must point to the root of ",Object(i.b)("inlineCode",{parentName:"h3"},"<deployable_region>")," not into the middle: ",Object(i.b)("inlineCode",{parentName:"h3"},"<error_region>")),Object(i.b)("p",null,'Deployable regions have an "inside" that is in some sense "private".  In order to keep the consistent (and independently deployable) you can\'t peek into the middle of such\na region, you have to depend on the root (i.e. ',Object(i.b)("inlineCode",{parentName:"p"},"<deployable_region>")," itself).  This allows the region to remain independently deployable and for its internal logical regions to be reorganized in whatever manner makes sense."),Object(i.b)("p",null,"To fix this error probably you should change ",Object(i.b)("inlineCode",{parentName:"p"},"error_region")," so that it depends directly on ",Object(i.b)("inlineCode",{parentName:"p"},"deployable_region")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0292-explain-statement-is-only-available-in-dev-mode-because-its-result-set-may-vary-between-sqlite-versions"},"CQL0292: Explain statement is only available in dev mode because its result set may vary between sqlite versions"),Object(i.b)("p",null,"The EXPLAIN statement is intended for interactive debugging only. It helps engineer understand how Sqlite will execute their query and the cost attached to it. This is why this grammar is only available in dev mode in CQL and should never be used in production."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0293-only-explain-query-plan--statement-is-supported"},"CQL0293: Only ","[EXPLAIN QUERY PLAN ...]"," statement is supported"),Object(i.b)("p",null,"CQL only support ","[EXPLAIN QUERY PLAN stmt]"," sql statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0294-window-function-invocations-can-only-appear-in-the-select-list-of-a-select-statement"},"CQL0294: Window function invocations can only appear in the select list of a select statement"),Object(i.b)("p",null,"Not all SQLite builtin function can be used as a window function."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0295-window-name-is-not-defined"},"CQL0295: Window name is not defined"),Object(i.b)("p",null,"Window name referenced in the select list should be defined in the Window clause of the same select statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0296-window-name-definition-is-not-used"},"CQL0296: Window name definition is not used"),Object(i.b)("p",null,"Window name defined in the window clause of a select statement should always be used within that statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0297-from-shape-is-redundant-if-column-list-is-empty"},"CQL0297: FROM ","[shape]"," is redundant if column list is empty"),Object(i.b)("p",null,"In this form:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"insert into YourTable() FROM your_cursor;")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"()")," means no columns are being specified, the cursor will never be used.  The only source of columns is maybe dummy data (if it was specified) or the default values or null.  In no case will the cursor be used.  If you really want this use ",Object(i.b)("inlineCode",{parentName:"p"},"FROM VALUES()")," and don't implicate a cursor or an argument bundle."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0298-cannot-read-from-a-cursor-without-fields-cursor_name"},"CQL0298: cannot read from a cursor without fields 'cursor_name'"),Object(i.b)("p",null,"The cursor in question has no storage associated with it.  It was loaded with something like:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"fetch C into x, y, z;")),Object(i.b)("p",null,"You can only use a cursor as a source of data if it was fetched with its own storage like"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"fetch C")),Object(i.b)("p",null,"This results in a structure for the cursor.  This gives you C.x, C.y, C.z etc."),Object(i.b)("p",null,"If you fetched the cursor into variables then you have to use the variables for any inserting."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0299-cursor-has-too-few-fields-shape_name"},"CQL0299: ","[cursor]"," has too few fields, 'shape_name'"),Object(i.b)("p",null,"The named shape was used in a fetch statement but the number of columns fetched is smaller than the number required by the statement we are processing."),Object(i.b)("p",null,"If you need to use the cursor plus some other data then you can't use this form, you'll have to use each field individually like ",Object(i.b)("inlineCode",{parentName:"p"},"from values(C.x, C.y, C.z, other_stuff)"),"."),Object(i.b)("p",null,"The shape with too few fields might be the source or the target of the statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0300-argument-must-be-an-integer-between-1-and-max-integer-in-function-function_name"},"CQL0300: Argument must be an integer (between 1 and max integer) in function 'function_name'"),Object(i.b)("p",null,"The argument of the function should be an integer."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0301-the-second-argument-must-be-an-integer-between-0-and-max-integer-in-function-function_name"},"CQL0301: The second argument must be an integer (between 0 and max integer) in function 'function_name'"),Object(i.b)("p",null,"The second argument of the function should be an integer between 0 and INTEGER_MAX."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0302-the-first-and-third-arguments-must-be-compatible-in-function-function_name"},"CQL0302: The first and third arguments must be compatible in function 'function_name'"),Object(i.b)("p",null,"The first and third arguments of the function have to be of the same type because the third argument provide a default value in cause the first argument is NULL."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0303-the-second-argument-must-be-an-integer-between-1-and-max-integer-in-function-function_name"},"CQL0303: The second argument must be an integer between 1 and max integer in function 'function_name'"),Object(i.b)("p",null,"The second argument of the function must be and integer between 1 and INTEGER_MAX."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0304-distinct-may-only-be-used-with-one-explicit-argument-in-an-aggregate-function"},"CQL0304: DISTINCT may only be used with one explicit argument in an aggregate function"),Object(i.b)("p",null,"The keyword DISTINCT can only be used with one argument in an aggregate function."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0305-distinct-may-only-be-used-in-function-that-are-aggregated-or-user-defined"},"CQL0305: DISTINCT may only be used in function that are aggregated or user defined"),Object(i.b)("p",null,"Only aggregated functions and user defined functions can use the keyword DISTINCT. Others type of functions are not allowed to use it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0306-filter-clause-may-only-be-used-in-function-that-are-aggregated-or-user-defined"},"CQL0306: FILTER clause may only be used in function that are aggregated or user defined"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0307-return-statement-should-be-in-a-procedure-and-not-at-the-top-level"},"CQL0307: return statement should be in a procedure and not at the top level"),Object(i.b)("p",null,'There are basically two checks here both of which have to do with the "nesting level" at which the ',Object(i.b)("inlineCode",{parentName:"p"},"return")," occurs."),Object(i.b)("p",null,"A loose ",Object(i.b)("inlineCode",{parentName:"p"},"return")," statement (not in a procedure) is meaningless so that produce an error.  There is nothing to return from."),Object(i.b)("p",null,"If the return statement is not inside of an \"if\" or something like that then it will run unconditionally.  Nothing should follow the return (see CQL0308) so if we didn't fall afoul of CQL0308 and we're at the top level then the return is the last thing in the proc, in which case it is totally redundant."),Object(i.b)("p",null,"Both these situations produce an error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0308-statement-should-be-the-last-thing-in-a-statement-list"},"CQL0308: statement should be the last thing in a statement list"),Object(i.b)("p",null,"Control flow will exit the containing procedure after a ",Object(i.b)("inlineCode",{parentName:"p"},"return")," statement, so any statements that follow in its statement list will certainly not run.  So the return statement must be the last statement, otherwise there are dead/unreachable statements which is most likely done by accident."),Object(i.b)("p",null,"To fix this probably the things that came after the return should be deleted.  Or alternately there was a condition on the return that should have been added but wasn't, so the return should have been inside a nested statement list (like the body of an ",Object(i.b)("inlineCode",{parentName:"p"},"if")," maybe)."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0309-new-table-must-be-added-with-createnumber-or-later-table_name"},"CQL0309: new table must be added with @create(","[number]",") or later 'table_name'"),Object(i.b)("p",null,"The indicated table was newly added -- it is not present in the previous schema.  However the version number it was added at is in the past.  The new table must appear at the current schema version or later.  That version is provided in the error message."),Object(i.b)("p",null,"To fix this, change the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," annotation on the table to be at the indicated version or later."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0310-new-column-must-be-added-with-createnumber-or-later-column_name"},"CQL0310: new column must be added with @create(","[number]",") or later\" 'column_name'"),Object(i.b)("p",null,"The indicated column was newly added -- it is not present in the previous schema.  However the version number it was added at is in the past.  The new column must appear at the current schema version or later.  That version is provided in the error message."),Object(i.b)("p",null,"To fix this, change the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," annotation on the table to be at the indicated version or later."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0311-cql0311-objects-deployment-region-changed-from-previous_region-to-current_region-object_name"},"CQL0311: CQL0311: object's deployment region changed from '<previous_region>' to '<current_region>' 'object_name'"),Object(i.b)("p",null,"An object may not move between deployment regions, because users of the schema will depend on its contents.  New objects can be added to a deployment region but nothing can move from one region to another.  The indicated object appears to be moving."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0312-window-function-invocation-are-forbidden-if-strict-window-function-mode-is-enabled"},"CQL0312: window function invocation are forbidden if strict window function mode is enabled"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict")," has been use to enable strict window function enforcement.  When enabled all sql statement should not invoke window function. This is because sqlite version running in some iOS version is old. Window function was added to SQLite in the version ",Object(i.b)("strong",{parentName:"p"},"3.25.0 (2018-09-15)"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0313-blob-literals-may-only-appear-in-the-context-of-a-sql-statement"},"CQL0313: blob literals may only appear in the context of a SQL statement"),Object(i.b)("p",null,"CQL (currently)  limits use of blob literals to inside of SQL fragments.  There's no easy way to get a blob\nconstant variable into the data section so any implementation would be poor.  These don't come up very often\nin any case so this is a punt basically.  You can fake it with (select x'1234') which makes it clear that\nyou are doing something expensive.  This is not recommended.  Better to pass the blob you need into CQL\nrather than cons it from a literal.  Within SQL it's just text and SQLite does the work as usual so that poses no\nproblems.  And of course non-literal blobs (as args) work find and are bound as usual."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0314-select-function-does-not-require-a-declaration-it-is-a-cql-built-in"},"CQL0314: select function does not require a declaration, it is a CQL built-in"),Object(i.b)("p",null,"CQL built-in function does not require a select function declaration. You can used it directly in your SQL statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0315-mandatory-column-with-no-default-value-in-insert-into-name-default-values-statement"},"CQL0315: mandatory column with no default value in INSERT INTO name DEFAULT VALUES statement."),Object(i.b)("p",null,"Columns on a table must have default value or be nullable in order to use INSERT INTO ",Object(i.b)("inlineCode",{parentName:"p"},"<table>")," DEFAULT VALUES statement."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0316-the-upsert-clause-is-not-compatible-with-default-values"},"CQL0316: the upsert-clause is not compatible with DEFAULT VALUES"),Object(i.b)("p",null,"INSERT statement with DEFAULT VALUES can not be used in a upsert statement.  This form is not supported by SQLite."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0317-char-function-arguments-must-be-integer"},"CQL0317: char function arguments must be integer"),Object(i.b)("p",null,"All parameters of the built-In scalar CQL functions ",Object(i.b)("inlineCode",{parentName:"p"},"char(...)")," must be of type integer."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0318-more-than-one-fragment-annotation-on-procedure-procedure_name"},"CQL0318: more than one fragment annotation on procedure 'procedure_name'"),Object(i.b)("p",null,"The indicated procedure has several cql:*_fragment annotations such as cql:base_fragment and cql:extension_fragment.  You can have at most one of these."),Object(i.b)("p",null,"example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:assembly_fragment=foo)\n@attribute(cql:base_fragment=goo)\ncreate proc mixed_frag_types3(id_ integer)\nbegin\n  ...\nend;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0319-the-name-of-the-assembly-procedure-must-match-the-name-of-the-base-fragment-procedure_name"},"CQL0319: the name of the assembly procedure must match the name of the base fragment 'procedure_name'"),Object(i.b)("p",null,"The name of the procedure that carries the assembly attribute (cql:assembly_fragment) has to match the name of the base fragment.  This is because the code that is generated for the extension fragments refers to some shared code that is generated in the assembly fragment.  If the assembly fragment were allowed to have a distinct name the linkage could never work."),Object(i.b)("p",null,"example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"-- correct example\n-- note: 'foo' must be a valid base fragment, declared elsewhere\n@attribute(cql:assembly_fragment=foo)\ncreate proc foo(id_ integer)\nbegin\n  ...\nend;\n\n-- incorrect example\n@attribute(cql:assembly_fragment=foo)\ncreate proc bar(id_ integer)\nbegin\n  ...\nend;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0320-extension-fragment-cte-must-have-a-from-clause-and-no-other-top-level-clauses-frag_name"},"CQL0320: extension fragment CTE must have a FROM clause and no other top level clauses 'frag_name'"),Object(i.b)("p",null,"In the extension fragment form that uses ",Object(i.b)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," to add columns you cannot include top level restrictions/changes like ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ORDER BY"),", ",Object(i.b)("inlineCode",{parentName:"p"},"LIMIT")," and so forth.  Any of these would remove or reorder the rows from the core fragment and that is not allowed, you can only add columns.  Hence you must have a ",Object(i.b)("inlineCode",{parentName:"p"},"FROM")," clause and you can have no other top level clauses.  You can use any clauses you like in a nested select to get your additional columns."),Object(i.b)("p",null,"Note: you could potentially add rows with a ",Object(i.b)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," and a generous ",Object(i.b)("inlineCode",{parentName:"p"},"ON")," clause. That's allowed but not recommended. The ",Object(i.b)("inlineCode",{parentName:"p"},"ON")," clause can't be forbidden because it's essentail in the normal case."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0321-migration-proc-not-allowed-on-object-object_name"},"CQL0321: migration proc not allowed on object 'object_name'"),Object(i.b)("p",null,"The indicated name is an index or a trigger. These objects may not have a migration script associated with them when they are deleted."),Object(i.b)("p",null,"The reason for this is that both these types of objects are attached to a table and the table itself might be deleted.  If the table is deleted it becomes impossible to express even a tombstone for the deleted trigger or index without getting errors.  As a conseqence the index/trigger must be completely removed.  But if there had been a migration procedure on it then some upgrade sequences would have run it, but others would not (anyone who upgraded after the table was deleted would not get the migration procedure).  To avoid this problem, migration procedures are not allowed on indices and triggers."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0322-fragment-parameters-must-be-exactly-arguments-procedure_name"},"CQL0322: fragment parameters must be exactly '","[arguments]","' 'procedure_name'"),Object(i.b)("p",null,"The named procedure is an extension fragment or an assembly fragment. It must have exactly the same arguments as the base fragment.  These arguments are provided."),Object(i.b)("p",null,"Recall that the code for the procedure that does the select comes from the assembly fragment, so its arguments are in some sense the only ones that matter.  But the extension fragments are also allowed to use the arguments.  Of course we must ensure that the extension fragments do not use any arguments that aren't in the assembly, and so the only choice we have is to make sure the extensions conform to the base.  And so for that to work the assembly also has to conform to the base.  So the base fragment must define the args for all the other fragments."),Object(i.b)("p",null,"You could imagine a scheme where the extension fragments are allowed to use a subset of the parameters defined in the base but if that were the case you might have names that mean different things in different fragments and then you could get errors or different semantics when the fragments were assembled. To avoid all of these problems, and for simplicity, we demand that the arguments of all fragments match exactly."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0323-calls-to-undeclared-procedures-are-forbidden-if-strict-procedure-mode-is-enabled-declaration-missing-or-typo-procedure_name"},"CQL0323: calls to undeclared procedures are forbidden if strict procedure mode is enabled; declaration missing or typo 'procedure_name'"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict PROCEDURE")," has been enabled.   In this mode you may only call procedures that have a declaration.\nIn ",Object(i.b)("inlineCode",{parentName:"p"},"@enforce_normal PROCEDURE")," mode, a call to an unknown proc is interpreted as a simple C call.  This lets you call\nfunctions like ",Object(i.b)("inlineCode",{parentName:"p"},"printf")," in normal mode, even if they have a strange calling convention.  Strict mode limits you to declared procedures\nand is generally safer."),Object(i.b)("p",null,"If you get this error it means that there is a typo in the name of the procedure you are trying to call, or else the declaration for the\nprocedure is totally missing.  Maybe a necessary ",Object(i.b)("inlineCode",{parentName:"p"},"#include")," needs to be added to the compiland."),Object(i.b)("p",null,"If you really need to call a c runtime function, especially one with varargs, then you must temporarily switch back to ",Object(i.b)("inlineCode",{parentName:"p"},"@enforce_normal")," for procedures."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0324-referenced-table-was-created-in-a-later-version-so-it-cannot-be-used-in-a-foreign-key-referenced_table"},"CQL0324: referenced table was created in a later version so it cannot be used in a foreign key 'referenced_table'"),Object(i.b)("p",null,"In a foreign key, we enforce the following rules:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"@recreate")," tables can see any version they like, if the name is in scope that's good enough"),Object(i.b)("li",{parentName:"ul"},'other tables may only "see" the same version or an earlier version.')),Object(i.b)("p",null,"Normal processing can't actually get into this state because if you tried to create the referencing\ntable with the smaller version number first you would get errors because the name of the referenced\ntable doesn't yet exist.  But if you created them at the same time and you made a typo in the version\nnumber of the referenced table such that it was accidentally bigger you'd create a weirdness.\nSo we check for that situation here and reject it to prevent that sort of typo."),Object(i.b)("p",null,"If you see this error there is almost certainly a typo in the version number of the referenced table; it should be fixed."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0325-ok_table_scan-attribute-must-be-a-name"},"CQL0325: ok_table_scan attribute must be a name"),Object(i.b)("p",null,"The values for the attribute ",Object(i.b)("inlineCode",{parentName:"p"},"ok_table_scan")," can only be names."),Object(i.b)("p",null,"CQL attributes can have a variety of values but in this case the attribute refers to the names\nof tables so no other type of attribute is reasonable."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0326-the-table-name-in-ok_table_scan-does-not-exist-table_name"},"CQL0326: the table name in ok_table_scan does not exist 'table_name'"),Object(i.b)("p",null,"The names provided to ",Object(i.b)("inlineCode",{parentName:"p"},"ok_table_scan")," attribute should be names of existing tables."),Object(i.b)("p",null,"The attribute indicates tables that are ok to scan in this procedure even though they\nare typically not ok to scan due to 'no_table_scan'.  Therefore the attribute must\nrefer to an existing table.  There is likely a typo in the the table name that needs\nto be corrected."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0327-a-value-should-not-be-assigned-to-attribute_name-attribute"},"CQL0327: a value should not be assigned to 'attribute_name' attribute"),Object(i.b)("p",null,"The attribute ",Object(i.b)("inlineCode",{parentName:"p"},"attribute_name")," doesn't take a value."),Object(i.b)("p",null,"When marking a statement with ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:<attribute_name>)")," there is no need\nfor an attribute value."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0328-attribute_name-attribute-may-only-be-added-to-a-statement_name"},"CQL0328: 'attribute_name' attribute may only be added to a 'statement_name'"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"attribute_name")," attribute can only be assigned to specific statements."),Object(i.b)("p",null,"The marking ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:<attribute_name>)")," only makes sense on specific statement. It's likely\nbeen put somewhere strange, If it isn't obviously on the wrong thing, look into\npossibly how the source is after macro expansion."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0329-ok_table_scan-attribute-can-only-be-used-in-a-create-procedure-statement"},"CQL0329: ok_table_scan attribute can only be used in a create procedure statement"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"ok_table_scan")," can only be placed on a create procedure statement."),Object(i.b)("p",null,"The marking ",Object(i.b)("inlineCode",{parentName:"p"},"@attribute(cql:ok_table_scan=...)")," indicates that the procedure may scan\nthe indicated tables. This marking doesn't make sense on other kinds of statements."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0330-fragment-must-start-with-exactly-select--from-cte"},"CQL0330: fragment must start with exactly 'SELECT * FROM CTE'"),Object(i.b)("p",null,"Query fragments have an exact prescription for their shape.  This prescription includes ",Object(i.b)("inlineCode",{parentName:"p"},"select * from CTE")," in the\nfirst branch of the UNION ALL operator when using that form.  Here CTE\nis the common table expression that they define.  This the error message includes the\nspecific name that is required in this context."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0331-extension-fragment-cte-must-have-not-have-order-by-or-limit-clauses-frag_name"},"CQL0331: extension fragment CTE must have not have ORDER BY or LIMIT clauses 'frag_name'"),Object(i.b)("p",null,"In the extension fragment form that uses ",Object(i.b)("inlineCode",{parentName:"p"},"UNION ALL")," to add rows you cannot include the top level operators ",Object(i.b)("inlineCode",{parentName:"p"},"ORDER BY"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"LIMIT"),"  Any of these would remove or reorder the rows from the core fragment and that is not allowed, you can only add new rows.\nYou can use any clauses you like in a nested selects as they will not remove rows from the base query."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0332-all-extension-fragments-that-use-union-all-must-come-before-those-that-use-left-outer-join-frag_name"},"CQL0332: all extension fragments that use UNION ALL must come before those that use LEFT OUTER JOIN 'frag_name'"),Object(i.b)("p",null,"Query fragments that add rows using the UNION ALL form have no way to refer columns that may have been added before\nthem in the part of the query that adds rows (the second and subsequent branches of UNION ALL).  As a result,\nin order to get a assembled query that makes sense the row-adding form must always come before any columns\nwere added.  Hence all of these fragments must come before any of the LEFT OUTER JOIN form."),Object(i.b)("p",null,"If you get this error, you should re-order your fragments such that the UNION ALL form comes before any\nLEFT OUTER JOIN fragments.  The offendeding fragment is named in the error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0333-all-the-compound-operators-in-this-cte-must-be-union-all"},"CQL0333: all the compound operators in this CTE must be UNION ALL"),Object(i.b)("p",null,"The compound operators in CTE must and always be an UNION ALL."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0334-dummy_seed-dummy_nullables-dummy_defaults-many-only-be-used-with-a-single-values-row"},"CQL0334: @dummy_seed @dummy_nullables @dummy_defaults many only be used with a single VALUES row"),Object(i.b)("p",null,"Dummy insert feature makes only sense when it's used in a VALUES clause that is not part of a compound select statement."),Object(i.b)("h3",{id:"cql0336-select-statement-with-values-clause-requires-a-non-empty-list-of-values"},"CQL0336: select statement with VALUES clause requires a non empty list of values"),Object(i.b)("p",null,"VALUES clause requires at least a value for each of the values list. Empty values list are not supported."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0337-the-number-of-columns-values-for-each-row-should-be-identical-in-values-clause"},"CQL0337: the number of columns values for each row should be identical in VALUES clause"),Object(i.b)("p",null,"The number of values for each values list in VALUES clause should always be the same."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0338-the-name-of-a-migration-procedure-may-not-end-in-_crc-procedure_name"},"CQL0338: the name of a migration procedure may not end in '_crc' 'procedure_name'"),Object(i.b)("p",null,"To avoid name conflicts in the upgrade script, migration procedures are not allowed to end in '_crc'\nthis suffix is reserved for internal use."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0339-without-rowid-tables-are-forbidden-if-strict-without-rowid-mode-is-enabled"},"CQL0339: WITHOUT ROWID tables are forbidden if strict without rowid mode is enabled"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict")," has been used to enable strict ",Object(i.b)("inlineCode",{parentName:"p"},"WITHOUT ROWID")," enforcement. When enabled no CREATE TABLE statement can have WITHOUT ROWID clause."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0340-from-arguments-used-in-a-procedure-with-no-arguments-procedure_name"},"CQL0340: FROM ARGUMENTS used in a procedure with no arguments 'procedure_name'"),Object(i.b)("p",null,"The named procedure has a call that uses the FROM ARGUMENTS pattern but it doesn't have any arguments.\nThis is almost certainly a cut/paste from a different location that needs to be adjusted."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0341-argument-must-be-a-variable-in-function-function_name"},"CQL0341: argument must be a variable in function 'function_name'"),Object(i.b)("p",null,"The argument for the CQL builtin function 'function_name' should always be a variable. It can not be an expression for example"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0342-the-cursor-arguments-must-have-identical-column-count-function_name"},"CQL0342: the cursor arguments must have identical column count 'function_name'"),Object(i.b)("p",null,"The number of column in the cursor arguments must be identical to accurately do diffing between two cursors."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0343-all-arguments-must-be-blob-cql_get_blob_size"},"CQL0343: all arguments must be blob 'cql_get_blob_size'"),Object(i.b)("p",null,"The argument for the CQL builtin function cql_get_blob_size should always be of type blob"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0344-argument-must-be-a-nullable-type-but-not-constant-null-in-function"},"CQL0344: argument must be a nullable type (but not constant NULL) in 'function'"),Object(i.b)("p",null,"Functions like ",Object(i.b)("inlineCode",{parentName:"p"},"ifnull_crash")," only make sense if the argument is nullable.  If it's already\nnot null the operation is uninteresting/redundant."),Object(i.b)("p",null,"The most likely cause is that the function call in question is vestigial and you can simply remove it."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0345-the-arguments-must-be-of-type-blob-function_name"},"CQL0345: the arguments must be of type blob 'function_name'"),Object(i.b)("p",null,"The indicated function accepts only a single argument of type blob."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0346-the-variable-must-be-of-type-objectt-cursor-where-t-is-a-valid-shape-name-variable"},"CQL0346: the variable must be of type ",Object(i.b)("inlineCode",{parentName:"h3"},"object<T cursor>")," where T is a valid shape name 'variable'"),Object(i.b)("p",null,"It's possible to take the statement associated with a statement cursor and store it in an object variable. Using the form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for X;\n")),Object(i.b)("p",null,"The object variable 'X' must be declared as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"declare X object<T cursor>;\n")),Object(i.b)("p",null,"Where ",Object(i.b)("inlineCode",{parentName:"p"},"T")," refers to a named object with a shape, like a table, a view, or a stored procedure that returns a result set. This type ",Object(i.b)("inlineCode",{parentName:"p"},"T")," must match the shape of the cursor exactly i.e. having the column names and types."),Object(i.b)("p",null,"The reverse operation, storing a statement cursor in a variable is also possible with this form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"set X from cursor C;\n")),Object(i.b)("p",null,"This has similar constraints on the variable ",Object(i.b)("inlineCode",{parentName:"p"},"X"),"."),Object(i.b)("p",null,"This error indicates that the variable in question (",Object(i.b)("inlineCode",{parentName:"p"},"X")," in this example) is not a typed object variable so it can't be the source of a cursor, or accept a cursor."),Object(i.b)("p",null,"See Chapter 5 of the CQL Programming Language."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0347-select-function-may-not-return-type-object-function_name"},"CQL0347: select function may not return type OBJECT 'function_name'"),Object(i.b)("p",null,"The indicated function was declared with ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE SELECT FUNCTION")," meaning it is to be used in the\ncontext of SQLite statements. However, SQLite doesn't understand functions that return type object\nat all.  Therefore declaration is illegal."),Object(i.b)("p",null,"When working with pointer type through SQLite it is often possibly to encode the object as an long integer assuming\nit can pass through unchanged with no retain/release semantics or any such thing.  If that is practical\nyou can move objects around by returning long integers."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0348-collate-applied-to-a-non-text-column-column_name"},"CQL0348: collate applied to a non-text column 'column_name'"),Object(i.b)("p",null,"Collation order really only makes sense on text fields.  Possibly blob fields but we're taking a stand on blob\nfor now.  This can be relaxed later if that proves to be a mistake.  For now, only text"),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0349-column-definitions-may-not-come-after-constraints-column_name"},"CQL0349: column definitions may not come after constraints 'column_name'"),Object(i.b)("p",null,"In a CREATE TABLE statement, the indicated column name came after a constraint.  SQLite expects all the column definitions\nto come before any constraint defintions.  You must move the offending column defintion above the constraints."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0350-statement-must-appear-inside-of-a-proc-savepoint-block"},"CQL0350: statement must appear inside of a PROC SAVEPOINT block"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"ROLLBACK RETURN")," and ",Object(i.b)("inlineCode",{parentName:"p"},"COMMIT RETURN")," forms are only usable inside of a ",Object(i.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT")," block\nbecause they rollback or commit the savepoint that was created at the top level."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0351-statement-should-be-in-a-procedure-and-at-the-top-level"},"CQL0351: statement should be in a procedure and at the top level"),Object(i.b)("p",null,"The indicated statement may only appear inside procedure and not nested.  The classic example\nof this is the ",Object(i.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT")," form which can only be used at the top level of procedures."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0352-use-commit-return-or-rollback-return-in-within-a-proc-savepoint-block"},"CQL0352: use COMMIT RETURN or ROLLBACK RETURN in within a proc savepoint block"),Object(i.b)("p",null,"The normal ",Object(i.b)("inlineCode",{parentName:"p"},"RETURN")," statement cannot be used inside of ",Object(i.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT")," block, you have to\nindicate if you want to commit or rollback the savepoint when you return.  This makes\nit impossible to forget to do so which is in some sense the whole point of ",Object(i.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0353-evaluation-of-constant-failed"},"CQL0353: evaluation of constant failed"),Object(i.b)("p",null,"The constant expression could not be evaluated.  This is most likely because it includes an operator that is\nnot supported or a function call which is not support.  Very few functions can be used in constant expressions\nThe supported functions include ",Object(i.b)("inlineCode",{parentName:"p"},"iif"),", which is rewritten; ",Object(i.b)("inlineCode",{parentName:"p"},"abs"),"; ",Object(i.b)("inlineCode",{parentName:"p"},"ifnull"),", ",Object(i.b)("inlineCode",{parentName:"p"},"nullif"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"coalesce"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0354-duplicate-enum-member-enum_name"},"CQL0354: duplicate enum member 'enum_name'"),Object(i.b)("p",null,"While processing a ",Object(i.b)("inlineCode",{parentName:"p"},"declare enum")," statement the indicated member of the enum appeared twice."),Object(i.b)("p",null,"This is almost certainly a copy/paste of the same enum member twice."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0355-evaluation-failed-enum_name"},"CQL0355: evaluation failed 'enum_name'"),Object(i.b)("p",null,"While processing a ",Object(i.b)("inlineCode",{parentName:"p"},"declare enum")," statement the indicated member of the enum could not be evaluated as a constant expression."),Object(i.b)("p",null,"There could be a non-constant in the expression or there could be a divide-by-zero error."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0356-enum-definitions-do-not-match-name"},"CQL0356: enum definitions do not match 'name'"),Object(i.b)("p",null,"The two described ",Object(i.b)("inlineCode",{parentName:"p"},"declare enum")," statements have the same name but they are not identical."),Object(i.b)("p",null,"The error output contains the full text of both declarations to compare."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0357-enum-does-not-contain-enum_name"},"CQL0357: enum does not contain 'enum_name'"),Object(i.b)("p",null,"The indicated member is not part of the enumeration."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0358-declared-enums-must-be-top-level-enum"},"CQL0358: declared enums must be top level 'enum'"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE ENUM")," statement for the named enum is happening inside of a procedure.  This is not legal."),Object(i.b)("p",null,"To correct this move the declaration outside of the procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0359-duplicate-type-declaration-type_name"},"CQL0359: duplicate type declaration 'type_name'"),Object(i.b)("p",null,"The name of a declared type should always be unique."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0360-unknown-type-type_name"},"CQL0360: unknown type 'type_name'"),Object(i.b)("p",null,"The indicated name is not a valid type name."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0361-return-data-type-in-a-create-function-declaration-can-only-be-text-blob-or-object"},"CQL0361: Return data type in a create function declaration can only be Text, Blob or Object"),Object(i.b)("p",null,"Return data type in a create function definition can only be TEXT, BLOB or OBJECT."),Object(i.b)("p",null,"These are the only reference types and so CREATE makes sense only with those types.  An integer, for instance, can't start with a +1 reference count."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0362-the-hidden-column-attribute-must-be-the-first-attribute-if-present"},"CQL0362: The HIDDEN column attribute must be the first attribute if present"),Object(i.b)("p",null,"In order to ensure that SQLite will parse HIDDEN as part of the type it has to come before any other attributes like NOT NULL."),Object(i.b)("p",null,"This limitation is due to the fact that CQL and SQLite use slightly different parsing approaches for attributes and in SQLite\nHIDDEN isn't actually an attribute.  The safest place to put the attribute is right after the type name and before any other\nattributes as it is totally unambiguous there so CQL enforces this."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0363-all-arguments-must-be-names-vault_sensitive"},"CQL0363: all arguments must be names 'vault_sensitive'"),Object(i.b)("p",null,"vault_sensitive attribution only allow names. Integer, string literal, c string or blob are not allowed, only IDs should be provided."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0364-vault_sensitive-annotation-can-only-go-on-a-procedure-that-uses-the-database"},"CQL0364: vault_sensitive annotation can only go on a procedure that uses the database"),Object(i.b)("p",null,"The named procedure has the ",Object(i.b)("inlineCode",{parentName:"p"},"vault_sensitive")," annotation to automatically encode sensitive value in the result set. Encoding value require the database, but the procedure in question doesn't even use the database at all.  This annotation is therefore useless."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0365-enforce_pop-used-but-there-is-nothing-to-pop"},"CQL0365: @enforce_pop used but there is nothing to pop"),Object(i.b)("p",null,"Each ",Object(i.b)("inlineCode",{parentName:"p"},"@enforce_pop")," should match an ",Object(i.b)("inlineCode",{parentName:"p"},"@enforce_push"),", but there is nothing to pop on the stack now."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0366-transaction-operations-disallowed-while-strict-transaction-enforcement-is-on"},"CQL0366: transaction operations disallowed while STRICT TRANSACTION enforcement is on"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict transaction"),' has been used, while active no transaction operations are allowed.  Savepoints may be used.  This is\ntypically done to prevent transactions from being used in any ad hoc way because they don\'t nest and typically need to be used\nwith some "master plan" in mind.'),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0367-an-attribute-was-specified-twice-attribute_name"},"CQL0367: an attribute was specified twice 'attribute_name'"),Object(i.b)("p",null,"In the indicated type declaration, the indicated attribute was specified twice.  This is almost certainly happening because the line in question looks like this\n",Object(i.b)("inlineCode",{parentName:"p"},"declare x type_name not null;")," but ",Object(i.b)("inlineCode",{parentName:"p"},"type_name")," is already ",Object(i.b)("inlineCode",{parentName:"p"},"not null"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0368-strict-select-if-nothing-requires-that-all-select--expressions-include-if-nothing"},"CQL0368: strict select if nothing requires that all (select ...) expressions include 'if nothing'"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict select if nothing")," has been enabled.  This means that select expressions must include\n",Object(i.b)("inlineCode",{parentName:"p"},"if nothing throw")," (the old default) ",Object(i.b)("inlineCode",{parentName:"p"},"if nothing [value]")," or ",Object(i.b)("inlineCode",{parentName:"p"},"if nothing or null [value]"),".  This options exists\nbecause commonly the case where a row does not exist is not handled correctly when ",Object(i.b)("inlineCode",{parentName:"p"},"(select ...)")," is used\nwithout the ",Object(i.b)("inlineCode",{parentName:"p"},"if nothing")," options."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0369-the-select--if-nothing-construct-is-for-use-in-top-level-expressions-not-inside-of-other-dml"},"CQL0369: The (select ... if nothing) construct is for use in top level expressions, not inside of other DML"),Object(i.b)("p",null,"This form allows for error control of (select...) expressions.  But SQLite does not\nunderstand the form at all, so it can only appear at the top level of expressions where\nCQL can strip it out. Here are some examples:"),Object(i.b)("p",null,"good:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"  set x := (select foo from bar where baz if nothing 0);\n  if (select foo from bar where baz if nothing 1) then ... end if;\n")),Object(i.b)("p",null,"bad:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"  select foo from bar where (select something from somewhere if nothing null);\n  delete from foo where (select something from somewhere if nothing 1);\n")),Object(i.b)("p",null,"Basically if you are already in a SQL context, the form isn't usable because SQLite\nsimply doesn't understand if nothing at all. This error makes it so that you'll\nget a build time failure from CQL rather than a run time failure from SQLite."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0370-due-to-a-memory-leak-bug-in-old-sqlite-versions-the-select-part-of-an-insert-must-not-have-a-top-level-join-or-compound-operator-use-with-and-a-cte-or-a-nested-select-to-work-around-this"},"CQL0370: due to a memory leak bug in old SQLite versions, the select part of an insert must not have a top level join or compound operator. Use WITH and a CTE, or a nested select to work around this."),Object(i.b)("p",null,"There is an unfortunate memory leak in older versions of SQLite (research pending on particular versions, but 3.28.0 has it).  It causes this pattern to leak:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"-- must be autoinc table\ncreate table x (\n  pk integer primary key autoincrement\n);\n\n-- any join will do (this is a minimal repro)\ninsert into x\n  select NULL pk from\n  (select 1) t1 inner join (select 1) t2;\n")),Object(i.b)("p",null,"You can workaround this with a couple of fairly simple rewrites.  This form is probably the cleanest."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"with\ncte (pk) as (select .. anything you need)\ninsert into x\n  select * from cte;\n")),Object(i.b)("p",null,"Simply wrapping your desired select in a nested select also suffices.  So long as the top level is simple."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"insert into x\n  select * from (\n    select anything you need....\n  );\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0371-table-valued-function-used-in-a-leftrightcross-context-this-would-hit-a-sqlite-bug--wrap-it-in-a-cte-instead"},"CQL0371: table valued function used in a left/right/cross context; this would hit a SQLite bug.  Wrap it in a CTE instead."),Object(i.b)("p",null,"This error is generated by ",Object(i.b)("inlineCode",{parentName:"p"},"@enforce_strict table function"),". It is there to allow safe use of Table Valued Functions (TVFs)\neven though there was a bug in SQLite prior to v 3.31.0 when joining against them.  The bug appears when the TVF is on\nthe right of a left join. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from foo left join some_tvf(1);\n")),Object(i.b)("p",null,"In this case the join becomes an INNER join even though you wrote a left join.  Likewise"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from some_tvf(1) right join foo;\n")),Object(i.b)("p",null,"Becomes an inner join even though you wrote a right join.  The same occurs when a TVF is on either side of a cross join."),Object(i.b)("p",null,"The workaround is very simple.  You don't want the TVF to be the target of the join directly.  Instead:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"with tvf_(*) as (select * from some_tvf(1))\nselect * from foo left join tvf_;\n")),Object(i.b)("p",null,"OR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select * from foo left join (select * from some_tvf(1));\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0372-select--if-nothing-or-null-null-is-redundant-use-select--if-nothing-null-instead"},"CQL0372: SELECT ... IF NOTHING OR NULL NULL is redundant; use SELECT ... IF NOTHING NULL instead."),Object(i.b)("p",null,"It is always the case that ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT ... IF NOTHING OR NULL NULL")," is equivalent to ",Object(i.b)("inlineCode",{parentName:"p"},"SELECT ... IF NOTHING NULL"),". As such, do not do this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select foo from bar where baz if nothing or null null\n")),Object(i.b)("p",null,"Do this instead:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"select foo from bar where baz if nothing null\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0373-comparing-against-null-always-yields-null-use-is-and-is-not-instead"},"CQL0373: Comparing against NULL always yields NULL; use IS and IS NOT instead."),Object(i.b)("p",null,"Attepting to check if some value ",Object(i.b)("inlineCode",{parentName:"p"},"x")," is NULL via ",Object(i.b)("inlineCode",{parentName:"p"},"x = NULL")," or ",Object(i.b)("inlineCode",{parentName:"p"},"x == NULL"),", or isn't NULL via ",Object(i.b)("inlineCode",{parentName:"p"},"x <> NULL")," or ",Object(i.b)("inlineCode",{parentName:"p"},"x != NULL"),", will always produce NULL regardless of the value of ",Object(i.b)("inlineCode",{parentName:"p"},"x"),". Instead, use ",Object(i.b)("inlineCode",{parentName:"p"},"x IS NULL")," or ",Object(i.b)("inlineCode",{parentName:"p"},"x IS NOT NULL")," to get the expected boolean result."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0374-select-expression-is-equivalent-to-null"},"CQL0374: SELECT expression is equivalent to NULL."),Object(i.b)("p",null,"CQL found a redundant select operation (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"set x := (select NULL);"),")."),Object(i.b)("p",null,"There is no need to write a select expression that always evaluates to NULL. Simply use NULL instead (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"set x := NULL;"),")."),Object(i.b)("hr",null),Object(i.b)("hr",null),Object(i.b)("h2",{id:"cql-0375--unused-this-was-added-to-prevent-merge-conflicts-at-the-end-on-literally-every-checkin"},"CQL 0375 : unused, this was added to prevent merge conflicts at the end on literally every checkin"),Object(i.b)("h2",{id:"cql-0376--unused-this-was-added-to-prevent-merge-conflicts-at-the-end-on-literally-every-checkin"},"CQL 0376 : unused, this was added to prevent merge conflicts at the end on literally every checkin"),Object(i.b)("h3",{id:"cql0377-table-transitioning-from-recreate-to-create-must-use-createnncqlfrom_recreate-table-name"},"CQL0377: table transitioning from ",Object(i.b)("inlineCode",{parentName:"h3"},"@recreate")," to ",Object(i.b)("inlineCode",{parentName:"h3"},"@create")," must use ",Object(i.b)("inlineCode",{parentName:"h3"},"@create(nn,cql:from_recreate)")," 'table name'"),Object(i.b)("p",null,"The indicated table is moving from ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," to ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," meaning it will now be schema managed in an\nupgradable fashion.  When this happens end-user databases might have some stale version of the table\nfrom a previous installation.  This stale version must get a one-time cleanup in order to ensure that the\nnow current schema is correctly applied.  The ",Object(i.b)("inlineCode",{parentName:"p"},"cql:from_recreate"),' annotation does this.  It is required\nbecause otherwise there would be no record that this table "used to be recreate" and therefore might have\nan old version still in the database.'),Object(i.b)("p",null,"A correct table might look something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"create table correct_migration_to_create(\n id integer primary key,\n t text\n) @create(7, cql:from_recreate);\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0378-built-in-migration-procedure-not-valid-in-this-context-name"},"CQL0378: built-in migration procedure not valid in this context 'name'"),Object(i.b)("p",null,"The indicated name is a valid built-in migration procedure but it is not valid on\nthis kind of item.  For instance ",Object(i.b)("inlineCode",{parentName:"p"},"cql:from_recreate")," can only be applied to tables."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0379-unknown-built-in-migration-procedure-name"},"CQL0379: unknown built-in migration procedure 'name'"),Object(i.b)("p",null,"Certain schema migration steps are built-in.  Currently the only one is ",Object(i.b)("inlineCode",{parentName:"p"},"cql:from_recreate")," for\nmoving to ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," from ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate"),".  Others may be added in the future.  The ",Object(i.b)("inlineCode",{parentName:"p"},"cql:")," prefix\nensures that this name cannot conflict with a valid user migration procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0380-the-when-expression-cannot-be-evaluated-to-a-constant"},"CQL0380: the WHEN expression cannot be evaluated to a constant"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement each expression each expression in a ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," clause must be made up\nof constants and simple numeric math operations.  See the reference on the ",Object(i.b)("inlineCode",{parentName:"p"},"const(..)")," expression\nfor the valid set."),Object(i.b)("p",null,"It's most likely that a variable or function call appears in the errant expression."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0381-case-expression-must-be-a-not-null-integral-type"},"CQL0381: case expression must be a not-null integral type"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement can only switch over integers or long integers.  It will be translated\ndirectly to the C switch statement form.  ",Object(i.b)("inlineCode",{parentName:"p"},"TEXT"),", ",Object(i.b)("inlineCode",{parentName:"p"},"REAL"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BLOB"),", ",Object(i.b)("inlineCode",{parentName:"p"},"BOOL"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"OBJECT")," cannot\nbe used in this way."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0382-the-type-of-a-when-expression-is-bigger-than-the-type-of-the-switch-expression"},"CQL0382: the type of a WHEN expression is bigger than the type of the SWITCH expression"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," expression evaluates to a ",Object(i.b)("inlineCode",{parentName:"p"},"LONG INTEGER")," but the expression in the ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," is ",Object(i.b)("inlineCode",{parentName:"p"},"INTEGER"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0383-switch--all-values-is-useless-with-an-else-clause"},"CQL0383: switch ... ALL VALUES is useless with an ELSE clause"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," form of switch means that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"the ",Object(i.b)("inlineCode",{parentName:"li"},"SWITCH")," expression is an enumerated type"),Object(i.b)("li",{parentName:"ul"},"the ",Object(i.b)("inlineCode",{parentName:"li"},"WHEN")," cases will completely cover the values of the enum")),Object(i.b)("p",null,"If you allow the ",Object(i.b)("inlineCode",{parentName:"p"},"ELSE")," form then ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," becomes meaningless because of\ncourse they are all covered.  So with ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," there can be no ",Object(i.b)("inlineCode",{parentName:"p"},"ELSE"),"."),Object(i.b)("p",null,"You can list items that have no action with this form:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"   WHEN 10, 15 THEN NOTHING -- explicitly do nothing in these cases so they are still covered\n")),Object(i.b)("p",null,"No code is generated for such cases."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0384-switch-statement-did-not-have-any-actual-statements-in-it"},"CQL0384: switch statement did not have any actual statements in it"),Object(i.b)("p",null,"Either there were no ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," clauses at all, or they were all ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN ... THEN NOTHING")," so\nthere is no actual code to execute.  You need to add some cases that do work."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0385-when-clauses-contain-duplicate-values-value"},"CQL0385: WHEN clauses contain duplicate values 'value'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement all of the values in the ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," clauses must be unique.  The indicated\nerrant entry is a duplicate."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0386-switch--all-values-is-used-but-the-switch-expression-is-not-an-enum-type"},"CQL0386: SWITCH ... ALL VALUES is used but the switch expression is not an enum type"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement with ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," specified the switch expression was not an enumerated type.\n",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," is used to ensure that there is a case for every value of an enumerated type\nso this switch cannot be so checked.  Either correct the expression, or remove ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES"),"."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0387-a-value-exists-in-the-enum-that-is-not-present-in-the-switch-enum_member"},"CQL0387: a value exists in the enum that is not present in the switch 'enum_member'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement with ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," specified the errant enum member did not appear\nin any ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," clause.  All members must be specified when ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," is used."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0388-a-value-exists-in-the-switch-that-is-not-present-in-the-enum-numeric_value"},"CQL0388: a value exists in the switch that is not present in the enum 'numeric_value'"),Object(i.b)("p",null,"In a ",Object(i.b)("inlineCode",{parentName:"p"},"SWITCH")," statement with ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," specified the errant integer value appeared in\nin a ",Object(i.b)("inlineCode",{parentName:"p"},"WHEN")," clause.  This value is not part of the members of the enum.  Note that enum members\nthat begin with '_' are ignored as they are, by convention, consdiered to be pseudo-members.\ne.g. in ",Object(i.b)("inlineCode",{parentName:"p"},"declare enum v integer (v0 = 0, v1 =1, v2 =2, _count = 3)")," ",Object(i.b)("inlineCode",{parentName:"p"},"_count")," is a pseudo-member."),Object(i.b)("p",null,"The errant entry should probably be removed. Alternatively, ",Object(i.b)("inlineCode",{parentName:"p"},"ALL VALUES")," isn't appropriate as the\ndomain of the switch is actually bigger than the domain of the enumeration.  One of these\nchanges must happen."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0389-declare-out-requires-that-the-procedure-be-already-declared"},"CQL0389: DECLARE OUT requires that the procedure be already declared"),Object(i.b)("p",null,"The purpose of the ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE OUT")," form is to automatically declare the out parameters for that procedure."),Object(i.b)("p",null,"This cannot be done if the type of the procedure is not yet known."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0390-declare-out-call-used-on-a-procedure-with-no-missing-out-arguments"},"CQL0390: DECLARE OUT CALL used on a procedure with no missing OUT arguments"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"DECLARE OUT CALL")," form was used, but the procedure has no ",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," arguments that need\nany implicit declaration.  Either they have already all been declared or else there are no\n",Object(i.b)("inlineCode",{parentName:"p"},"OUT")," arguments at all, or even no arguments of any kind."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0391-close-cannot-be-used-on-a-boxed-cursor"},"CQL0391: CLOSE cannot be used on a boxed cursor"),Object(i.b)("p",null,"When a cursor is boxed\u2014i.e., wrapped in an object\u2014the lifetime of the box and underlying statement are automatically managed via reference counting. Accordingly, it does not make sense to manually call CLOSE on such a cursor as it may be retained elsewhere. Instead, to allow the box to be freed and the underlying statement to be finalized, set all references to the cursor to NULL."),Object(i.b)("p",null,"Note: As with all other objects, boxed cursors are automatically released when they fall out of scope. You only have to set a reference to NULL if you want to release the cursor sooner, for some reason."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0392-when-deleting-a-virtual-table-you-must-specify-deletenn-cqlmodule_must_not_be_deleted_see_docs_for_cql0392-as-a-reminder-not-to-delete-the-module-for-this-virtual-table"},"CQL0392: when deleting a virtual table you must specify @delete(nn, cql:module_must_not_be_deleted_see_docs_for_CQL0392) as a reminder not to delete the module for this virtual table"),Object(i.b)("p",null,"When the schema upgrader runs, if the virtual table is deleted it will attempt to do ",Object(i.b)("inlineCode",{parentName:"p"},"DROP TABLE IF EXISTS")," on the indicated table.  This table\nis a virtual table.  SQLite will attempt to initialize the table even when you simply try to drop it.  For that to work the module must still\nbe present.  This means modules can never be deleted!  This attribute is here to remind you of this fact so that you are not tempted to\ndelete the module for the virtual table when you delete the table.  You may, however, replace it with a shared do-nothing stub."),Object(i.b)("p",null,"The attribute itself does nothing other than hopefully cause you to read this documentation."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0393-user-function-cannot-appear-in-a-constraint-expression-function_name"},"CQL0393: User function cannot appear in a constraint expression 'function_name'"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CHECK")," expressions and partial indexes (",Object(i.b)("inlineCode",{parentName:"p"},"CREATE INDEX")," with a ",Object(i.b)("inlineCode",{parentName:"p"},"WHERE")," clause) require that the expressions\nbe deterministic.  User defined functions may or may not be deterministic. Since there is at this time no way\nto declare them one way or the otherw UDFs cannot appear inside these constraints to avoid potentially\nweird bugs.  This is likely to change in the future when there is a way to declare deterministic UDFs."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0394-nested-select-expressions-may-not-appear-inside-of-a-constraint-expression"},"CQL0394: Nested select expressions may not appear inside of a constraint expression"),Object(i.b)("p",null,"SQLite does not allow the use of correlated subqueries or other embedded select statements inside of\na CHECK expression or the WHERE clauses of a partial index.  This would require additional joins\non every such operation which would be far too expensive."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0395-table-valued-functions-may-not-be-used-in-an-expression-context-function_name"},"CQL0395: table valued functions may not be used in an expression context 'function_name'"),Object(i.b)("p",null,"A table valued function should be used like a table e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"-- this is right\nselect * from table_valued_func(5);\n")),Object(i.b)("p",null,"Not like a value e.g."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"-- this is wrong\nselect table_valued_func(5);\n\n-- this is also wrong\nselect 1 where table_valued_func(5) = 3;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0396-versioning-attributes-may-not-be-used-on-ddl-inside-a-procedure"},"CQL0396: versioning attributes may not be used on DDL inside a procedure"),Object(i.b)("p",null,"If you are putting DDL inside of a procedure then that is going to run regardless of any ",Object(i.b)("inlineCode",{parentName:"p"},"@create"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," attributes;"),Object(i.b)("p",null,"DDL in entires do not get versioning attributes, attributes are reserved for schema declarations outside\nof any procedure."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0397-object-is-an-orphan-because-its-table-is-deleted-remove-rather-than-delete-object_name"},"CQL0397: object is an orphan because its table is deleted. Remove rather than @delete 'object_name'"),Object(i.b)("p",null,"This error is about either a trigger or an index. In both cases you are trying to use ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," on the index/trigger\nbut the table that the named  object is based on is itself deleted, so the object is an orphan.\nBecause of this, the orphaned object doesn't need, or no longer needs, an ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," tombstone because\nwhen the table is dropped, all of its orphaned indices and triggers will also be dropped."),Object(i.b)("p",null,"To fix this error, remove the named object entirely rather than marking it ",Object(i.b)("inlineCode",{parentName:"p"},"@delete"),"."),Object(i.b)("p",null,"Note: if the index/trigger was previously deleted and now the table is also deleted, it is now safe to remove\nthe index/trigger ",Object(i.b)("inlineCode",{parentName:"p"},"@delete")," tombstone and this error reminds you to do so."),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0398-a-compound-select-cannot-be-ordered-by-the-result-of-an-expression"},"CQL0398: A compound select cannot be ordered by the result of an expression"),Object(i.b)("p",null,"When specifying an ",Object(i.b)("inlineCode",{parentName:"p"},"ORDER BY")," for a compound select, you may only order by indicies (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"3"),") or names (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"foo"),") that correspond to an output column, not by the result of an arbitrary expression (e.g., ",Object(i.b)("inlineCode",{parentName:"p"},"foo + bar"),")."),Object(i.b)("p",null,"For example, this is allowed:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT x, y FROM t0 UNION ALL select x, y FROM t1 ORDER BY y\n")),Object(i.b)("p",null,"The equivalent using an index is also allowed:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT x, y FROM t0 UNION ALL select x, y FROM t1 ORDER BY 2\n")),Object(i.b)("p",null,"This seemingly equivalent version containing an arbitrary expression, however, is not:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-sql"},"SELECT x, y FROM t0 UNION ALL select x, y FROM t1 ORDER BY 1 + 1;\n")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"cql0399-table-must-leave-recreate-management-with-createnn-or-later-table_name"},"CQL0399: table must leave @recreate management with @create(nn) or later 'table_name'"),Object(i.b)("p",null,"The indicated table changed from ",Object(i.b)("inlineCode",{parentName:"p"},"@recreate")," to ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," but it did so in a past schema version.  The change\nmust happen in the current schema version.  That version is indicated by the value of nn."),Object(i.b)("p",null,"To fix this you can change the ",Object(i.b)("inlineCode",{parentName:"p"},"@create")," annotation so that it matches the number in this error message"),Object(i.b)("hr",null),Object(i.b)("p",null,"CQL 0400 : unused, this was added to prevent merge conflicts at the end on literally every checkin"))}b.isMDXComponent=!0}}]);